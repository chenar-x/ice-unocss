"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var WorkboxPlugin = require("workbox-webpack-plugin");
var runtimeCaching_1 = require("./runtimeCaching");
var hasWebManifest_1 = require("./hasWebManifest");
var ManifestPlugin_1 = require("./ManifestPlugin");
var plugin = function (_a, options) {
    var onGetWebpackConfig = _a.onGetWebpackConfig, context = _a.context, log = _a.log, registerUserConfig = _a.registerUserConfig;
    var command = context.command, rootDir = context.rootDir, userConfig = context.userConfig;
    // Register pwa in build.json
    registerUserConfig({
        name: 'pwa',
        validation: function (val) {
            // Be compatible for build-scripts 1.x
            return typeof val === 'boolean' || typeof val === 'object';
        }
    });
    var isDev = command === 'start';
    // Get ice.js version
    var version = process.env.__FRAMEWORK_VERSION__;
    // If pwa no exists in userConfig.
    if (Number(version[0]) > 1 && (!!userConfig.pwa || (userConfig === null || userConfig === void 0 ? void 0 : userConfig.pwa) === false)) {
        return;
    }
    var pwaOptions = ((userConfig === null || userConfig === void 0 ? void 0 : userConfig.pwa) && (userConfig === null || userConfig === void 0 ? void 0 : userConfig.pwa) !== true) ? userConfig === null || userConfig === void 0 ? void 0 : userConfig.pwa : options;
    var _b = (pwaOptions !== null && pwaOptions !== void 0 ? pwaOptions : {}), _c = _b.sw, sw = _c === void 0 ? 'sw.js' : _c, _d = _b.dev, dev = _d === void 0 ? true : _d, _e = _b.skipWaiting, skipWaiting = _e === void 0 ? true : _e, _f = _b.basename, basename = _f === void 0 ? '/' : _f, _g = _b.additionalManifestEntries, additionalManifestEntries = _g === void 0 ? [] : _g, _h = _b.scope, scope = _h === void 0 ? basename : _h, _j = _b.runtimeCaching, runtimeCaching = _j === void 0 ? [] : _j, _k = _b.dynamicStartUrl, dynamicStartUrl = _k === void 0 ? true : _k;
    if (isDev && !dev) {
        log.info('[PWA]: PWA is disabled in DEV mode');
        return;
    }
    var registerEntry = path.join(__dirname, 'register.js');
    var swScope = path.join(scope, '/');
    var devOptions = {};
    onGetWebpackConfig(function (config) {
        var outputPath = config.output.get('path');
        var swDest = path.join(outputPath, sw);
        var swPath = path.join(basename, sw);
        log.info("[PWA]: " + sw + " compiled to " + swDest);
        // service worker registration
        config
            .entry('index')
            .add(registerEntry);
        /**
        * Define global varibles for registration
         */
        config
            .plugin('DefinePlugin')
            .tap(function (_a) {
            var args = _a[0];
            return [__assign(__assign({}, args), { __ICE_PWA_SW__: "'" + swPath + "'", __ICE_START_URL__: "'" + basename + "'", __ICE_SW_SCOPE__: "'" + swScope + "'", __ICE_DYNAMIC_START_URL__: "'" + dynamicStartUrl + "'" })];
        });
        if ((0, hasWebManifest_1.default)(rootDir)) {
            config.plugin('ManifestPlugin').use(ManifestPlugin_1.default);
        }
        if (isDev) {
            log.info('[PWA]: PWA is running in DEV mode. That means hot-reload is enabled for service worker serves all older files.');
            devOptions = {
                exclude: [/hot-update\.(?:js|json)$/i],
                runtimeCaching: __spreadArray(__spreadArray([], runtimeCaching_1.default.filter(function (cache) { return ['ice-js-assets', 'others'].some(function (type) { return cache.options.cacheName === type; }); }), true), [
                    {
                        urlPattern: /(?<!(hot-update))\.(?:js|json)$/i,
                        handler: 'NetworkFirst',
                        options: {
                            cacheName: 'ice-pwa-dev'
                        }
                    }
                ], false),
            };
        }
        config
            .plugin('workbox-webpack-plugin')
            .use(WorkboxPlugin.GenerateSW, [
            __assign({ cacheId: 'ice', swDest: swDest, 
                // auto clean outdated caches
                cleanupOutdatedCaches: true, 
                // bundle workbox to sw.js
                inlineWorkboxRuntime: true, 
                // make service worker controls any existing clients once actived.
                clientsClaim: true, 
                // default to slient
                skipWaiting: skipWaiting, 
                // precache assets which under 10M
                maximumFileSizeToCacheInBytes: 10240000, 
                // custom runtim caching
                runtimeCaching: runtimeCaching.concat(runtimeCaching_1.default), 
                // custom manifests
                additionalManifestEntries: additionalManifestEntries, mode: 'development', navigateFallback: '/index.html', exclude: [/index\.(?:js|html)$/i] }, devOptions)
        ]);
    });
};
exports.default = plugin;
//# sourceMappingURL=index.js.map