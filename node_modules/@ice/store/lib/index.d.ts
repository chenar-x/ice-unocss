import React from 'react';
import * as T from './types';
/**
 * createStore
 *
 * generates a preset Icestore
 * @param models
 * @param initConfig
 */
export declare const createStore: <M extends T.Models, C extends T.CreateStoreConfig<M>>(models: M, initConfig?: C) => T.PresetIcestore<M, T.Action<any, any>>;
interface MapModelToProps<M extends T.ModelConfig> {
    (model: T.ExtractIModelAPIsFromModelConfig<M>): Record<string, any>;
}
export declare const withModel: <M extends T.ModelConfig<any, any>, F extends MapModelToProps<M>, C extends T.CreateStoreConfig<{
    model: M;
}>>(model: M, mapModelToProps?: F, initConfig?: C) => <R extends ReturnType<F>, P extends R>(Component: React.ComponentType<P>) => (props: Pick<P, Exclude<keyof P, keyof R>>) => React.ReactElement;
export default createStore;
export * from './types';
