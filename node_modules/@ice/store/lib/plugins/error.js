var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var defaultValue = {
    error: null,
    value: 0,
};
var cntState = {
    global: __assign({}, defaultValue),
    models: {},
    effects: {},
};
var nextState = {
    global: __assign({}, cntState.global),
    models: __assign({}, cntState.models),
    effects: __assign({}, cntState.effects),
};
function fallback(value) {
    return value < 0 ? 0 : value;
}
var createErrorAction = function (converter, i) { return function (state, _a, error) {
    var _b, _c, _d;
    var name = _a.name, action = _a.action;
    nextState.global = {
        value: fallback(nextState.global.value + i),
        error: error,
    };
    if (typeof nextState.models[name] === 'undefined') {
        nextState.models[name] = __assign({}, defaultValue);
    }
    nextState.models[name] = {
        value: fallback(nextState.models[name].value + i),
        error: error,
    };
    if (typeof nextState.effects[name] === 'undefined') {
        nextState.effects[name] = {};
    }
    if (typeof nextState.effects[name][action] === 'undefined') {
        nextState.effects[name][action] = __assign({}, defaultValue);
    }
    nextState.effects[name][action] = {
        value: fallback(nextState.effects[name][action].value + i),
        error: error,
    };
    return __assign(__assign({}, state), { global: converter(nextState.global), models: __assign(__assign({}, state.models), (_b = {}, _b[name] = converter(nextState.models[name]), _b)), effects: __assign(__assign({}, state.effects), (_c = {}, _c[name] = __assign(__assign({}, state.effects[name]), (_d = {}, _d[action] = converter(nextState.effects[name][action]), _d)), _c)) });
}; };
var validateConfig = function (config) {
    if (config.name && typeof config.name !== 'string') {
        throw new Error('error plugin config name must be a string');
    }
    if (config.asNumber && typeof config.asNumber !== 'boolean') {
        throw new Error('error plugin config asNumber must be a boolean');
    }
    if (config.whitelist && !Array.isArray(config.whitelist)) {
        throw new Error('error plugin config whitelist must be an array of strings');
    }
    if (config.blacklist && !Array.isArray(config.blacklist)) {
        throw new Error('error plugin config blacklist must be an array of strings');
    }
    if (config.whitelist && config.blacklist) {
        throw new Error('error plugin config cannot have both a whitelist & a blacklist');
    }
};
export default (function (config) {
    if (config === void 0) { config = {}; }
    validateConfig(config);
    var errorModelName = config.name || 'error';
    var converter = config.asNumber === true
        ? function (cnt) { return cnt; }
        : function (cnt) { return (__assign(__assign({}, cnt), { value: cnt.value > 0 })); };
    var error = {
        name: errorModelName,
        reducers: {
            hide: createErrorAction(converter, -1),
            show: createErrorAction(converter, 1),
        },
        state: __assign({}, cntState),
    };
    cntState.global = __assign({}, defaultValue);
    error.state.global = converter(cntState.global);
    return {
        config: {
            models: {
                error: error,
            },
        },
        onModel: function (_a) {
            var _this = this;
            var name = _a.name;
            // do not run dispatch on 'error' model
            if (name === errorModelName) {
                return;
            }
            cntState.models[name] = __assign({}, defaultValue);
            error.state.models[name] = converter(cntState.models[name]);
            error.state.effects[name] = {};
            var modelActions = this.dispatch[name];
            // map over effects within models
            Object.keys(modelActions).forEach(function (action) {
                if (_this.dispatch[name][action].isEffect !== true) {
                    return;
                }
                cntState.effects[name][action] = __assign({}, defaultValue);
                error.state.effects[name][action] = converter(cntState.effects[name][action]);
                var actionType = name + "/" + action;
                // ignore items not in whitelist
                if (config.whitelist && !config.whitelist.includes(actionType)) {
                    return;
                }
                // ignore items in blacklist
                if (config.blacklist && config.blacklist.includes(actionType)) {
                    return;
                }
                // copy orig effect pointer
                var origEffect = _this.dispatch[name][action];
                // create function with pre & post error calls
                var effectWrapper = function () {
                    var props = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        props[_i] = arguments[_i];
                    }
                    return __awaiter(_this, void 0, void 0, function () {
                        var error_1;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    // only clear when there has been a error
                                    if (nextState.effects[name] && nextState.effects[name][action] && nextState.effects[name][action].error) {
                                        this.dispatch.error.hide({ name: name, action: action }, null);
                                    }
                                    _a.label = 1;
                                case 1:
                                    _a.trys.push([1, 3, , 4]);
                                    return [4 /*yield*/, origEffect.apply(void 0, props)];
                                case 2: return [2 /*return*/, _a.sent()];
                                case 3:
                                    error_1 = _a.sent();
                                    // display error on console
                                    console.error(error_1);
                                    this.dispatch.error.show({ name: name, action: action }, error_1);
                                    return [3 /*break*/, 4];
                                case 4: return [2 /*return*/];
                            }
                        });
                    });
                };
                effectWrapper.isEffect = true;
                // replace existing effect with new wrapper
                _this.dispatch[name][action] = effectWrapper;
            });
        },
    };
});
