"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var fse = require("fs-extra");
var globby = require("globby");
var ejs = require("ejs");
var prettier = require("prettier");
var debounce = require("lodash.debounce");
var generateExports_1 = require("../utils/generateExports");
var checkExportData_1 = require("../utils/checkExportData");
var removeExportData_1 = require("../utils/removeExportData");
var getRuntimeModules_1 = require("../utils/getRuntimeModules");
var formatPath_1 = require("../utils/formatPath");
var constant_1 = require("../constant");
var RENDER_WAIT = 200;
var Generator = /** @class */ (function () {
    function Generator(_a) {
        var _this = this;
        var rootDir = _a.rootDir, targetDir = _a.targetDir, defaultData = _a.defaultData, log = _a.log, plugins = _a.plugins;
        this.addExport = function (registerKey, exportData) {
            var exportList = _this.contentRegistration[registerKey] || [];
            (0, checkExportData_1.default)(exportList, exportData, registerKey);
            _this.addContent(registerKey, exportData);
            if (_this.rerender) {
                _this.render();
            }
        };
        this.removeExport = function (registerKey, removeExportName) {
            var exportList = _this.contentRegistration[registerKey] || [];
            _this.contentRegistration[registerKey] = (0, removeExportData_1.default)(exportList, removeExportName);
            if (_this.rerender) {
                _this.render();
            }
        };
        this.render = function () {
            _this.rerender = true;
            var plugins = _this.plugins.filter(function (plugin) {
                return !_this.disableRuntimePlugins.includes(plugin.name);
            });
            _this.renderData = _this.renderDataRegistration.reduce(function (previousValue, currentValue) {
                if (typeof currentValue === 'function') {
                    return currentValue(previousValue);
                }
                return previousValue;
            }, _this.parseRenderData());
            _this.renderData.runtimeModules = (0, getRuntimeModules_1.default)(plugins, _this.targetDir, !!_this.renderData.hasJsxRuntime);
            _this.renderTemplates.forEach(function (args) {
                _this.renderFile.apply(_this, args);
            });
        };
        this.debounceRender = debounce(function () {
            _this.render();
        }, RENDER_WAIT);
        this.addRenderFile = function (templatePath, targetPath, extraData) {
            if (extraData === void 0) { extraData = {}; }
            // check target path if it is already been registed
            var renderIndex = _this.renderTemplates.findIndex(function (_a) {
                var templateTarget = _a[1];
                return templateTarget === targetPath;
            });
            if (renderIndex > -1) {
                var targetTemplate = _this.renderTemplates[renderIndex];
                if (targetTemplate[0] !== templatePath) {
                    _this.log.error('[template]', "path " + targetPath + " already been rendered as file " + targetTemplate[0]);
                }
                // replace template with lastest content
                _this.renderTemplates[renderIndex] = [templatePath, targetPath, extraData];
            }
            else {
                _this.renderTemplates.push([templatePath, targetPath, extraData]);
            }
            if (_this.rerender) {
                _this.debounceRender();
            }
        };
        this.addTemplateFiles = function (templateOptions, extraData) {
            if (extraData === void 0) { extraData = {}; }
            var _a = typeof templateOptions === 'string' ? { template: templateOptions, targetDir: '' } : templateOptions, template = _a.template, targetDir = _a.targetDir;
            var templates = !path.extname(template) ? globby.sync(['**/*'], { cwd: template }) : [template];
            templates.forEach(function (templateFile) {
                var templatePath = path.isAbsolute(templateFile) ? templateFile : path.join(template, templateFile);
                var targetPath = path.join(_this.targetDir, targetDir, path.isAbsolute(templateFile) ? path.basename(templateFile) : templateFile);
                _this.addRenderFile(templatePath, targetPath, extraData);
            });
            if (_this.rerender) {
                _this.debounceRender();
            }
        };
        this.renderFile = function (templatePath, targetPath, extraData) {
            if (extraData === void 0) { extraData = {}; }
            var renderExt = '.ejs';
            if (path.extname(templatePath) === '.ejs') {
                var templateContent = fse.readFileSync(templatePath, 'utf-8');
                var renderData = _this.renderData;
                if (typeof extraData === 'function') {
                    renderData = extraData(_this.renderData);
                }
                else {
                    renderData = __assign(__assign({}, renderData), extraData);
                }
                var content = ejs.render(templateContent, renderData);
                try {
                    content = prettier.format(content, {
                        parser: 'typescript',
                        singleQuote: true
                    });
                }
                catch (error) {
                    if (_this.showPrettierError) {
                        _this.log.warn("Prettier format error: " + error.message);
                        _this.showPrettierError = false;
                    }
                }
                var realTargetPath = targetPath.replace(renderExt, '');
                fse.ensureDirSync(path.dirname(realTargetPath));
                fse.writeFileSync(realTargetPath, content, 'utf-8');
            }
            else {
                fse.ensureDirSync(path.dirname(targetPath));
                fse.copyFileSync(templatePath, targetPath);
            }
        };
        this.addDisableRuntimePlugin = function (pluginName) {
            if (!_this.disableRuntimePlugins.includes(pluginName)) {
                _this.disableRuntimePlugins.push(pluginName);
            }
        };
        this.rootDir = rootDir;
        this.targetDir = targetDir;
        this.renderData = defaultData;
        this.contentRegistration = {};
        this.rerender = false;
        this.log = log;
        this.showPrettierError = true;
        this.renderTemplates = [];
        this.renderDataRegistration = [];
        this.plugins = plugins;
        this.disableRuntimePlugins = [];
    }
    // addEntryImports/addEntryCode
    Generator.prototype.addContent = function (apiName) {
        var _a;
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var apiKeys = (0, constant_1.getExportApiKeys)();
        if (!apiKeys.includes(apiName)) {
            throw new Error("invalid API " + apiName);
        }
        var data = args[0], position = args[1];
        if (position && !['before', 'after'].includes(position)) {
            throw new Error("invalid position " + position + ", use before|after");
        }
        var registerKey = position ? apiName + "_" + position : apiName;
        if (!this.contentRegistration[registerKey]) {
            this.contentRegistration[registerKey] = [];
        }
        var content = Array.isArray(data) ? data : [data];
        (_a = this.contentRegistration[registerKey]).push.apply(_a, content);
    };
    Generator.prototype.getExportStr = function (registerKey, dataKeys) {
        var _a;
        var exportList = this.contentRegistration[registerKey] || [];
        var _b = (0, generateExports_1.default)(exportList), importStr = _b.importStr, exportStr = _b.exportStr;
        var importStrKey = dataKeys[0], exportStrKey = dataKeys[1];
        return _a = {},
            _a[importStrKey] = importStr,
            _a[exportStrKey] = exportStr,
            _a;
    };
    Generator.prototype.parseRenderData = function () {
        var _this = this;
        var staticConfig = globby.sync(['src/app.json'], { cwd: this.rootDir });
        // fix https://github.com/raxjs/rax-app/issues/831
        var globalStyles = globby.sync(['src/global.@(scss|less|styl|css)'], { cwd: this.rootDir, absolute: true });
        var exportsData = {};
        constant_1.EXPORT_API_MPA.forEach(function (item) {
            item.name.forEach(function (key) {
                var data = _this.getExportStr(key, item.value);
                exportsData = Object.assign({}, exportsData, data);
            });
        });
        return __assign(__assign(__assign({}, this.renderData), exportsData), { staticConfig: staticConfig.length && staticConfig[0], globalStyle: globalStyles.length && (0, formatPath_1.default)(path.relative(path.join(this.targetDir, 'core'), globalStyles[0])), entryImportsBefore: this.generateImportStr('addEntryImports_before'), entryImportsAfter: this.generateImportStr('addEntryImports_after'), entryCodeBefore: this.contentRegistration.addEntryCode_before || '', entryCodeAfter: this.contentRegistration.addEntryCode_after || '' });
    };
    Generator.prototype.generateImportStr = function (apiName) {
        var imports = this.contentRegistration[apiName] || [];
        return imports.map(function (_a) {
            var source = _a.source, specifier = _a.specifier;
            return specifier ?
                "import " + specifier + " from '" + source + "';" : "import '" + source + "'";
        }).join('\n');
    };
    Generator.prototype.modifyRenderData = function (registration) {
        this.renderDataRegistration.push(registration);
        if (this.rerender) {
            this.debounceRender();
        }
    };
    return Generator;
}());
exports.default = Generator;
//# sourceMappingURL=index.js.map