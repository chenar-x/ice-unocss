"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var hash = require("object-hash");
var app_templates_1 = require("@builder/app-templates");
var generator_1 = require("./generator");
var constant_1 = require("./constant");
var dev_1 = require("./dev");
var config_1 = require("./config");
var getBuildConfig_1 = require("./utils/getBuildConfig");
// eslint-disable-next-line
var chalk = require('chalk');
// eslint-disable-next-line
var _a = require('miniapp-builder-shared').constants, MINIAPP = _a.MINIAPP, WECHAT_MINIPROGRAM = _a.WECHAT_MINIPROGRAM, BAIDU_SMARTPROGRAM = _a.BAIDU_SMARTPROGRAM, KUAISHOU_MINIPROGRAM = _a.KUAISHOU_MINIPROGRAM, QUICKAPP = _a.QUICKAPP, BYTEDANCE_MICROAPP = _a.BYTEDANCE_MICROAPP;
var miniappPlatforms = [MINIAPP, WECHAT_MINIPROGRAM, BYTEDANCE_MICROAPP, BAIDU_SMARTPROGRAM, KUAISHOU_MINIPROGRAM];
exports.default = (function (api, options) {
    var onHook = api.onHook, context = api.context, setValue = api.setValue;
    var command = context.command, userConfig = context.userConfig, rootDir = context.rootDir;
    var _a = userConfig.targets, targets = _a === void 0 ? ['web'] : _a;
    var framework = options.framework;
    // Set framework field
    setValue('FRAMEWORK', framework);
    var hasJsxRuntime = (function () {
        var _a;
        try {
            // auto detect of jsx runtime
            // eslint-disable-next-line
            var tsConfig = require(path.join(rootDir, 'tsconfig.json'));
            if (((_a = tsConfig === null || tsConfig === void 0 ? void 0 : tsConfig.compilerOptions) === null || _a === void 0 ? void 0 : _a.jsx) !== 'react-jsx') {
                return false;
            }
            // ensure react/jsx-runtime
            require.resolve('react/jsx-runtime');
            return true;
        }
        catch (e) {
            return false;
        }
    })();
    // Set jsx runtime value
    setValue('HAS_JSX_RUNTIME', hasJsxRuntime);
    // Set webpack cache id
    setValue('WEBPACK_CACHE_ID', hash(__assign(__assign({}, userConfig), { hasJsxRuntime: hasJsxRuntime })));
    // Check target
    checkTargets(targets);
    // Set temporary directory
    // eg: .ice or .rax
    (0, config_1.setTempDir)(api, options);
    // Set project type
    // eg: ts | js
    (0, config_1.setProjectType)(api);
    // Modify default entry to src/app
    // eg: src/app.(ts|js)
    (0, config_1.setEntry)(api, options);
    // Set alias
    (0, config_1.setAlias)(api, options);
    // register config in build.json
    (0, config_1.setRegisterUserConfig)(api);
    // register api method
    var generator = initGenerator(api, __assign(__assign({}, options), { hasJsxRuntime: hasJsxRuntime }));
    (0, config_1.setRegisterMethod)(api, { generator: generator });
    // add core template for framework
    renderDefaultTemplate(generator, { framework: framework });
    // watch src folder
    if (command === 'start') {
        (0, dev_1.default)(api, { render: generator.render });
    }
    onHook("before." + command + ".run", function () {
        generator.render();
    });
});
function renderDefaultTemplate(generator, _a) {
    var framework = _a.framework;
    var templateRoot = path.join(__dirname, './generator/templates');
    var templates = [{
            dir: (0, app_templates_1.getFrameworkTemplateDir)(framework),
            target: 'core',
        }, {
            dir: (0, app_templates_1.getCommonTemplateDir)(),
            target: 'core',
        }, {
            dir: path.join(templateRoot, 'types'),
            target: 'types',
        }, {
            path: path.join(templateRoot, './index.ts.ejs'),
        }];
    templates.forEach(function (_a) {
        var dir = _a.dir, target = _a.target, filePath = _a.path;
        generator.addTemplateFiles({
            template: dir || filePath,
            targetDir: target || '',
        });
    });
}
function initGenerator(api, options) {
    var getAllPlugin = api.getAllPlugin, context = api.context, log = api.log, getValue = api.getValue;
    var rootDir = context.rootDir;
    var plugins = getAllPlugin();
    var targetDir = getValue(constant_1.TEMP_PATH);
    return new generator_1.default({
        rootDir: rootDir,
        targetDir: targetDir,
        defaultData: getDefaultRenderData(api, options),
        log: log,
        plugins: plugins,
    });
}
function getDefaultRenderData(api, options) {
    var context = api.context;
    var userConfig = context.userConfig;
    var framework = options.framework, hasJsxRuntime = options.hasJsxRuntime;
    var _a = userConfig.targets, targets = _a === void 0 ? [] : _a, _b = userConfig.ssr, ssr = _b === void 0 ? false : _b;
    var isMiniapp = targets.some(function (target) { return miniappPlatforms.includes(target); });
    var renderData = {
        framework: framework,
        buildConfig: (0, getBuildConfig_1.default)(userConfig),
        hasJsxRuntime: hasJsxRuntime,
        relativeCorePath: '.',
        typesPath: '../types',
    };
    if (framework === 'rax') {
        return __assign(__assign({}, renderData), { isReact: false, isRax: true, isMiniapp: isMiniapp, isMPA: false, tabBarPath: '', routesFilePath: './staticConfig' });
    }
    else {
        return __assign(__assign({}, renderData), { isReact: true, isRax: false, ssr: ssr });
    }
}
function checkTargets(targets) {
    var hasError = false;
    if (Object.prototype.toString.call(targets) === '[object Object]') {
        hasError = true;
    }
    if (typeof targets === 'string') {
        hasError = true;
    }
    if (Array.isArray(targets) && !matchTargets(targets)) {
        hasError = true;
    }
    if (hasError) {
        var msg = "\n  targets must be the array type in build.json.\n\n    e.g. { \"targets\": [\"miniapp\", \"wechat-miniprogram\"] }\n\n  if you want to describes the browserslist environments for your project.\n  you should set browserslist in build.json.\n\n    e.g. { \"browserslist\": { \"chrome\": \"58\", \"ie\": 11 } }\n";
        console.log();
        console.log(chalk.red(msg));
        console.log();
        process.exit(1);
    }
}
function matchTargets(targets) {
    return targets.every(function (target) {
        return ['web', 'weex', 'kraken', MINIAPP, WECHAT_MINIPROGRAM, BYTEDANCE_MICROAPP, BAIDU_SMARTPROGRAM, KUAISHOU_MINIPROGRAM, QUICKAPP].includes(target);
    });
}
//# sourceMappingURL=index.js.map