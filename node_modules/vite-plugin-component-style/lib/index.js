"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var fse = require("fs-extra");
var vite_1 = require("vite");
var es_module_lexer_1 = require("es-module-lexer");
var magic_string_1 = require("magic-string");
var pluginutils_1 = require("@rollup/pluginutils");
var findUp = require("find-up");
var REGEX_REQUIRE = /require\s*\(['"`]([^`"']+?)[`'"]\)/;
exports.default = (function () {
    var include = ['**/*.ts', '**/*.js', '**/*.tsx', '**/*.jsx'];
    var exclude = 'node_modules/**';
    var filter = (0, pluginutils_1.createFilter)(include, exclude);
    var needSourcemap = false;
    return {
        name: 'vite-plugin-component-style',
        enforce: 'post',
        configResolved: function (resolvedConfig) {
            needSourcemap = !!resolvedConfig.build.sourcemap;
        },
        transform: function (code, id) {
            return __awaiter(this, void 0, void 0, function () {
                var imports, s, str, _loop_1, index, state_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!code || !filter(id)) {
                                return [2 /*return*/, null];
                            }
                            return [4 /*yield*/, es_module_lexer_1.init];
                        case 1:
                            _a.sent();
                            imports = [];
                            try {
                                imports = (0, es_module_lexer_1.parse)(code)[0];
                            }
                            catch (e) {
                                console.log('imports error', e);
                            }
                            if (!imports.length) {
                                return [2 /*return*/, null];
                            }
                            str = function () { return s || (s = new magic_string_1.default(code)); };
                            _loop_1 = function (index) {
                                var _b = imports[index], n = _b.n, se = _b.se;
                                // eslint-disable-next-line no-continue
                                if (!n || n.startsWith('.') || n.startsWith('@/') || path.isAbsolute(n))
                                    return "continue";
                                var packageJsonPath = '';
                                try {
                                    packageJsonPath = findUp.sync('package.json', { cwd: require.resolve(n) });
                                }
                                catch (err) {
                                    // ignore errors
                                }
                                if (packageJsonPath) {
                                    var _c = fse.readJSONSync(packageJsonPath), stylePath = _c.stylePath, module_1 = _c.module, main = _c.main;
                                    if (stylePath) {
                                        var mainEntry = path.join(path.dirname(packageJsonPath), module_1 || main);
                                        var styleFilePath_1 = path.join(path.dirname(mainEntry), stylePath || 'style.js');
                                        if (fse.existsSync(styleFilePath_1)) {
                                            var matches = fse.readFileSync(styleFilePath_1, 'utf-8').match(new RegExp(REGEX_REQUIRE.source, 'g'));
                                            if (matches) {
                                                var styleStatements = matches.map(function (matchStr) {
                                                    var _a = matchStr.match(REGEX_REQUIRE), requireSource = _a[1];
                                                    return "import \"" + (!requireSource.startsWith('.') ? requireSource : (0, vite_1.normalizePath)(path.join(path.dirname(styleFilePath_1), requireSource))) + "\"";
                                                });
                                                str().prependRight(se, ";\n" + styleStatements.join(';\n'));
                                            }
                                            else {
                                                // import style
                                                str().prependRight(se, ";\nimport \"" + (0, vite_1.normalizePath)(styleFilePath_1) + "\"");
                                            }
                                        }
                                        return { value: {
                                                map: needSourcemap ? str().generateMap({ hires: true }) : null,
                                                code: str().toString(),
                                            } };
                                    }
                                }
                            };
                            for (index = 0; index < imports.length; index++) {
                                state_1 = _loop_1(index);
                                if (typeof state_1 === "object")
                                    return [2 /*return*/, state_1.value];
                            }
                            return [2 /*return*/];
                    }
                });
            });
        }
    };
});
//# sourceMappingURL=index.js.map