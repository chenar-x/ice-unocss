"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var WebpackPluginQueryLoader = /** @class */ (function () {
    function WebpackPluginQueryLoader(options) {
        var defaultLoaderConfig = {
            raw: {
                loader: require.resolve('raw-loader'),
            },
            url: {
                loader: require.resolve('url-loader'),
            },
            worker: {
                loader: require.resolve('worker-loader'),
            },
            sharedworker: {
                loader: require.resolve('worker-loader'),
                options: {
                    worker: 'SharedWorker',
                },
            },
            'worker&inline': {
                loader: require.resolve('worker-loader'),
                options: {
                    inline: 'fallback',
                },
            },
        };
        this.options = Object.assign(options || {}, defaultLoaderConfig);
        this.pluginName = 'WebpackPluginQueryLoader';
        this.resourceMap = new Map();
    }
    WebpackPluginQueryLoader.prototype.getMatchedQuery = function (query) {
        var supportedQuery = Object.keys(this.options);
        var regexpForMatchRequest = new RegExp("^\\?(" + supportedQuery.join('|') + ")$");
        var _a = query.match(regexpForMatchRequest) || [], matchedQuery = _a[1];
        return matchedQuery;
    };
    WebpackPluginQueryLoader.prototype.apply = function (compiler) {
        var _this = this;
        compiler.hooks.normalModuleFactory.tap(this.pluginName, function (normalModuleFactory) {
            normalModuleFactory.hooks.afterResolve.tap(_this.pluginName, function (resolveData) {
                var _a, _b;
                var moduleData = resolveData.createData;
                var matchedQuery = ((_a = moduleData === null || moduleData === void 0 ? void 0 : moduleData.resourceResolveData) === null || _a === void 0 ? void 0 : _a.query) && _this.getMatchedQuery((_b = moduleData === null || moduleData === void 0 ? void 0 : moduleData.resourceResolveData) === null || _b === void 0 ? void 0 : _b.query);
                if (matchedQuery && !_this.resourceMap.get(moduleData.resource)) {
                    // rewrite request
                    var loaderConfig = _this.options[matchedQuery];
                    // add loader as preLoaders
                    moduleData.loaders.push(__assign({ ident: null, type: null, options: null }, loaderConfig));
                    // set map in case of module resolved multi times after push loader
                    _this.resourceMap.set(moduleData.resource, true);
                }
            });
        });
        compiler.hooks.emit.tap(this.pluginName, function () {
            // reset resourceMap after compile
            _this.resourceMap = new Map();
        });
    };
    return WebpackPluginQueryLoader;
}());
exports.default = WebpackPluginQueryLoader;
//# sourceMappingURL=index.js.map