import BaseFoundation, { DefaultAdapter, noopFunction } from '../base/foundation';
export interface BasicTargetObject {
    [x: string]: any;
    checked?: boolean;
}
export interface BasicCheckboxEvent {
    target: BasicTargetObject;
    stopPropagation: () => void;
    preventDefault: () => void;
    nativeEvent: {
        stopImmediatePropagation: () => void;
    };
}
export interface CheckboxAdapter<P = Record<string, any>, S = Record<string, any>> extends DefaultAdapter<P, S> {
    getIsInGroup: () => boolean;
    getGroupValue: () => any[];
    notifyGroupChange: (event: BasicCheckboxEvent) => void;
    getGroupDisabled: () => boolean;
    setNativeControlChecked: (checked: boolean) => void;
    getState: noopFunction;
    notifyChange: (event: BasicCheckboxEvent) => void;
}
declare class CheckboxFoundation<P = Record<string, any>, S = Record<string, any>> extends BaseFoundation<CheckboxAdapter<P, S>, P, S> {
    constructor(adapter: CheckboxAdapter<P, S>);
    init(): void;
    getEvent(checked: boolean, e: any): {
        target: any;
        stopPropagation: () => void;
        preventDefault: () => void;
        nativeEvent: {
            stopImmediatePropagation: () => void;
        };
    };
    notifyChange(checked: boolean, e: any): void;
    handleChange(e: any): void;
    handleChangeInGroup(e: any): void;
    setChecked(checked: boolean): void;
    destroy(): void;
}
export interface BaseCheckboxProps {
    id?: string;
    autoFocus?: boolean;
    checked?: boolean;
    defaultChecked?: boolean;
    disabled?: boolean;
    indeterminate?: boolean;
    onChange?: (e: BasicCheckboxEvent) => any;
    value?: any;
    style?: Record<string, any>;
    className?: string;
    prefixCls?: string;
    onMouseEnter?: (e: any) => void;
    onMouseLeave?: (e: any) => void;
    extra?: any;
}
export default CheckboxFoundation;
