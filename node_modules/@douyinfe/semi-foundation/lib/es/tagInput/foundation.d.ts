import BaseFoundation, { DefaultAdapter } from '../base/foundation';
export declare type TagInputChangeEvent = any;
export declare type TagInputCursorEvent = any;
export declare type TagInputKeyboardEvent = any;
export declare type TagInputMouseEvent = any;
export interface TagInputAdapter extends DefaultAdapter {
    setInputValue: (inputValue: string) => void;
    setTagsArray: (tagsArray: string[]) => void;
    setFocusing: (focusing: boolean) => void;
    setHovering: (hovering: boolean) => void;
    notifyBlur: (e: TagInputCursorEvent) => void;
    notifyFocus: (e: TagInputCursorEvent) => void;
    notifyInputChange: (v: string, e: TagInputChangeEvent) => void;
    notifyTagChange: (v: string[]) => void;
    notifyTagAdd: (v: string[]) => void;
    notifyTagRemove: (v: string, idx: number) => void;
    notifyKeyDown: (e: TagInputMouseEvent) => void;
}
declare class TagInputFoundation extends BaseFoundation<TagInputAdapter> {
    constructor(adapter: TagInputAdapter);
    /**
     * handler of input change
     */
    handleInputChange: (e: TagInputChangeEvent) => void;
    /**
     * check whether the input change is legal
     */
    _checkInputChangeValid: (value: string) => boolean;
    /**
     * Input event handler when onKeyDown is triggered
     */
    handleKeyDown: (e: TagInputKeyboardEvent) => void;
    _handleAddTags(e: TagInputChangeEvent): void;
    handleInputBlur(e: TagInputCursorEvent): void;
    handleInputFocus(e: TagInputCursorEvent): void;
    handleClearBtn(e: TagInputMouseEvent): void;
    handleTagClose(index: number): void;
    handleInputMouseEnter(): void;
    handleInputMouseLeave(): void;
    /**
     * handler of delete tag
     */
    _onRemove(newTagList: string[], removedTags: string, index: number): void;
    /**
     * handler of add tag
     */
    _onAdd(newTagList: string[], addTags: string[]): void;
    /**
     * handler of input change
     */
    _onInputChange(value: string, e: TagInputChangeEvent): void;
}
export default TagInputFoundation;
