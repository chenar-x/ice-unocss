import BaseFoundation, { DefaultAdapter } from '../base/foundation';
export interface RatingAdapter<P = Record<string, any>, S = Record<string, any>> extends DefaultAdapter<P, S> {
    focus: () => void;
    getStarDOM: (index: number) => Element;
    notifyHoverChange: (hoverValue: number, clearedValue: number) => void;
    updateValue: (value: number) => void;
    clearValue: (clearedValue: number) => void;
    notifyFocus: (e: any) => void;
    notifyBlur: (e: any) => void;
    notifyKeyDown: (e: any) => void;
}
export default class RatingFoundation<P = Record<string, any>, S = Record<string, any>> extends BaseFoundation<RatingAdapter<P, S>, P, S> {
    constructor(adapter: RatingAdapter<P, S>);
    init(): void;
    _getScroll(w: Window, top?: boolean): number;
    _getClientPosition(elem: Element): {
        left: any;
        top: any;
    };
    _getOffsetLeft(el: Element): any;
    getStarValue(index: number, pos: number): number;
    handleHover(event: any, index: number): void;
    handleMouseLeave(): void;
    handleClick(event: any, index: number): void;
    handleFocus(e: any): void;
    handleBlur(e: any): void;
    handleKeyDown(event: any, value: number): void;
}
