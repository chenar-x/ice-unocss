declare type Many<T> = T | ReadonlyArray<T>;
declare type PropertyName = string | number | symbol;
declare type PropertyPath = Many<PropertyName>;
declare type ObjctType = Record<string, any>;
export declare function empty(object: ObjctType): boolean;
export declare function get(object: ObjctType, path: PropertyPath): any;
export declare function remove(object: ObjctType, path: PropertyPath): void;
export declare function set(object: any, path: PropertyPath, value: any, allowEmpty?: boolean): any;
export declare function has(object: ObjctType, path: PropertyPath): boolean;
/**
 * set static properties from `srcObj` to `obj`
 * @param {object|Function} obj
 * @param {object|Function} srcObj
 * @returns {object|Function}
 */
export declare function forwardStatics<T extends ObjctType | ((...arg: any) => any)>(obj: T, srcObj: ObjctType | ((...arg: any) => any)): T;
export {};
