"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _assign = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/assign"));

var _foundation = _interopRequireDefault(require("../base/foundation"));

/* eslint-disable no-param-reassign */
const KeyCode = {
  LEFT: 37,
  RIGHT: 39
};

class RatingFoundation extends _foundation.default {
  constructor(adapter) {
    super((0, _assign.default)((0, _assign.default)({}, RatingFoundation.defaultAdapter), adapter));
  }

  init() {
    const {
      autoFocus,
      disabled
    } = this.getProps();

    if (autoFocus && !disabled) {
      this._adapter.focus();
    }
  }

  _getScroll(w, top) {
    let ret = top ? w.pageYOffset : w.pageXOffset;
    const method = top ? 'scrollTop' : 'scrollLeft';

    if (typeof ret !== 'number') {
      const d = w.document; // ie6,7,8 standard mode

      ret = d.documentElement[method];

      if (typeof ret !== 'number') {
        // quirks mode
        ret = d.body[method];
      }
    }

    return ret;
  }

  _getClientPosition(elem) {
    let x, y;
    const doc = elem.ownerDocument;
    const {
      body
    } = doc;
    const docElem = doc && doc.documentElement;
    const box = elem.getBoundingClientRect();
    x = box.left;
    y = box.top;
    x -= docElem.clientLeft || body.clientLeft || 0;
    y -= docElem.clientTop || body.clientTop || 0;
    return {
      left: x,
      top: y
    };
  }

  _getOffsetLeft(el) {
    const pos = this._getClientPosition(el);

    const doc = el.ownerDocument;
    const w = doc.defaultView || doc.parentWindow;
    pos.left += this._getScroll(w);
    return pos.left;
  }

  getStarValue(index, pos) {
    const {
      allowHalf
    } = this.getProps();

    const direction = this._adapter.getContext('direction');

    const reverse = direction === 'rtl';
    let value = index + 1;

    if (allowHalf) {
      const starEle = this._adapter.getStarDOM(index);

      const leftDis = this._getOffsetLeft(starEle);

      const width = starEle.clientWidth;

      if (reverse && pos - leftDis > width / 2) {
        value -= 0.5;
      } else if (!reverse && pos - leftDis < width / 2) {
        value -= 0.5;
      }
    }

    return value;
  }

  handleHover(event, index) {
    const currValue = this.getStarValue(index, event.pageX);
    const {
      clearedValue,
      hoverValue
    } = this.getStates();

    if (currValue !== hoverValue && currValue !== clearedValue) {
      this._adapter.notifyHoverChange(currValue, null);
    }
  }

  handleMouseLeave() {
    this._adapter.notifyHoverChange(undefined, null);
  }

  handleClick(event, index) {
    const {
      allowClear
    } = this.getProps();
    const {
      value
    } = this.getStates();
    const newValue = this.getStarValue(index, event.pageX);
    const isReset = allowClear ? newValue === value : false;

    this._adapter.updateValue(isReset ? 0 : newValue);

    if (isReset) {
      this._adapter.notifyHoverChange(undefined, newValue);
    } else {
      this._adapter.clearValue(null);
    }
  }

  handleFocus(e) {
    this._adapter.notifyFocus(e);
  }

  handleBlur(e) {
    this._adapter.notifyBlur(e);
  }

  handleKeyDown(event, value) {
    const {
      keyCode
    } = event;
    const {
      count,
      allowHalf
    } = this.getProps();

    const direction = this._adapter.getContext('direction');

    const reverse = direction === 'rtl';

    if (keyCode === KeyCode.RIGHT && value < count && !reverse) {
      if (allowHalf) {
        value += 0.5;
      } else {
        value += 1;
      }
    } else if (keyCode === KeyCode.LEFT && value > 0 && !reverse) {
      if (allowHalf) {
        value -= 0.5;
      } else {
        value -= 1;
      }
    } else if (keyCode === KeyCode.RIGHT && value > 0 && reverse) {
      if (allowHalf) {
        value -= 0.5;
      } else {
        value -= 1;
      }
    } else if (keyCode === KeyCode.LEFT && value < count && reverse) {
      if (allowHalf) {
        value += 0.5;
      } else {
        value += 1;
      }
    }

    this._adapter.updateValue(value);

    event.preventDefault();

    this._adapter.notifyKeyDown(event);
  }

}

exports.default = RatingFoundation;