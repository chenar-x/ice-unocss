"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _assign = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/assign"));

var _noop2 = _interopRequireDefault(require("lodash/noop"));

var _foundation = _interopRequireDefault(require("../base/foundation"));

class TabsFoundation extends _foundation.default {
  constructor(adapter) {
    super((0, _assign.default)({}, adapter));
    this.destroy = _noop2.default;
  }

  init() {
    this._adapter.collectPane();
  }

  _notifyChange(activeKey) {
    const {
      activeKey: stateActiveKey
    } = this.getStates();

    if (stateActiveKey !== activeKey) {
      this._adapter.notifyChange(activeKey);
    }
  }

  handleTabClick(activeKey, event) {
    const isControledComponent = this._isInProps('activeKey');

    if (isControledComponent) {
      this._notifyChange(activeKey);
    } else {
      this._notifyChange(activeKey);

      this.handleNewActiveKey(activeKey);
    }

    this._adapter.notifyTabClick(activeKey, event);
  }

  handleNewActiveKey(activeKey) {
    const {
      activeKey: stateActiveKey
    } = this.getStates();

    if (stateActiveKey !== activeKey) {
      this._adapter.setNewActiveKey(activeKey);
    }
  }

  getDefaultActiveKey() {
    let activeKey;
    const props = this.getProps();

    if ('activeKey' in props) {
      activeKey = props.activeKey;
    } else if ('defaultActiveKey' in props) {
      activeKey = props.defaultActiveKey;
    } else {
      activeKey = this._adapter.getDefaultActiveKeyFromChildren();
    }

    return activeKey;
  }

  handleTabListChange() {
    this._adapter.collectPane();
  }

  handleTabPanesChange() {
    this._adapter.collectPane();

    this._adapter.collectActiveKey();
  }

  handleTabDelete(tabKey) {
    this._adapter.notifyTabDelete(tabKey);
  }

}

var _default = TabsFoundation;
exports.default = _default;