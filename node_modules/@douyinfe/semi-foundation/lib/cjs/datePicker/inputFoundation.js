"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _assign = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/assign"));

var _foundation = _interopRequireDefault(require("../base/foundation"));

var _formatter = require("./_utils/formatter");

var _getDefaultFormatToken = require("./_utils/getDefaultFormatToken");

/* eslint-disable max-len */
const KEY_CODE_ENTER = 'Enter';
const KEY_CODE_TAB = 'Tab';

class InputFoundation extends _foundation.default {
  constructor(adapter) {
    super((0, _assign.default)({}, adapter));
  } // eslint-disable-next-line @typescript-eslint/no-empty-function


  init() {} // eslint-disable-next-line @typescript-eslint/no-empty-function


  destroy() {}

  handleClick(e) {
    this._adapter.notifyClick(e);
  }

  handleChange(value, e) {
    this._adapter.notifyChange(value, e);
  }

  handleInputComplete(e) {
    /**
     * onKeyPress, e.key Code gets a value of 0 instead of 13
     * Here key is used to judge the button
     */
    if (e.key === KEY_CODE_ENTER) {
      this._adapter.notifyEnter(e.target.value);
    }
  }

  handleInputClear(e) {
    this._adapter.notifyClear(e);
  }

  handleRangeInputClear(e) {
    // prevent trigger click outside
    this.stopPropagation(e);

    this._adapter.notifyRangeInputClear(e);
  }

  handleRangeInputEnterPress(e, rangeInputValue) {
    if (e.key === KEY_CODE_ENTER) {
      this._adapter.notifyEnter(rangeInputValue);
    }
  }

  handleRangeInputEndKeyPress(e) {
    if (e.key === KEY_CODE_TAB) {
      this._adapter.notifyTabPress(e);
    }
  }

  handleRangeInputFocus(e, rangeType) {
    this._adapter.notifyRangeInputFocus(e, rangeType);
  }

  formatShowText(value) {
    const {
      type,
      dateFnsLocale,
      format,
      rangeSeparator
    } = this._adapter.getProps();

    const formatToken = format || (0, _getDefaultFormatToken.getDefaultFormatTokenByType)(type);
    let text = '';

    switch (type) {
      case 'date':
        text = (0, _formatter.formatDateValues)(value, formatToken, undefined, dateFnsLocale);
        break;

      case 'dateRange':
        text = (0, _formatter.formatDateValues)(value, formatToken, {
          groupSize: 2,
          groupInnerSeparator: rangeSeparator
        }, dateFnsLocale);
        break;

      case 'dateTime':
        text = (0, _formatter.formatDateValues)(value, formatToken, undefined, dateFnsLocale);
        break;

      case 'dateTimeRange':
        text = (0, _formatter.formatDateValues)(value, formatToken, {
          groupSize: 2,
          groupInnerSeparator: rangeSeparator
        }, dateFnsLocale);
        break;

      case 'month':
        text = (0, _formatter.formatDateValues)(value, formatToken, undefined, dateFnsLocale);
        break;

      default:
        break;
    }

    return text;
  }

}

exports.default = InputFoundation;