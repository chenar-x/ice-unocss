import _indexOfInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/index-of";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import _Object$assign from "@babel/runtime-corejs3/core-js-stable/object/assign";

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && _indexOfInstanceProperty(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof _Object$getOwnPropertySymbols === "function") for (var i = 0, p = _Object$getOwnPropertySymbols(s); i < p.length; i++) {
    if (_indexOfInstanceProperty(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

import React, { PureComponent } from 'react';
import cls from 'classnames';
import PropTypes from 'prop-types';
import { cssClasses } from '@douyinfe/semi-foundation/lib/es/collapse/constants';
import Collapsible from '../collapsible';
import CollapseContext from './collapse-context';
import { IconChevronDown, IconChevronUp } from '@douyinfe/semi-icons';
export default class CollapsePanel extends PureComponent {
  renderHeader(active) {
    let expandIconEnable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    const {
      header,
      extra
    } = this.props;
    let {
      expandIcon,
      collapseIcon
    } = this.context;
    const {
      expandIconPosition
    } = this.context;

    if (typeof expandIcon === 'undefined') {
      expandIcon = /*#__PURE__*/React.createElement(IconChevronDown, null);
    }

    if (typeof collapseIcon === 'undefined') {
      collapseIcon = /*#__PURE__*/React.createElement(IconChevronUp, null);
    }

    const icon = /*#__PURE__*/React.createElement("span", {
      className: cls(["".concat(cssClasses.PREFIX, "-header-icon"), {
        ["".concat(cssClasses.PREFIX, "-header-iconDisabled")]: !expandIconEnable
      }])
    }, expandIconEnable ? active ? collapseIcon : expandIcon : expandIcon);
    const iconPosLeft = expandIconPosition === 'left';

    if (typeof header === 'string') {
      return /*#__PURE__*/React.createElement(React.Fragment, null, iconPosLeft ? icon : null, /*#__PURE__*/React.createElement("span", null, header), /*#__PURE__*/React.createElement("span", {
        className: "".concat(cssClasses.PREFIX, "-header-right")
      }, /*#__PURE__*/React.createElement("span", null, extra), iconPosLeft ? null : icon));
    }

    return /*#__PURE__*/React.createElement(React.Fragment, null, iconPosLeft ? icon : null, header, iconPosLeft ? null : icon);
  }

  render() {
    const _a = this.props,
          {
      className,
      children,
      itemKey,
      reCalcKey
    } = _a,
          restProps = __rest(_a, ["className", "children", "itemKey", "reCalcKey"]);

    const {
      keepDOM,
      expandIconPosition,
      activeSet,
      onClick,
      motion
    } = this.context;
    const active = activeSet.has(itemKey);
    const itemCls = cls(className, {
      ["".concat(cssClasses.PREFIX, "-item")]: true
    });
    const headerCls = cls({
      ["".concat(cssClasses.PREFIX, "-header")]: true,
      ["".concat(cssClasses.PREFIX, "-header-iconLeft")]: expandIconPosition === 'left'
    });
    const contentCls = cls({
      ["".concat(cssClasses.PREFIX, "-content")]: true
    });
    return /*#__PURE__*/React.createElement("div", _Object$assign({
      role: "Collapse-panel",
      className: itemCls
    }, restProps), /*#__PURE__*/React.createElement("div", {
      role: "button",
      tabIndex: 0,
      className: headerCls,
      "aria-expanded": active ? 'true' : 'false',
      onClick: e => onClick(itemKey, e)
    }, this.renderHeader(active, children !== undefined)), children && /*#__PURE__*/React.createElement(Collapsible, {
      isOpen: active,
      keepDOM: keepDOM,
      motion: motion,
      reCalcKey: reCalcKey
    }, /*#__PURE__*/React.createElement("div", {
      className: contentCls
    }, /*#__PURE__*/React.createElement("div", {
      className: "".concat(cssClasses.PREFIX, "-content-wrapper")
    }, children))));
  }

}
CollapsePanel.contextType = CollapseContext;
CollapsePanel.propTypes = {
  itemKey: PropTypes.string,
  extra: PropTypes.node,
  header: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),
  className: PropTypes.string,
  reCalcKey: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
};