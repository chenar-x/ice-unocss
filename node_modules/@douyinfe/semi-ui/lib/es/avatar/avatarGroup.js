import _isNumber from "lodash/isNumber";
import _isFunction from "lodash/isFunction";
import _get from "lodash/get";
import _indexOfInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/index-of";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import _Array$isArray from "@babel/runtime-corejs3/core-js-stable/array/is-array";
import _sliceInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/slice";
import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import _Object$assign from "@babel/runtime-corejs3/core-js-stable/object/assign";

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && _indexOfInstanceProperty(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof _Object$getOwnPropertySymbols === "function") for (var i = 0, p = _Object$getOwnPropertySymbols(s); i < p.length; i++) {
    if (_indexOfInstanceProperty(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

import React, { PureComponent, Fragment } from 'react';
import cls from 'classnames';
import PropTypes from 'prop-types';
import Avatar from './index';
import { cssClasses, strings } from '@douyinfe/semi-foundation/lib/es/avatar/constants';
const sizeSet = strings.SIZE;
const shapeSet = strings.SHAPE;
const overlapFromSet = strings.OVERLAP_FROM;
const prefixCls = cssClasses.PREFIX;
export default class AvatarGroup extends PureComponent {
  getAllAvatars() {
    const {
      children
    } = this.props;
    return _Array$isArray(children) ? children : [children];
  }

  getMergeAvatars(avatars) {
    const {
      maxCount
    } = this.props;
    let renderAvatars = avatars;
    const restNumber = avatars.length - maxCount;

    const normalAvatars = _sliceInstanceProperty(avatars).call(avatars, 0, maxCount);

    const restAvatars = _sliceInstanceProperty(avatars).call(avatars, maxCount);

    if (restNumber > 0) {
      const more = this.renderMoreAvatar(restNumber, restAvatars);
      normalAvatars.push(more);
      renderAvatars = normalAvatars;
    }

    return renderAvatars;
  }

  renderMoreAvatar(restNumber, restAvatars) {
    const {
      renderMore
    } = this.props;
    const moreCls = cls("".concat(prefixCls, "-item-more"));
    let moreAvatar = /*#__PURE__*/React.createElement(Avatar, {
      className: moreCls,
      key: "_+n"
    }, "+".concat(restNumber));

    if (_isFunction(renderMore)) {
      moreAvatar = /*#__PURE__*/React.createElement(Fragment, {
        key: "_+n"
      }, renderMore(restNumber, restAvatars));
    }

    return moreAvatar;
  }

  render() {
    // eslint-disable-next-line no-unused-vars
    const _a = this.props,
          {
      children,
      maxCount,
      overlapFrom,
      size,
      shape,
      renderMore
    } = _a,
          rest = __rest(_a, ["children", "maxCount", "overlapFrom", "size", "shape", "renderMore"]);

    let inner;
    const groupCls = cls({
      ["".concat(prefixCls, "-group")]: true
    });

    if (children) {
      var _context;

      const avatars = this.getAllAvatars();
      inner = _mapInstanceProperty(_context = _isNumber(maxCount) ? this.getMergeAvatars(avatars) : avatars).call(_context, (itm, index) => {
        var _context2, _context3;

        const className = cls(_get(itm.props, 'className'), {
          [_concatInstanceProperty(_context2 = "".concat(prefixCls, "-item-start-")).call(_context2, index)]: overlapFrom === 'start',
          [_concatInstanceProperty(_context3 = "".concat(prefixCls, "-item-end-")).call(_context3, index)]: overlapFrom === 'end'
        });
        return /*#__PURE__*/React.cloneElement(itm, _Object$assign(_Object$assign({}, rest), {
          className,
          size,
          shape,
          key: index
        }));
      });
    }

    return /*#__PURE__*/React.createElement("div", {
      className: groupCls
    }, inner);
  }

}
AvatarGroup.defaultProps = {
  size: 'medium',
  shape: 'circle',
  overlapFrom: 'start'
};
AvatarGroup.propTypes = {
  children: PropTypes.node,
  shape: PropTypes.oneOf(shapeSet),
  size: PropTypes.oneOf(sizeSet),
  maxCount: PropTypes.number,
  renderMore: PropTypes.func,
  overlapFrom: PropTypes.oneOf(overlapFromSet)
};