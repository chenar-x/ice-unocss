import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
export interface CheckboxInnerProps {
    indeterminate?: boolean;
    checked?: boolean;
    disabled?: boolean;
    prefixCls?: string;
    name?: string;
    isPureCardType?: boolean;
    ref?: React.MutableRefObject<CheckboxInner> | ((ref: CheckboxInner) => void);
}
declare class CheckboxInner extends PureComponent<CheckboxInnerProps> {
    static contextType: React.Context<{
        checkboxGroup?: {
            onChange: (evt: import("@douyinfe/semi-foundation/lib/es/checkbox/checkboxFoundation").BasicCheckboxEvent) => void;
            value: any[];
            disabled: boolean;
            name: any;
            isCardType: boolean;
            isPureCardType: boolean;
        };
    }>;
    static propTypes: {
        checked: PropTypes.Requireable<boolean>;
        disabled: PropTypes.Requireable<boolean>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        grouped: PropTypes.Requireable<boolean>;
        value: PropTypes.Requireable<any>;
        isPureCardType: PropTypes.Requireable<boolean>;
    };
    static defaultProps: {
        onChange: (...args: any[]) => void;
    };
    inputEntity: HTMLInputElement;
    blur(): void;
    focus(): void;
    render(): JSX.Element;
}
export default CheckboxInner;
