import _noop from "lodash/noop";
import _isBoolean from "lodash/isBoolean";
import _isUndefined from "lodash/isUndefined";
import _Object$assign from "@babel/runtime-corejs3/core-js-stable/object/assign";
import _includesInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/includes";

/* eslint-disable max-len */
import React from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import { checkboxClasses as css } from '@douyinfe/semi-foundation/lib/es/checkbox/constants';
import CheckboxFoundation from '@douyinfe/semi-foundation/lib/es/checkbox/checkboxFoundation';
import CheckboxInner from './checkboxInner';
import BaseComponent from '../_base/baseComponent';
import '@douyinfe/semi-foundation/lib/es/checkbox/checkbox.css';
import { Context } from './context';

class Checkbox extends BaseComponent {
  constructor(props) {
    super(props);

    this.handleChange = e => this.foundation.handleChange(e);

    const checked = false;
    this.state = {
      checked: props.checked || props.defaultChecked || checked
    };
    this.checkboxEntity = null;
    this.foundation = new CheckboxFoundation(this.adapter);
  }

  get adapter() {
    return _Object$assign(_Object$assign({}, super.adapter), {
      setNativeControlChecked: checked => {
        this.setState({
          checked
        });
      },
      notifyChange: cbContent => {
        const {
          onChange
        } = this.props;
        onChange && onChange(cbContent);
      },
      getIsInGroup: () => this.isInGroup(),
      getGroupValue: () => this.context && this.context.checkboxGroup.value || [],
      notifyGroupChange: cbContent => {
        this.context.checkboxGroup.onChange(cbContent);
      },
      getGroupDisabled: () => this.context && this.context.checkboxGroup.disabled
    });
  }

  componentDidUpdate(prevProps) {
    if (this.props.checked !== prevProps.checked) {
      if (_isUndefined(this.props.checked)) {
        this.foundation.setChecked(false);
      } else if (_isBoolean(this.props.checked)) {
        this.foundation.setChecked(this.props.checked);
      }
    }
  }

  isInGroup() {
    return this.context && this.context.checkboxGroup;
  }

  focus() {
    this.checkboxEntity && this.checkboxEntity.focus();
  }

  blur() {
    this.checkboxEntity && this.checkboxEntity.blur();
  }

  render() {
    const {
      disabled,
      style,
      prefixCls,
      className,
      indeterminate,
      children,
      onMouseEnter,
      onMouseLeave,
      extra,
      value,
      id
    } = this.props;
    const {
      checked
    } = this.state;
    const props = {
      checked,
      disabled
    };

    if (this.isInGroup()) {
      if (this.context.checkboxGroup.value) {
        var _context;

        const realChecked = _includesInstanceProperty(_context = this.context.checkboxGroup.value || []).call(_context, value);

        props.checked = realChecked;
      }

      if (this.context.checkboxGroup.disabled) {
        props.disabled = this.context.checkboxGroup.disabled || this.props.disabled;
      }

      const {
        isCardType,
        isPureCardType
      } = this.context.checkboxGroup;
      props.isCardType = isCardType;
      props.isPureCardType = isPureCardType;
    }

    const prefix = prefixCls || css.PREFIX;
    const wrapper = classnames(prefix, {
      ["".concat(prefix, "-disabled")]: props.disabled,
      ["".concat(prefix, "-indeterminate")]: indeterminate,
      ["".concat(prefix, "-checked")]: props.checked,
      ["".concat(prefix, "-unChecked")]: !props.checked,
      ["".concat(prefix, "-cardType")]: props.isCardType,
      ["".concat(prefix, "-cardType_disabled")]: props.disabled && props.isCardType,
      ["".concat(prefix, "-cardType_unDisabled")]: !(props.disabled && props.isCardType),
      ["".concat(prefix, "-cardType_checked")]: props.isCardType && props.checked && !props.disabled,
      ["".concat(prefix, "-cardType_checked_disabled")]: props.isCardType && props.checked && props.disabled,
      [className]: Boolean(className)
    });
    const extraCls = classnames("".concat(prefix, "-extra"), {
      ["".concat(prefix, "-cardType_extra_noChildren")]: props.isCardType && !children
    });
    const name = this.isInGroup() && this.context.checkboxGroup.name;

    const renderContent = () => /*#__PURE__*/React.createElement(React.Fragment, null, children ? /*#__PURE__*/React.createElement("span", {
      className: "".concat(prefix, "-addon")
    }, children) : null, extra ? /*#__PURE__*/React.createElement("div", {
      className: extraCls
    }, extra) : null);

    return /*#__PURE__*/React.createElement("span", {
      style: style,
      className: wrapper,
      id: id,
      onMouseEnter: onMouseEnter,
      onMouseLeave: onMouseLeave,
      onClick: this.handleChange
    }, /*#__PURE__*/React.createElement(CheckboxInner, _Object$assign({}, this.props, props, {
      name: name,
      isPureCardType: props.isPureCardType,
      ref: ref => {
        this.checkboxEntity = ref;
      }
    })), props.isCardType ? /*#__PURE__*/React.createElement("div", null, renderContent()) : renderContent());
  }

}

Checkbox.contextType = Context;
Checkbox.propTypes = {
  // Specifies whether it is currently selected
  checked: PropTypes.bool,
  // Initial check
  defaultChecked: PropTypes.bool,
  // Failure state
  disabled: PropTypes.bool,
  // Set indeterminate state, only responsible for style control
  indeterminate: PropTypes.bool,
  // Callback function when changing
  onChange: PropTypes.func,
  value: PropTypes.any,
  style: PropTypes.object,
  className: PropTypes.string,
  prefixCls: PropTypes.string,
  onMouseEnter: PropTypes.func,
  onMouseLeave: PropTypes.func,
  extra: PropTypes.node
};
Checkbox.defaultProps = {
  defaultChecked: false,
  indeterminate: false,
  onChange: _noop,
  onMouseEnter: _noop,
  onMouseLeave: _noop
};
export default Checkbox;