import _noop from "lodash/noop";

/* eslint-disable no-nested-ternary */
import React, { PureComponent } from 'react';
import classnames from 'classnames';
import PropTypes from 'prop-types';
import { checkboxClasses as css } from '@douyinfe/semi-foundation/lib/es/checkbox/constants';
import { Context } from './context';
import { IconCheckboxTick, IconCheckboxIndeterminate } from '@douyinfe/semi-icons';

class CheckboxInner extends PureComponent {
  blur() {
    this.inputEntity.blur();
  }

  focus() {
    this.inputEntity.focus();
  }

  render() {
    const {
      indeterminate,
      checked,
      disabled,
      prefixCls,
      name,
      isPureCardType
    } = this.props;
    const prefix = prefixCls || css.PREFIX;
    const wrapper = classnames({
      ["".concat(prefix, "-inner")]: true,
      ["".concat(prefix, "-inner-checked")]: Boolean(checked),
      ["".concat(prefix, "-inner-pureCardType")]: isPureCardType
    }, css.WRAPPER);
    const inner = classnames({
      ["".concat(prefix, "-inner-display")]: true
    });
    const icon = checked ? /*#__PURE__*/React.createElement(IconCheckboxTick, null) : indeterminate ? /*#__PURE__*/React.createElement(IconCheckboxIndeterminate, null) : null;
    return /*#__PURE__*/React.createElement("span", {
      className: wrapper
    }, /*#__PURE__*/React.createElement("input", {
      ref: ref => {
        this.inputEntity = ref;
      },
      type: "checkbox",
      className: css.INPUT,
      onChange: _noop,
      checked: checked,
      disabled: disabled,
      name: name
    }), /*#__PURE__*/React.createElement("span", {
      className: inner
    }, icon));
  }

}

CheckboxInner.contextType = Context;
CheckboxInner.propTypes = {
  checked: PropTypes.bool,
  disabled: PropTypes.bool,
  onChange: PropTypes.func,
  children: PropTypes.node,
  grouped: PropTypes.bool,
  value: PropTypes.any,
  isPureCardType: PropTypes.bool
};
CheckboxInner.defaultProps = {
  onChange: _noop
};
export default CheckboxInner;