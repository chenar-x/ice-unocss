import _noop from "lodash/noop";
import _indexOfInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/index-of";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import _Object$assign from "@babel/runtime-corejs3/core-js-stable/object/assign";
import _setTimeout from "@babel/runtime-corejs3/core-js-stable/set-timeout";
import _bindInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/bind";

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && _indexOfInstanceProperty(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof _Object$getOwnPropertySymbols === "function") for (var i = 0, p = _Object$getOwnPropertySymbols(s); i < p.length; i++) {
    if (_indexOfInstanceProperty(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
/* eslint-disable eqeqeq */


import React from 'react';
import PropTypes from 'prop-types';
import cls from 'classnames';
import { cssClasses } from '@douyinfe/semi-foundation/lib/es/modal/constants';
import ConfigContext from '../configProvider/context';
import Button from '../iconButton';
import Typography from '../typography';
import BaseComponent from '../_base/baseComponent'; // eslint-disable-next-line max-len

import ModalContentFoundation from '@douyinfe/semi-foundation/lib/es/modal/modalContentFoundation';
import { IconClose } from '@douyinfe/semi-icons';
let uuid = 0;
export default class ModalContent extends BaseComponent {
  constructor(props) {
    super(props);

    this.onKeyDown = e => {
      this.foundation.handleKeyDown(e);
    }; // Record when clicking the modal box


    this.onDialogMouseDown = () => {
      this.foundation.handleDialogMouseDown();
    }; // Cancel recording when clicking the modal box at the end


    this.onMaskMouseUp = () => {
      this.foundation.handleMaskMouseUp();
    }; // onMaskClick will judge dialogMouseDown before onMaskMouseUp updates dialogMouseDown


    this.onMaskClick = e => {
      this.foundation.handleMaskClick(e);
    };

    this.close = e => {
      this.foundation.close(e);
    };

    this.getMaskElement = () => {
      const props = __rest(this.props, []);

      const {
        mask,
        maskClassName
      } = props;

      if (mask) {
        const className = cls("".concat(cssClasses.DIALOG, "-mask"), {// [`${cssClasses.DIALOG}-mask-hidden`]: !props.visible,
        });
        return /*#__PURE__*/React.createElement("div", {
          key: "mask",
          className: cls(className, maskClassName),
          style: props.maskStyle
        });
      }

      return null;
    };

    this.renderCloseBtn = () => {
      const {
        closable,
        closeIcon
      } = this.props;
      let closer;

      if (closable) {
        const iconType = closeIcon || /*#__PURE__*/React.createElement(IconClose, null);
        closer = /*#__PURE__*/React.createElement(Button, {
          className: "".concat(cssClasses.DIALOG, "-close"),
          key: "close-btn",
          onClick: this.close,
          type: "tertiary",
          icon: iconType,
          theme: "borderless",
          size: "small"
        });
      }

      return closer;
    };

    this.renderIcon = () => {
      const {
        icon
      } = this.props;
      return icon ? /*#__PURE__*/React.createElement("span", {
        className: "".concat(cssClasses.DIALOG, "-icon-wrapper")
      }, icon) : null;
    };

    this.renderHeader = () => {
      if ('header' in this.props) {
        return this.props.header;
      }

      const {
        title
      } = this.props;
      const closer = this.renderCloseBtn();
      const icon = this.renderIcon();
      return title === null || title === undefined ? null : /*#__PURE__*/React.createElement("div", {
        className: "".concat(cssClasses.DIALOG, "-header")
      }, icon, /*#__PURE__*/React.createElement(Typography.Title, {
        heading: 5,
        className: "".concat(cssClasses.DIALOG, "-title")
      }, title), closer);
    };

    this.renderBody = () => {
      const {
        bodyStyle,
        children,
        title
      } = this.props;
      const bodyCls = cls("".concat(cssClasses.DIALOG, "-body"), {
        ["".concat(cssClasses.DIALOG, "-withIcon")]: this.props.icon
      });
      const closer = this.renderCloseBtn();
      const icon = this.renderIcon();
      const hasHeader = title !== null && title !== undefined || 'header' in this.props;
      return hasHeader ? /*#__PURE__*/React.createElement("div", {
        className: bodyCls,
        style: bodyStyle
      }, children) : /*#__PURE__*/React.createElement("div", {
        className: "".concat(cssClasses.DIALOG, "-body-wrapper")
      }, icon, /*#__PURE__*/React.createElement("div", {
        className: bodyCls,
        style: bodyStyle
      }, children), closer);
    };

    this.getDialogElement = () => {
      var _context;

      const props = __rest(this.props, []);

      const style = {};
      const digCls = cls("".concat(cssClasses.DIALOG), {
        ["".concat(cssClasses.DIALOG, "-centered")]: props.centered,
        [_concatInstanceProperty(_context = "".concat(cssClasses.DIALOG, "-")).call(_context, props.size)]: props.size
      });

      if (props.width) {
        style.width = props.width;
      }

      if (props.height) {
        style.height = props.height;
      }

      if (props.isFullScreen) {
        style.width = '100%';
        style.height = '100%';
        style.margin = 'unset';
      }

      const body = this.renderBody();
      const header = this.renderHeader();
      const footer = props.footer ? /*#__PURE__*/React.createElement("div", {
        className: "".concat(cssClasses.DIALOG, "-footer")
      }, props.footer) : null;
      const dialogElement = /*#__PURE__*/React.createElement("div", {
        key: "dialog-element",
        className: digCls,
        onMouseDown: this.onDialogMouseDown,
        style: _Object$assign(_Object$assign({}, props.style), style),
        id: this.dialogId
      }, /*#__PURE__*/React.createElement("div", {
        onAnimationEnd: props.onAnimationEnd,
        className: cls(["".concat(cssClasses.DIALOG, "-content"), props.contentClassName, {
          ["".concat(cssClasses.DIALOG, "-content-fullScreen")]: props.isFullScreen
        }])
      }, header, body, footer)); // return props.visible ? dialogElement : null;

      return dialogElement;
    };

    this.state = {
      dialogMouseDown: false
    };
    this.foundation = new ModalContentFoundation(this.adapter);
    this.dialogId = "dialog-".concat(uuid++);
  }

  get adapter() {
    return _Object$assign(_Object$assign({}, super.adapter), {
      notifyClose: e => {
        this.props.onClose(e);
      },
      notifyDialogMouseDown: () => {
        this.setState({
          dialogMouseDown: true
        });
      },
      notifyDialogMouseUp: () => {
        if (this.state.dialogMouseDown) {
          // Not setting setTimeout triggers close when modal external mouseUp
          this.timeoutId = _setTimeout(() => {
            this.setState({
              dialogMouseDown: false
            });
          }, 0);
        }
      },
      addKeyDownEventListener: () => {
        if (this.props.closeOnEsc) {
          var _context2;

          document.addEventListener('keydown', _bindInstanceProperty(_context2 = this.foundation.handleKeyDown).call(_context2, this.foundation));
        }
      },
      removeKeyDownEventListener: () => {
        if (this.props.closeOnEsc) {
          var _context3;

          document.removeEventListener('keydown', _bindInstanceProperty(_context3 = this.foundation.handleKeyDown).call(_context3, this.foundation));
        }
      },
      getMouseState: () => this.state.dialogMouseDown
    });
  }

  componentDidMount() {
    this.foundation.handleKeyDownEventListenerMount();
  }

  componentWillUnmount() {
    clearTimeout(this.timeoutId);
    this.foundation.destroy();
  }

  render() {
    const {
      maskClosable,
      className,
      getPopupContainer,
      maskFixed,
      getContainerContext
    } = this.props;
    const {
      direction
    } = this.context;
    const classList = cls(className, {
      ["".concat(cssClasses.DIALOG, "-popup")]: getPopupContainer && !maskFixed,
      ["".concat(cssClasses.DIALOG, "-fixed")]: maskFixed,
      ["".concat(cssClasses.DIALOG, "-rtl")]: direction === 'rtl'
    });
    const containerContext = getContainerContext();
    const elem = /*#__PURE__*/React.createElement("div", {
      className: classList
    }, this.getMaskElement(), /*#__PURE__*/React.createElement("div", {
      role: "modal",
      tabIndex: -1,
      className: "".concat(cssClasses.DIALOG, "-wrap"),
      onClick: maskClosable ? this.onMaskClick : null,
      onMouseUp: maskClosable ? this.onMaskMouseUp : null
    }, this.getDialogElement())); // @ts-ignore Unreachable branch
    // eslint-disable-next-line max-len

    return containerContext && containerContext.Provider ? /*#__PURE__*/React.createElement(containerContext.Provider, {
      value: containerContext.value
    }, elem) : elem;
  }

}
ModalContent.contextType = ConfigContext;
ModalContent.propTypes = {
  close: PropTypes.func,
  getContainerContext: PropTypes.func,
  contentClassName: PropTypes.string,
  maskClassName: PropTypes.string,
  onAnimationEnd: PropTypes.func
};
ModalContent.defaultProps = {
  close: _noop,
  getContainerContext: _noop,
  contentClassName: '',
  maskClassName: ''
};