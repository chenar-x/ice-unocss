import _Object$assign from "@babel/runtime-corejs3/core-js-stable/object/assign";
import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";
import _keysInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/keys";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import React from 'react';
import ReactDOM from 'react-dom';
import BaseComponent from '../_base/baseComponent';
import cls from 'classnames';
import ConfigContext from '../configProvider/context';
import { cssClasses, strings } from '@douyinfe/semi-foundation/lib/es/rating/constants';
import PropTypes from 'prop-types';
import { noop } from '@douyinfe/semi-foundation/lib/es/utils/function';
import Item from './item';
import Tooltip from '../tooltip';
import RatingFoundation from '@douyinfe/semi-foundation/lib/es/rating/foundation';
import '@douyinfe/semi-foundation/lib/es/rating/rating.css';
export default class Rating extends BaseComponent {
  constructor(props) {
    super(props);
    this.rate = null;

    this.onHover = (event, index) => {
      this.foundation.handleHover(event, index);
    };

    this.onMouseLeave = () => {
      this.foundation.handleMouseLeave();
    };

    this.onClick = (event, index) => {
      this.foundation.handleClick(event, index);
    };

    this.onFocus = e => {
      this.foundation.handleFocus(e);
    };

    this.onBlur = e => {
      this.foundation.handleBlur(e);
    };

    this.onKeyDown = event => {
      const {
        value
      } = this.state;
      this.foundation.handleKeyDown(event, value);
    };

    this.focus = () => {
      const {
        disabled
      } = this.props;

      if (!disabled) {
        this.rate.focus();
      }
    };

    this.blur = () => {
      const {
        disabled
      } = this.props;

      if (!disabled) {
        this.rate.blur();
      }
    };

    this.saveRef = index => node => {
      this.stars[index] = node;
    };

    this.saveRate = node => {
      this.rate = node;
    };

    const value = props.value === undefined ? props.defaultValue : props.value;
    this.stars = {};
    this.state = {
      value,
      focused: false,
      hoverValue: undefined,
      clearedValue: null
    };
    this.foundation = new RatingFoundation(this.adapter);
  }

  static getDerivedStateFromProps(nextProps, state) {
    if ('value' in nextProps && nextProps.value !== undefined) {
      return _Object$assign(_Object$assign({}, state), {
        value: nextProps.value
      });
    }

    return state;
  }

  get adapter() {
    return _Object$assign(_Object$assign({}, super.adapter), {
      focus: () => {
        const {
          disabled
        } = this.props;

        if (!disabled) {
          this.rate.focus();
        }
      },
      getStarDOM: index => {
        const instance = this.stars && this.stars[index]; // eslint-disable-next-line react/no-find-dom-node

        return ReactDOM.findDOMNode(instance);
      },
      notifyHoverChange: (hoverValue, clearedValue) => {
        const {
          onHoverChange
        } = this.props;
        this.setState({
          hoverValue,
          clearedValue
        });
        onHoverChange(hoverValue);
      },
      updateValue: value => {
        const {
          onChange
        } = this.props;

        if (!('value' in this.props)) {
          this.setState({
            value
          });
        }

        onChange(value);
      },
      clearValue: clearedValue => {
        this.setState({
          clearedValue
        });
      },
      notifyFocus: e => {
        const {
          onFocus
        } = this.props;
        this.setState({
          focused: true
        });
        onFocus && onFocus(e);
      },
      notifyBlur: e => {
        const {
          onBlur
        } = this.props;
        this.setState({
          focused: false
        });
        onBlur && onBlur(e);
      },
      notifyKeyDown: e => {
        const {
          onKeyDown
        } = this.props;
        this.setState({
          focused: false
        });
        onKeyDown && onKeyDown(e);
      }
    });
  }

  componentDidMount() {
    this.foundation.init();
  }

  componentWillUnmount() {
    this.foundation.destroy();
  }

  render() {
    var _context, _context2;

    const {
      count,
      allowHalf,
      style,
      prefixCls,
      disabled,
      className,
      character,
      tabIndex,
      size,
      tooltips
    } = this.props;
    const {
      value,
      hoverValue,
      focused
    } = this.state;

    const itemList = _mapInstanceProperty(_context = [..._keysInstanceProperty(_context2 = Array(count)).call(_context2)]).call(_context, ind => {
      const content = /*#__PURE__*/React.createElement(Item, {
        ref: this.saveRef(ind),
        index: ind,
        count: count,
        prefixCls: "".concat(prefixCls, "-star"),
        allowHalf: allowHalf,
        value: hoverValue === undefined ? value : hoverValue,
        onClick: this.onClick,
        onHover: this.onHover,
        key: ind,
        disabled: disabled,
        character: character,
        focused: focused,
        size: size
      });

      if (tooltips) {
        var _context3;

        const text = tooltips[ind] ? tooltips[ind] : '';
        const showTips = hoverValue - 1 === ind;
        return /*#__PURE__*/React.createElement(Tooltip, {
          visible: showTips,
          trigger: "custom",
          content: text,
          key: _concatInstanceProperty(_context3 = "".concat(ind, "-")).call(_context3, showTips)
        }, content);
      }

      return content;
    });

    const listCls = cls(prefixCls, {
      ["".concat(prefixCls, "-disabled")]: disabled
    }, className);
    return /*#__PURE__*/React.createElement("ul", {
      className: listCls,
      style: style,
      onMouseLeave: disabled ? null : this.onMouseLeave,
      tabIndex: disabled ? -1 : tabIndex,
      onFocus: disabled ? null : this.onFocus,
      onBlur: disabled ? null : this.onBlur,
      onKeyDown: disabled ? null : this.onKeyDown,
      ref: this.saveRate,
      role: "radiogroup"
    }, itemList);
  }

}
Rating.contextType = ConfigContext;
Rating.propTypes = {
  disabled: PropTypes.bool,
  value: PropTypes.number,
  defaultValue: PropTypes.number,
  count: PropTypes.number,
  allowHalf: PropTypes.bool,
  allowClear: PropTypes.bool,
  style: PropTypes.object,
  prefixCls: PropTypes.string,
  onChange: PropTypes.func,
  onHoverChange: PropTypes.func,
  className: PropTypes.string,
  character: PropTypes.node,
  tabIndex: PropTypes.number,
  onFocus: PropTypes.func,
  onBlur: PropTypes.func,
  onKeyDown: PropTypes.func,
  autoFocus: PropTypes.bool,
  size: PropTypes.oneOfType([PropTypes.oneOf(strings.SIZE_SET), PropTypes.number]),
  tooltips: PropTypes.arrayOf(PropTypes.string)
};
Rating.defaultProps = {
  defaultValue: 0,
  count: 5,
  allowHalf: false,
  allowClear: true,
  style: {},
  prefixCls: cssClasses.PREFIX,
  onChange: noop,
  onHoverChange: noop,
  tabIndex: 0,
  size: 'default'
};