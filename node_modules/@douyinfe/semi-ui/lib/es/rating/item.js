import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import _Object$assign from "@babel/runtime-corejs3/core-js-stable/object/assign";
import React, { PureComponent } from 'react';
import cls from 'classnames';
import PropTypes from 'prop-types';
import { strings } from '@douyinfe/semi-foundation/lib/es/rating/constants';
import '@douyinfe/semi-foundation/lib/es/rating/rating.css';
import { IconStar } from '@douyinfe/semi-icons';
export default class Item extends PureComponent {
  constructor() {
    super(...arguments);

    this.onHover = e => {
      const {
        onHover,
        index
      } = this.props;
      onHover(e, index);
    };

    this.onClick = e => {
      const {
        onClick,
        index
      } = this.props;
      onClick(e, index);
    };

    this.onKeyDown = e => {
      const {
        onClick,
        index
      } = this.props;

      if (e.keyCode === 13) {
        onClick(e, index);
      }
    };
  }

  render() {
    var _context;

    const {
      index,
      prefixCls,
      character,
      count,
      value,
      disabled,
      allowHalf,
      focused,
      size
    } = this.props;
    const starValue = index + 1;
    const diff = starValue - value;
    const isFocused = value === 0 && index === 0 && focused; // const isHalf = allowHalf && value + 0.5 === starValue;

    const isHalf = allowHalf && diff < 1 && diff > 0;
    const firstWidth = isHalf ? 1 - diff : 0.5;
    const isFull = starValue <= value;
    const isCustomSize = typeof size === 'number';
    const starCls = cls(prefixCls, {
      ["".concat(prefixCls, "-focused")]: isFocused,
      ["".concat(prefixCls, "-half")]: isHalf,
      ["".concat(prefixCls, "-full")]: isFull,
      [_concatInstanceProperty(_context = "".concat(prefixCls, "-")).call(_context, size)]: !isCustomSize
    });
    const sizeStyle = isCustomSize ? {
      width: size,
      height: size,
      fontSize: size
    } : {};
    const iconSize = isCustomSize ? 'inherit' : size === 'small' ? 'default' : 'extra-large';
    const content = character ? character : /*#__PURE__*/React.createElement(IconStar, {
      size: iconSize
    });
    return /*#__PURE__*/React.createElement("li", {
      className: starCls,
      style: _Object$assign({}, sizeStyle)
    }, /*#__PURE__*/React.createElement("div", {
      onClick: disabled ? null : this.onClick,
      onKeyDown: disabled ? null : this.onKeyDown,
      onMouseMove: disabled ? null : this.onHover,
      role: "radio",
      "aria-checked": value > index ? 'true' : 'false',
      "aria-posinset": index + 1,
      "aria-setsize": count,
      tabIndex: 0,
      className: "".concat(prefixCls, "-wrapper")
    }, /*#__PURE__*/React.createElement("div", {
      className: "".concat(prefixCls, "-first"),
      style: {
        width: "".concat(firstWidth * 100, "%")
      }
    }, content), /*#__PURE__*/React.createElement("div", {
      className: "".concat(prefixCls, "-second")
    }, content)));
  }

}
Item.propTypes = {
  value: PropTypes.number,
  index: PropTypes.number,
  prefixCls: PropTypes.string,
  allowHalf: PropTypes.bool,
  onHover: PropTypes.func,
  onClick: PropTypes.func,
  character: PropTypes.node,
  focused: PropTypes.bool,
  disabled: PropTypes.bool,
  count: PropTypes.number,
  size: PropTypes.oneOfType([PropTypes.oneOf(strings.SIZE_SET), PropTypes.number])
};