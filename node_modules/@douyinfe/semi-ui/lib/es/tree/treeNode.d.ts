import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import { TreeNodeProps, TreeNodeState } from './interface';
export default class TreeNode extends PureComponent<TreeNodeProps, TreeNodeState> {
    static contextType: React.Context<import("./treeContext").TreeContextValue>;
    static propTypes: {
        expanded: PropTypes.Requireable<boolean>;
        selected: PropTypes.Requireable<boolean>;
        checked: PropTypes.Requireable<boolean>;
        halfChecked: PropTypes.Requireable<boolean>;
        active: PropTypes.Requireable<boolean>;
        disabled: PropTypes.Requireable<boolean>;
        loaded: PropTypes.Requireable<boolean>;
        loading: PropTypes.Requireable<boolean>;
        isLeaf: PropTypes.Requireable<boolean>;
        pos: PropTypes.Requireable<string>;
        children: PropTypes.Requireable<object>;
        icon: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        directory: PropTypes.Requireable<boolean>;
        keyword: PropTypes.Requireable<string>;
        treeNodeFilterProp: PropTypes.Requireable<string>;
        selectedKey: PropTypes.Requireable<string>;
        motionKey: PropTypes.Requireable<string | string[]>;
    };
    static defaultProps: {
        selectedKey: string;
        motionKey: string;
    };
    debounceSelect: any;
    refNode: HTMLElement;
    constructor(props: TreeNodeProps);
    onSelect: (e: React.MouseEvent) => void;
    onExpand: (e: React.MouseEvent) => void;
    onCheck: (e: React.MouseEvent) => void;
    onContextMenu: (e: React.MouseEvent) => void;
    onClick: (e: React.MouseEvent) => void;
    onDoubleClick: (e: React.MouseEvent) => void;
    onDragStart: (e: React.DragEvent) => void;
    onDragEnter: (e: React.DragEvent) => void;
    onDragOver: (e: React.DragEvent) => void;
    onDragLeave: (e: React.DragEvent) => void;
    onDragEnd: (e: React.DragEvent) => void;
    onDrop: (e: React.DragEvent) => void;
    getNodeChildren: () => import("./interface").TreeNodeData[] & React.ReactNode;
    isLeaf: () => boolean;
    isDisabled: () => boolean;
    renderArrow(): JSX.Element;
    renderCheckbox(): JSX.Element;
    renderIcon(): any;
    renderEmptyNode(): JSX.Element;
    renderRealLabel: () => any;
    setRef: (node: HTMLElement) => void;
    render(): any;
}
