import _isFunction from "lodash/isFunction";
import _indexOfInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/index-of";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import _Object$assign from "@babel/runtime-corejs3/core-js-stable/object/assign";

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && _indexOfInstanceProperty(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof _Object$getOwnPropertySymbols === "function") for (var i = 0, p = _Object$getOwnPropertySymbols(s); i < p.length; i++) {
    if (_indexOfInstanceProperty(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

import React from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import { stepsClasses as css } from '@douyinfe/semi-foundation/lib/es/steps/constants';
import { IconChevronRight } from '@douyinfe/semi-icons';

const NavStep = props => {
  const {
    prefixCls,
    className,
    title,
    style,
    active,
    index,
    total,
    onClick,
    onChange
  } = props,
        restProps = __rest(props, ["prefixCls", "className", "title", "style", "active", "index", "total", "onClick", "onChange"]);

  const classString = classnames(prefixCls, className, {
    ["".concat(prefixCls, "-active")]: active
  });

  const handleClick = e => {
    if (_isFunction(onClick)) {
      onClick(e);
    }

    onChange();
  };

  return /*#__PURE__*/React.createElement("div", _Object$assign({}, restProps, {
    className: classString,
    style: style,
    onClick: e => handleClick(e)
  }), /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefixCls, "-container")
  }, /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefixCls, "-content")
  }, /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefixCls, "-title")
  }, title)), index !== total - 1 && /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefixCls, "-icon")
  }, /*#__PURE__*/React.createElement(IconChevronRight, {
    size: "small"
  }))));
};

NavStep.propTypes = {
  prefixCls: PropTypes.string,
  title: PropTypes.node,
  className: PropTypes.string,
  style: PropTypes.object,
  onClick: PropTypes.func,
  active: PropTypes.bool
};
NavStep.defaultProps = {
  prefixCls: css.ITEM,
  active: false,
  className: ''
};
export default NavStep;