import _isString from "lodash/isString";
import _isNumber from "lodash/isNumber";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import React, { PureComponent } from 'react';
import cls from 'classnames';
import PropTypes from 'prop-types';
import ConfigContext from '../configProvider/context';
import { cssClasses, strings } from '@douyinfe/semi-foundation/lib/es/badge/constants';
import '@douyinfe/semi-foundation/lib/es/badge/badge.css';
const prefixCls = cssClasses.PREFIX;
export default class Badge extends PureComponent {
  render() {
    var _context, _context2, _context3;

    const {
      direction
    } = this.context; // DefaultPosition here, static can't get this

    const defaultPosition = direction === 'rtl' ? 'leftTop' : 'rightTop'; // eslint-disable-next-line max-len

    const {
      count,
      dot,
      type,
      theme,
      position = defaultPosition,
      overflowCount,
      style,
      children,
      className
    } = this.props;
    const custom = count && !(_isNumber(count) || _isString(count));
    const showBadge = count !== null && typeof count !== 'undefined';
    const wrapper = cls(className, {
      [_concatInstanceProperty(_context = "".concat(prefixCls, "-")).call(_context, type)]: !custom,
      [_concatInstanceProperty(_context2 = "".concat(prefixCls, "-")).call(_context2, theme)]: !custom,
      [_concatInstanceProperty(_context3 = "".concat(prefixCls, "-")).call(_context3, position)]: Boolean(position) && Boolean(children),
      ["".concat(prefixCls, "-block")]: !children,
      ["".concat(prefixCls, "-dot")]: dot,
      ["".concat(prefixCls, "-count")]: !dot && !custom && showBadge,
      ["".concat(prefixCls, "-custom")]: custom
    });
    let content;

    if (_isNumber(count)) {
      content = overflowCount && overflowCount < count ? "".concat(overflowCount, "+") : "".concat(count);
    } else {
      content = count;
    }

    return /*#__PURE__*/React.createElement("span", {
      className: prefixCls
    }, children, /*#__PURE__*/React.createElement("span", {
      className: wrapper,
      style: style
    }, dot ? null : content));
  }

}
Badge.contextType = ConfigContext;
Badge.propTypes = {
  count: PropTypes.node,
  dot: PropTypes.bool,
  type: PropTypes.oneOf(strings.TYPE_SET),
  theme: PropTypes.oneOf(strings.THEME_SET),
  position: PropTypes.oneOf(strings.POS_SET),
  overflowCount: PropTypes.number,
  style: PropTypes.object,
  className: PropTypes.string,
  children: PropTypes.node
};
Badge.defaultProps = {
  dot: false,
  type: 'primary',
  theme: 'solid',
  className: ''
};