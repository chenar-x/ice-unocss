import _noop from "lodash/noop";
import _Object$assign from "@babel/runtime-corejs3/core-js-stable/object/assign";

/* eslint-disable max-len */
import React from 'react';
import cls from 'classnames';
import PropTypes from 'prop-types';
import SwitchFoudation from '@douyinfe/semi-foundation/lib/es/switch/foundation';
import { cssClasses, strings } from '@douyinfe/semi-foundation/lib/es/switch/constants';
import BaseComponent from '../_base/baseComponent';
import '@douyinfe/semi-foundation/lib/es/switch/switch.css';
import Spin from '../spin';

class Switch extends BaseComponent {
  constructor(props) {
    super(props);
    this.state = {
      nativeControlChecked: false,
      nativeControlDisabled: false
    };
    this.switchRef = /*#__PURE__*/React.createRef();
    this.foundation = new SwitchFoudation(this.adapter);
  }

  componentDidMount() {
    this.foundation.init();
  }

  componentDidUpdate(prevProps) {
    if (this.props.checked !== prevProps.checked) {
      this.foundation.setChecked(this.props.checked);
    }

    if (this.props.disabled !== prevProps.disabled) {
      this.foundation.setDisabled(this.props.disabled);
    }
  }

  componentWillUnmount() {
    this.foundation.destroy();
  }

  get adapter() {
    return _Object$assign(_Object$assign({}, super.adapter), {
      setNativeControlChecked: nativeControlChecked => {
        this.setState({
          nativeControlChecked
        });
      },
      setNativeControlDisabled: nativeControlDisabled => {
        this.setState({
          nativeControlDisabled
        });
      },
      notifyChange: (checked, e) => {
        this.props.onChange(checked, e);
      }
    });
  }

  render() {
    const {
      nativeControlChecked,
      nativeControlDisabled
    } = this.state;
    const {
      className,
      style,
      onMouseEnter,
      onMouseLeave,
      size,
      checkedText,
      uncheckedText,
      loading
    } = this.props;
    const wrapperCls = cls(className, {
      [cssClasses.PREFIX]: true,
      [cssClasses.CHECKED]: nativeControlChecked,
      [cssClasses.DISABLED]: nativeControlDisabled,
      [cssClasses.LARGE]: size === 'large',
      [cssClasses.SMALL]: size === 'small',
      [cssClasses.LOADING]: loading
    });
    const switchProps = {
      type: 'checkbox',
      role: 'switch',
      className: cssClasses.NATIVE_CONTROL,
      disabled: nativeControlDisabled || loading,
      checked: nativeControlChecked || false
    };
    const showCheckedText = checkedText && nativeControlChecked && size !== 'small';
    const showUncheckedText = uncheckedText && !nativeControlChecked && size !== 'small';
    return /*#__PURE__*/React.createElement("div", {
      className: wrapperCls,
      style: style,
      onMouseEnter: onMouseEnter,
      onMouseLeave: onMouseLeave
    }, loading ? /*#__PURE__*/React.createElement(Spin, {
      wrapperClassName: cssClasses.LOADING_SPIN,
      size: size === 'default' ? 'middle' : size
    }) : /*#__PURE__*/React.createElement("div", {
      className: cssClasses.KNOB
    }), showCheckedText ? /*#__PURE__*/React.createElement("div", {
      className: cssClasses.CHECKED_TEXT
    }, checkedText) : null, showUncheckedText ? /*#__PURE__*/React.createElement("div", {
      className: cssClasses.UNCHECKED_TEXT
    }, uncheckedText) : null, /*#__PURE__*/React.createElement("input", _Object$assign({}, switchProps, {
      ref: this.switchRef,
      onChange: e => this.foundation.handleChange(e.target.checked, e)
    })));
  }

}

Switch.propTypes = {
  className: PropTypes.string,
  checked: PropTypes.bool,
  checkedText: PropTypes.node,
  defaultChecked: PropTypes.bool,
  disabled: PropTypes.bool,
  loading: PropTypes.bool,
  onChange: PropTypes.func,
  onMouseEnter: PropTypes.func,
  onMouseLeave: PropTypes.func,
  style: PropTypes.object,
  size: PropTypes.oneOf(strings.SIZE_MAP),
  uncheckedText: PropTypes.node
};
Switch.defaultProps = {
  disabled: false,
  className: '',
  onChange: _noop,
  loading: false,
  onMouseEnter: _noop,
  onMouseLeave: _noop,
  size: 'default'
};
export default Switch;