"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _assign = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/assign"));

var _includes = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/includes"));

var _noop2 = _interopRequireDefault(require("lodash/noop"));

var _isBoolean2 = _interopRequireDefault(require("lodash/isBoolean"));

var _isUndefined2 = _interopRequireDefault(require("lodash/isUndefined"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _constants = require("@douyinfe/semi-foundation/lib/cjs/checkbox/constants");

var _checkboxFoundation = _interopRequireDefault(require("@douyinfe/semi-foundation/lib/cjs/checkbox/checkboxFoundation"));

var _checkboxInner = _interopRequireDefault(require("./checkboxInner"));

var _baseComponent = _interopRequireDefault(require("../_base/baseComponent"));

require("@douyinfe/semi-foundation/lib/cjs/checkbox/checkbox.css");

var _context2 = require("./context");

/* eslint-disable max-len */
class Checkbox extends _baseComponent.default {
  constructor(props) {
    super(props);

    this.handleChange = e => this.foundation.handleChange(e);

    const checked = false;
    this.state = {
      checked: props.checked || props.defaultChecked || checked
    };
    this.checkboxEntity = null;
    this.foundation = new _checkboxFoundation.default(this.adapter);
  }

  get adapter() {
    return (0, _assign.default)((0, _assign.default)({}, super.adapter), {
      setNativeControlChecked: checked => {
        this.setState({
          checked
        });
      },
      notifyChange: cbContent => {
        const {
          onChange
        } = this.props;
        onChange && onChange(cbContent);
      },
      getIsInGroup: () => this.isInGroup(),
      getGroupValue: () => this.context && this.context.checkboxGroup.value || [],
      notifyGroupChange: cbContent => {
        this.context.checkboxGroup.onChange(cbContent);
      },
      getGroupDisabled: () => this.context && this.context.checkboxGroup.disabled
    });
  }

  componentDidUpdate(prevProps) {
    if (this.props.checked !== prevProps.checked) {
      if ((0, _isUndefined2.default)(this.props.checked)) {
        this.foundation.setChecked(false);
      } else if ((0, _isBoolean2.default)(this.props.checked)) {
        this.foundation.setChecked(this.props.checked);
      }
    }
  }

  isInGroup() {
    return this.context && this.context.checkboxGroup;
  }

  focus() {
    this.checkboxEntity && this.checkboxEntity.focus();
  }

  blur() {
    this.checkboxEntity && this.checkboxEntity.blur();
  }

  render() {
    const {
      disabled,
      style,
      prefixCls,
      className,
      indeterminate,
      children,
      onMouseEnter,
      onMouseLeave,
      extra,
      value,
      id
    } = this.props;
    const {
      checked
    } = this.state;
    const props = {
      checked,
      disabled
    };

    if (this.isInGroup()) {
      if (this.context.checkboxGroup.value) {
        var _context;

        const realChecked = (0, _includes.default)(_context = this.context.checkboxGroup.value || []).call(_context, value);
        props.checked = realChecked;
      }

      if (this.context.checkboxGroup.disabled) {
        props.disabled = this.context.checkboxGroup.disabled || this.props.disabled;
      }

      const {
        isCardType,
        isPureCardType
      } = this.context.checkboxGroup;
      props.isCardType = isCardType;
      props.isPureCardType = isPureCardType;
    }

    const prefix = prefixCls || _constants.checkboxClasses.PREFIX;
    const wrapper = (0, _classnames.default)(prefix, {
      ["".concat(prefix, "-disabled")]: props.disabled,
      ["".concat(prefix, "-indeterminate")]: indeterminate,
      ["".concat(prefix, "-checked")]: props.checked,
      ["".concat(prefix, "-unChecked")]: !props.checked,
      ["".concat(prefix, "-cardType")]: props.isCardType,
      ["".concat(prefix, "-cardType_disabled")]: props.disabled && props.isCardType,
      ["".concat(prefix, "-cardType_unDisabled")]: !(props.disabled && props.isCardType),
      ["".concat(prefix, "-cardType_checked")]: props.isCardType && props.checked && !props.disabled,
      ["".concat(prefix, "-cardType_checked_disabled")]: props.isCardType && props.checked && props.disabled,
      [className]: Boolean(className)
    });
    const extraCls = (0, _classnames.default)("".concat(prefix, "-extra"), {
      ["".concat(prefix, "-cardType_extra_noChildren")]: props.isCardType && !children
    });
    const name = this.isInGroup() && this.context.checkboxGroup.name;

    const renderContent = () => /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, children ? /*#__PURE__*/_react.default.createElement("span", {
      className: "".concat(prefix, "-addon")
    }, children) : null, extra ? /*#__PURE__*/_react.default.createElement("div", {
      className: extraCls
    }, extra) : null);

    return /*#__PURE__*/_react.default.createElement("span", {
      style: style,
      className: wrapper,
      id: id,
      onMouseEnter: onMouseEnter,
      onMouseLeave: onMouseLeave,
      onClick: this.handleChange
    }, /*#__PURE__*/_react.default.createElement(_checkboxInner.default, (0, _assign.default)({}, this.props, props, {
      name: name,
      isPureCardType: props.isPureCardType,
      ref: ref => {
        this.checkboxEntity = ref;
      }
    })), props.isCardType ? /*#__PURE__*/_react.default.createElement("div", null, renderContent()) : renderContent());
  }

}

Checkbox.contextType = _context2.Context;
Checkbox.propTypes = {
  // Specifies whether it is currently selected
  checked: _propTypes.default.bool,
  // Initial check
  defaultChecked: _propTypes.default.bool,
  // Failure state
  disabled: _propTypes.default.bool,
  // Set indeterminate state, only responsible for style control
  indeterminate: _propTypes.default.bool,
  // Callback function when changing
  onChange: _propTypes.default.func,
  value: _propTypes.default.any,
  style: _propTypes.default.object,
  className: _propTypes.default.string,
  prefixCls: _propTypes.default.string,
  onMouseEnter: _propTypes.default.func,
  onMouseLeave: _propTypes.default.func,
  extra: _propTypes.default.node
};
Checkbox.defaultProps = {
  defaultChecked: false,
  indeterminate: false,
  onChange: _noop2.default,
  onMouseEnter: _noop2.default,
  onMouseLeave: _noop2.default
};
var _default = Checkbox;
exports.default = _default;