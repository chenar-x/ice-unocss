import React from 'react';
import PropTypes from 'prop-types';
import { CheckboxAdapter, BasicCheckboxEvent, BasicTargetObject, BaseCheckboxProps } from '@douyinfe/semi-foundation/lib/cjs/checkbox/checkboxFoundation';
import CheckboxInner from './checkboxInner';
import BaseComponent from '../_base/baseComponent';
import '@douyinfe/semi-foundation/lib/cjs/checkbox/checkbox.css';
export declare type CheckboxEvent = BasicCheckboxEvent;
export declare type TargetObject = BasicTargetObject;
export interface CheckboxProps extends BaseCheckboxProps {
    onChange?: (e: CheckboxEvent) => any;
    style?: React.CSSProperties;
    onMouseEnter?: React.MouseEventHandler<HTMLSpanElement>;
    onMouseLeave?: React.MouseEventHandler<HTMLSpanElement>;
    extra?: React.ReactNode;
}
interface CheckboxState {
    checked: boolean;
}
declare class Checkbox extends BaseComponent<CheckboxProps, CheckboxState> {
    static contextType: React.Context<{
        checkboxGroup?: {
            onChange: (evt: BasicCheckboxEvent) => void;
            value: any[];
            disabled: boolean;
            name: any;
            isCardType: boolean;
            isPureCardType: boolean;
        };
    }>;
    static propTypes: {
        checked: PropTypes.Requireable<boolean>;
        defaultChecked: PropTypes.Requireable<boolean>;
        disabled: PropTypes.Requireable<boolean>;
        indeterminate: PropTypes.Requireable<boolean>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
        value: PropTypes.Requireable<any>;
        style: PropTypes.Requireable<object>;
        className: PropTypes.Requireable<string>;
        prefixCls: PropTypes.Requireable<string>;
        onMouseEnter: PropTypes.Requireable<(...args: any[]) => any>;
        onMouseLeave: PropTypes.Requireable<(...args: any[]) => any>;
        extra: PropTypes.Requireable<PropTypes.ReactNodeLike>;
    };
    static defaultProps: {
        defaultChecked: boolean;
        indeterminate: boolean;
        onChange: (...args: any[]) => void;
        onMouseEnter: (...args: any[]) => void;
        onMouseLeave: (...args: any[]) => void;
    };
    checkboxEntity: CheckboxInner;
    get adapter(): CheckboxAdapter<CheckboxProps, CheckboxState>;
    constructor(props: CheckboxProps);
    componentDidUpdate(prevProps: CheckboxProps): void;
    isInGroup(): any;
    focus(): void;
    blur(): void;
    handleChange: React.MouseEventHandler<HTMLSpanElement>;
    render(): JSX.Element;
}
export default Checkbox;
