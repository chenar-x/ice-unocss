import React from 'react';
import PropTypes from 'prop-types';
import { RadioChangeEvent, RadioInnerAdapter } from '@douyinfe/semi-foundation/lib/cjs/radio/radioInnerFoundation';
import BaseComponent, { BaseProps } from '../_base/baseComponent';
export declare type RadioInnerMode = 'advanced' | '';
export interface RadioInnerProps extends BaseProps {
    checked?: boolean;
    disabled?: boolean;
    isButtonRadio?: boolean;
    onChange?: (e: RadioChangeEvent) => void;
    mode?: RadioInnerMode;
    autoFocus?: boolean;
    name?: string;
    prefixCls?: string;
    ref?: React.MutableRefObject<RadioInner> | ((instance: RadioInner) => void);
    isPureCardRadioGroup?: boolean;
}
interface RadioInnerState {
    checked?: boolean;
}
declare class RadioInner extends BaseComponent<RadioInnerProps, RadioInnerState> {
    static contextType: React.Context<import("./context").RadioContextValue>;
    static propTypes: {
        checked: PropTypes.Requireable<boolean>;
        disabled: PropTypes.Requireable<boolean>;
        isButtonRadio: PropTypes.Requireable<boolean>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
        mode: PropTypes.Requireable<string>;
    };
    static defaultProps: {
        onChange: (...args: any[]) => void;
        isButtonRadio: boolean;
    };
    inputEntity: HTMLInputElement;
    constructor(props: RadioInnerProps);
    get adapter(): RadioInnerAdapter;
    componentDidMount(): void;
    componentDidUpdate(prevProps: RadioInnerProps): void;
    componentWillUnmount(): void;
    blur(): void;
    focus(): void;
    onChange(e: React.ChangeEvent<HTMLInputElement>): void;
    render(): JSX.Element;
}
export default RadioInner;
