import React from 'react';
import PropTypes from 'prop-types';
import BaseComponent from '../_base/baseComponent';
import { ModalContentAdapter, ModalContentProps, ModalContentState } from '@douyinfe/semi-foundation/lib/cjs/modal/modalContentFoundation';
export default class ModalContent extends BaseComponent<ModalContentProps, ModalContentState> {
    static contextType: React.Context<import("../configProvider/context").ContextValue>;
    static propTypes: {
        close: PropTypes.Requireable<(...args: any[]) => any>;
        getContainerContext: PropTypes.Requireable<(...args: any[]) => any>;
        contentClassName: PropTypes.Requireable<string>;
        maskClassName: PropTypes.Requireable<string>;
        onAnimationEnd: PropTypes.Requireable<(...args: any[]) => any>;
    };
    static defaultProps: {
        close: (...args: any[]) => void;
        getContainerContext: (...args: any[]) => void;
        contentClassName: string;
        maskClassName: string;
    };
    dialogId: string;
    private timeoutId;
    constructor(props: ModalContentProps);
    get adapter(): ModalContentAdapter;
    componentDidMount(): void;
    componentWillUnmount(): void;
    onKeyDown: (e: React.MouseEvent) => void;
    onDialogMouseDown: () => void;
    onMaskMouseUp: () => void;
    onMaskClick: (e: React.MouseEvent) => void;
    close: (e: React.MouseEvent) => void;
    getMaskElement: () => JSX.Element;
    renderCloseBtn: () => any;
    renderIcon: () => JSX.Element;
    renderHeader: () => any;
    renderBody: () => JSX.Element;
    getDialogElement: () => JSX.Element;
    render(): JSX.Element;
}
