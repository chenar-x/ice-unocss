"use strict";

var _WeakMap = require("@babel/runtime-corejs3/core-js-stable/weak-map");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _Object$getOwnPropertyDescriptor = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _indexOf = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/index-of"));

var _getOwnPropertySymbols = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols"));

var _isArray = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/array/is-array"));

var _slice = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/slice"));

var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/map"));

var _concat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/concat"));

var _assign = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/assign"));

var _isNumber2 = _interopRequireDefault(require("lodash/isNumber"));

var _isFunction2 = _interopRequireDefault(require("lodash/isFunction"));

var _get2 = _interopRequireDefault(require("lodash/get"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _index = _interopRequireDefault(require("./index"));

var _constants = require("@douyinfe/semi-foundation/lib/cjs/avatar/constants");

function _getRequireWildcardCache(nodeInterop) { if (typeof _WeakMap !== "function") return null; var cacheBabelInterop = new _WeakMap(); var cacheNodeInterop = new _WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = _Object$defineProperty && _Object$getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? _Object$getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { _Object$defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && (0, _indexOf.default)(e).call(e, p) < 0) t[p] = s[p];

  if (s != null && typeof _getOwnPropertySymbols.default === "function") for (var i = 0, p = (0, _getOwnPropertySymbols.default)(s); i < p.length; i++) {
    if ((0, _indexOf.default)(e).call(e, p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

const sizeSet = _constants.strings.SIZE;
const shapeSet = _constants.strings.SHAPE;
const overlapFromSet = _constants.strings.OVERLAP_FROM;
const prefixCls = _constants.cssClasses.PREFIX;

class AvatarGroup extends _react.PureComponent {
  getAllAvatars() {
    const {
      children
    } = this.props;
    return (0, _isArray.default)(children) ? children : [children];
  }

  getMergeAvatars(avatars) {
    const {
      maxCount
    } = this.props;
    let renderAvatars = avatars;
    const restNumber = avatars.length - maxCount;
    const normalAvatars = (0, _slice.default)(avatars).call(avatars, 0, maxCount);
    const restAvatars = (0, _slice.default)(avatars).call(avatars, maxCount);

    if (restNumber > 0) {
      const more = this.renderMoreAvatar(restNumber, restAvatars);
      normalAvatars.push(more);
      renderAvatars = normalAvatars;
    }

    return renderAvatars;
  }

  renderMoreAvatar(restNumber, restAvatars) {
    const {
      renderMore
    } = this.props;
    const moreCls = (0, _classnames.default)("".concat(prefixCls, "-item-more"));

    let moreAvatar = /*#__PURE__*/_react.default.createElement(_index.default, {
      className: moreCls,
      key: "_+n"
    }, "+".concat(restNumber));

    if ((0, _isFunction2.default)(renderMore)) {
      moreAvatar = /*#__PURE__*/_react.default.createElement(_react.Fragment, {
        key: "_+n"
      }, renderMore(restNumber, restAvatars));
    }

    return moreAvatar;
  }

  render() {
    // eslint-disable-next-line no-unused-vars
    const _a = this.props,
          {
      children,
      maxCount,
      overlapFrom,
      size,
      shape,
      renderMore
    } = _a,
          rest = __rest(_a, ["children", "maxCount", "overlapFrom", "size", "shape", "renderMore"]);

    let inner;
    const groupCls = (0, _classnames.default)({
      ["".concat(prefixCls, "-group")]: true
    });

    if (children) {
      var _context;

      const avatars = this.getAllAvatars();
      inner = (0, _map.default)(_context = (0, _isNumber2.default)(maxCount) ? this.getMergeAvatars(avatars) : avatars).call(_context, (itm, index) => {
        var _context2, _context3;

        const className = (0, _classnames.default)((0, _get2.default)(itm.props, 'className'), {
          [(0, _concat.default)(_context2 = "".concat(prefixCls, "-item-start-")).call(_context2, index)]: overlapFrom === 'start',
          [(0, _concat.default)(_context3 = "".concat(prefixCls, "-item-end-")).call(_context3, index)]: overlapFrom === 'end'
        });
        return /*#__PURE__*/_react.default.cloneElement(itm, (0, _assign.default)((0, _assign.default)({}, rest), {
          className,
          size,
          shape,
          key: index
        }));
      });
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: groupCls
    }, inner);
  }

}

exports.default = AvatarGroup;
AvatarGroup.defaultProps = {
  size: 'medium',
  shape: 'circle',
  overlapFrom: 'start'
};
AvatarGroup.propTypes = {
  children: _propTypes.default.node,
  shape: _propTypes.default.oneOf(shapeSet),
  size: _propTypes.default.oneOf(sizeSet),
  maxCount: _propTypes.default.number,
  renderMore: _propTypes.default.func,
  overlapFrom: _propTypes.default.oneOf(overlapFromSet)
};