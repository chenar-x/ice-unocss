import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import { strings } from '@douyinfe/semi-foundation/lib/cjs/rating/constants';
import '@douyinfe/semi-foundation/lib/cjs/rating/rating.css';
declare type ArrayElement<ArrayType extends readonly unknown[]> = ArrayType extends readonly (infer ElementType)[] ? ElementType : never;
export interface RatingItemProps {
    value: number;
    index: number;
    prefixCls: string;
    allowHalf: boolean;
    onHover: (e: React.MouseEvent, index: number) => void;
    onClick: (e: React.MouseEvent | React.KeyboardEvent, index: number) => void;
    character: React.ReactNode;
    focused: boolean;
    disabled: boolean;
    count: number;
    size: number | ArrayElement<typeof strings.SIZE_SET>;
}
export default class Item extends PureComponent<RatingItemProps> {
    static propTypes: {
        value: PropTypes.Requireable<number>;
        index: PropTypes.Requireable<number>;
        prefixCls: PropTypes.Requireable<string>;
        allowHalf: PropTypes.Requireable<boolean>;
        onHover: PropTypes.Requireable<(...args: any[]) => any>;
        onClick: PropTypes.Requireable<(...args: any[]) => any>;
        character: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        focused: PropTypes.Requireable<boolean>;
        disabled: PropTypes.Requireable<boolean>;
        count: PropTypes.Requireable<number>;
        size: PropTypes.Requireable<number | "default" | "small">;
    };
    onHover: React.MouseEventHandler;
    onClick: React.MouseEventHandler;
    onKeyDown: React.KeyboardEventHandler;
    render(): JSX.Element;
}
export {};
