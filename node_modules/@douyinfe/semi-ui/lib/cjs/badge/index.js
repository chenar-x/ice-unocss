"use strict";

var _WeakMap = require("@babel/runtime-corejs3/core-js-stable/weak-map");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _Object$getOwnPropertyDescriptor = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _concat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/concat"));

var _isString2 = _interopRequireDefault(require("lodash/isString"));

var _isNumber2 = _interopRequireDefault(require("lodash/isNumber"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _context4 = _interopRequireDefault(require("../configProvider/context"));

var _constants = require("@douyinfe/semi-foundation/lib/cjs/badge/constants");

require("@douyinfe/semi-foundation/lib/cjs/badge/badge.css");

function _getRequireWildcardCache(nodeInterop) { if (typeof _WeakMap !== "function") return null; var cacheBabelInterop = new _WeakMap(); var cacheNodeInterop = new _WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = _Object$defineProperty && _Object$getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? _Object$getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { _Object$defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const prefixCls = _constants.cssClasses.PREFIX;

class Badge extends _react.PureComponent {
  render() {
    var _context, _context2, _context3;

    const {
      direction
    } = this.context; // DefaultPosition here, static can't get this

    const defaultPosition = direction === 'rtl' ? 'leftTop' : 'rightTop'; // eslint-disable-next-line max-len

    const {
      count,
      dot,
      type,
      theme,
      position = defaultPosition,
      overflowCount,
      style,
      children,
      className
    } = this.props;
    const custom = count && !((0, _isNumber2.default)(count) || (0, _isString2.default)(count));
    const showBadge = count !== null && typeof count !== 'undefined';
    const wrapper = (0, _classnames.default)(className, {
      [(0, _concat.default)(_context = "".concat(prefixCls, "-")).call(_context, type)]: !custom,
      [(0, _concat.default)(_context2 = "".concat(prefixCls, "-")).call(_context2, theme)]: !custom,
      [(0, _concat.default)(_context3 = "".concat(prefixCls, "-")).call(_context3, position)]: Boolean(position) && Boolean(children),
      ["".concat(prefixCls, "-block")]: !children,
      ["".concat(prefixCls, "-dot")]: dot,
      ["".concat(prefixCls, "-count")]: !dot && !custom && showBadge,
      ["".concat(prefixCls, "-custom")]: custom
    });
    let content;

    if ((0, _isNumber2.default)(count)) {
      content = overflowCount && overflowCount < count ? "".concat(overflowCount, "+") : "".concat(count);
    } else {
      content = count;
    }

    return /*#__PURE__*/_react.default.createElement("span", {
      className: prefixCls
    }, children, /*#__PURE__*/_react.default.createElement("span", {
      className: wrapper,
      style: style
    }, dot ? null : content));
  }

}

exports.default = Badge;
Badge.contextType = _context4.default;
Badge.propTypes = {
  count: _propTypes.default.node,
  dot: _propTypes.default.bool,
  type: _propTypes.default.oneOf(_constants.strings.TYPE_SET),
  theme: _propTypes.default.oneOf(_constants.strings.THEME_SET),
  position: _propTypes.default.oneOf(_constants.strings.POS_SET),
  overflowCount: _propTypes.default.number,
  style: _propTypes.default.object,
  className: _propTypes.default.string,
  children: _propTypes.default.node
};
Badge.defaultProps = {
  dot: false,
  type: 'primary',
  theme: 'solid',
  className: ''
};