"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ts = require("typescript");
var os = require("os");
var worker_threads_1 = require("worker_threads");
var formatDiagnosticMessage_1 = require("./formatDiagnosticMessage");
var initMainThread = function () {
    if (worker_threads_1.isMainThread) {
        return new worker_threads_1.Worker(__filename);
    }
};
var initWorkerThread = function () {
    if (!worker_threads_1.isMainThread) {
        if (!worker_threads_1.parentPort)
            throw Error('parentPort is missing, check file runs in worker thread');
        var port_1 = worker_threads_1.parentPort.on('message', function (action) {
            switch (action.type) {
                case 'configTsCheck':
                    createTsDiagnostic(action.payload.rootDir);
                    break;
                case 'unref':
                    port_1.unref();
                    break;
                default:
                    break;
            }
        });
    }
};
var createTsDiagnostic = function (rootDir) {
    var configFile = ts.findConfigFile(rootDir, ts.sys.fileExists, 'tsconfig.json');
    if (configFile) {
        var logChunk_1 = '';
        var reportDiagnostic = function (diagnostic) {
            logChunk_1 += "" + os.EOL + (0, formatDiagnosticMessage_1.default)(diagnostic);
        };
        var reportWatchStatus = function (diagnostic, newLine, options, errorCount) {
            // https://github.com/microsoft/TypeScript/issues/32542
            switch (diagnostic.code) {
                case 6031: // Initial build
                    // return function when it is unnecessary to log message when initial build
                    return;
                case 6032: // Incremental build
                    // clear current error and use the newer errors
                    logChunk_1 = '';
                    break;
                case 6193: // 1 Error
                    break;
                case 6194: // 0 errors or 2+ errors
                    if (errorCount === 0) {
                        logChunk_1 = '';
                    }
                    break;
                default:
                    break;
            }
            console.log("" + logChunk_1 + os.EOL + diagnostic.messageText.toString());
        };
        var createProgram = ts.createEmitAndSemanticDiagnosticsBuilderProgram;
        var host = ts.createWatchCompilerHost(configFile, { noEmit: true }, ts.sys, createProgram, reportDiagnostic, reportWatchStatus);
        ts.createWatchProgram(host);
    }
};
var worker = initMainThread();
initWorkerThread();
exports.default = worker;
//# sourceMappingURL=tsChecker.js.map