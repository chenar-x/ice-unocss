"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
var child_process_1 = require("child_process");
var os = require("os");
var spawnTsChecker = function () {
    return new Promise(function (resolve) {
        var tscBin = ['tsc', ['--noEmit']];
        var proc = child_process_1.spawn.apply(void 0, __spreadArray(__spreadArray([], tscBin, false), [{
                stdio: 'inherit',
                shell: os.platform() === 'win32',
            }], false));
        proc.on('exit', function (code) {
            if (code !== null && code !== 0) {
                resolve(code);
            }
            else {
                resolve(0);
            }
        });
    });
};
var vitePluginTsChecker = function () {
    var rootDir = process.cwd();
    var viteMode;
    return {
        name: 'vite-plugin-ts-checker',
        config: function (config, env) {
            viteMode = env.command;
            rootDir = config.root;
        },
        buildStart: function () {
            // run a bin command in a separated process when build
            if (viteMode === 'build') {
                // spawn an async runner that we don't wait for in order to avoid blocking the build from continuing in parallel
                (function () { return __awaiter(void 0, void 0, void 0, function () {
                    var exitCode;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, spawnTsChecker()];
                            case 1:
                                exitCode = _a.sent();
                                if (exitCode !== 0)
                                    process.exit(exitCode);
                                return [2 /*return*/];
                        }
                    });
                }); })();
            }
        },
        configureServer: function () {
            // only work in dev mode
            // require tsChecker in case of file of will run in worker thread
            // eslint-disable-next-line global-require
            var worker = require('./tsChecker').default;
            worker.postMessage({
                type: 'configTsCheck',
                payload: { rootDir: rootDir },
            });
        }
    };
};
exports.default = vitePluginTsChecker;
//# sourceMappingURL=index.js.map