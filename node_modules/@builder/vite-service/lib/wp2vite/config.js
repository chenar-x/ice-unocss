"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.recordMap = void 0;
var path = require("path");
var lodash_1 = require("lodash");
/**
 * 设置 vite 字段的值
 */
var setViteConfig = function (acc, value, viteRow, isTransform) {
    if (isTransform === void 0) { isTransform = false; }
    if (value === undefined)
        return;
    var config = (0, lodash_1.isArray)(viteRow) ? viteRow : [viteRow];
    config.forEach(function (cfg, index) {
        (0, lodash_1.set)(acc, cfg, isTransform && (0, lodash_1.isArray)(viteRow) ? value[index] : value);
    });
};
var transformPlugin = function (pluginName) {
    return function () {
        var _a;
        var _b = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            _b[_i] = arguments[_i];
        }
        var webpackChain = _b[2];
        if (!webpackChain || !webpackChain.plugins.has(pluginName))
            return;
        var opts = (_a = webpackChain.plugin(pluginName).get('args')) !== null && _a !== void 0 ? _a : [];
        return opts[0];
    };
};
var transformMinimizer = function (minimizerName) {
    return function () {
        var _a;
        var _b = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            _b[_i] = arguments[_i];
        }
        var webpackChain = _b[2];
        // @ts-ignore
        if (!webpackChain || !webpackChain.optimization.minimizers.has(minimizerName))
            return;
        var opts = (_a = webpackChain.optimization.minimizer(minimizerName).get('args')) !== null && _a !== void 0 ? _a : [];
        return opts[0];
    };
};
var transformPreProcess = function (loaderName, rule) {
    // filter options for sassOptions and lessOptions
    var optionsMap = {
        scss: 'sassOptions',
        less: 'lessOptions',
    };
    // additionalData is special option for pre processor
    // https://github.com/vitejs/vite/blob/main/packages/vite/src/node/plugins/css.ts#L1035
    var pickOptions = ['additionalData'];
    var optionsKey = optionsMap[rule];
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var opt = args[2].module.rules.get(rule).use(loaderName).get('options');
        var preProcessOptions = (optionsKey ? opt === null || opt === void 0 ? void 0 : opt[optionsKey] : opt) || {};
        pickOptions.forEach(function (pickKey) {
            if (opt === null || opt === void 0 ? void 0 : opt[pickKey]) {
                preProcessOptions[pickKey] = opt[pickKey];
            }
        });
        return preProcessOptions;
    };
};
/**
 * 常用简单配置转换
 */
var configMap = {
    'output.path': {
        name: 'build.outDir',
        transform: function (value, ctx) { return path.relative(ctx.rootDir, value); },
    },
    'output.publicPath': 'base',
    'resolve.alias': {
        name: 'resolve.alias',
        transform: function (value, ctx) {
            var rootDir = ctx.rootDir;
            var blackList = ['webpack/hot', 'node_modules'];
            var data = Object.keys(value).reduce(function (acc, key) {
                if (!blackList.some(function (word) { var _a; return (_a = value[key]) === null || _a === void 0 ? void 0 : _a.includes(word); }))
                    acc[key] = value[key];
                return acc;
            }, {});
            // alias 到指向 ice runtime 入口
            data.ice = path.resolve(rootDir, '.ice/index.ts');
            // built-in alias for ～antd and ～@alifd/next which commonly unused in style files
            ['antd', '@alifd/next'].forEach(function (pkg) {
                data["~" + pkg] = pkg;
            });
            // Object to Array
            return Object.entries(data).map(function (_a) {
                var find = _a[0], replacement = _a[1];
                return { find: find, replacement: replacement };
            });
        },
    },
    'resolve.extensions': {
        name: 'resolve.extensions',
        transform: function (value) { return __spreadArray(['.mjs'], value, true); },
    },
    // minify
    'optimization.minimize': {
        name: 'build.minify',
        transform: function (value, _a) {
            var userConfig = _a.userConfig;
            if (value) {
                var minify = userConfig.minify;
                if (minify) {
                    var minifier = minify.type
                        || (typeof minify === 'boolean' ? 'terser' : minify);
                    if (['esbuild', 'terser'].includes(minifier)) {
                        return minifier;
                    }
                    else {
                        console.log("minify '" + minifier + "' is not supported in vite mode, specify 'terser' as minifier");
                    }
                }
            }
            else {
                return false;
            }
        },
    },
    'devtool': {
        name: 'build.sourcemap',
        transform: function (devtool) {
            // build.sourcemap of support inline | hidden
            if (devtool) {
                var sourcemap = ['inline', 'hidden'].find(function (mapType) {
                    return !!devtool.match(new RegExp(mapType));
                });
                return sourcemap || !!devtool;
            }
            return false;
        },
    },
    'devServer.watchOptions.static.watch': 'server.watch',
    'devServer.proxy': {
        name: 'server.proxy',
        transform: function (value) {
            // vite proxy do not support config of onProxyRes, onError, logLevel
            // transform devServer.proxy to server.proxy
            var proxyConfig = {};
            (value || []).forEach(function (_a) {
                var context = _a.context, enable = _a.enable, onProxyRes = _a.onProxyRes, onError = _a.onError, rest = __rest(_a, ["context", "enable", "onProxyRes", "onError"]);
                if (enable !== false) {
                    proxyConfig[context] = __assign(__assign({}, rest), { configure: function (proxy, options) {
                            if (rest.configure) {
                                rest.configure(proxy, options);
                            }
                            proxy.on('proxyRes', onProxyRes);
                            proxy.on('error', onError);
                        } });
                }
            });
            return proxyConfig;
        },
    },
    'devServer.https': 'server.https',
    'plugins.DefinePlugin': {
        name: 'define',
        transform: transformPlugin('DefinePlugin'),
    },
    'plugins.TerserPlugin': {
        name: 'build.terserOptions',
        transform: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var terserPluginOptions = transformMinimizer('TerserPlugin').apply(void 0, args);
            return terserPluginOptions === null || terserPluginOptions === void 0 ? void 0 : terserPluginOptions.terserOptions;
        },
    },
    'plugin.ESBuild': {
        name: 'build.target',
        transform: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            // build.target is performed with esbuild and the value should be a valid esbuild target option
            var esbuildMinifyOptions = transformMinimizer('ESBuild').apply(void 0, args);
            return esbuildMinifyOptions === null || esbuildMinifyOptions === void 0 ? void 0 : esbuildMinifyOptions.target;
        },
    },
    sass: {
        name: 'css.preprocessorOptions.scss',
        transform: transformPreProcess('sass-loader', 'scss'),
    },
    less: {
        name: 'css.preprocessorOptions.less',
        transform: transformPreProcess('less-loader', 'less'),
    },
    // 保证在 link 开发调试时引入的 react 是一个实例
    dedupe: {
        name: 'resolve.dedupe',
        transform: function () { return ['react', 'react-dom']; },
    },
    postcss: {
        name: 'css.postcss',
        transform: function (e, _a) {
            var _b;
            var userConfig = _a.userConfig;
            if (userConfig === null || userConfig === void 0 ? void 0 : userConfig.postcssOptions) {
                var postcssPlugins_1 = ((_b = userConfig === null || userConfig === void 0 ? void 0 : userConfig.postcssOptions) === null || _b === void 0 ? void 0 : _b.plugins) || {};
                var normalizedPlugins = Object.keys(postcssPlugins_1)
                    .filter(function (pluginKey) { return !postcssPlugins_1[pluginKey]; })
                    .map(function (pluginKey) { return [pluginKey, postcssPlugins_1[pluginKey]]; });
                return __assign(__assign({}, userConfig === null || userConfig === void 0 ? void 0 : userConfig.postcssOptions), { plugins: normalizedPlugins.length > 1 ? normalizedPlugins : [] });
            }
        }
    },
    vendor: {
        name: 'build.rollupOptions.output.manualChunks',
        transform: function (e, _a) {
            var userConfig = _a.userConfig;
            if (!userConfig.vendor) {
                return false;
            }
            // Tips: userConfig.vendor === true 时不会去设置 manualChunks，正常导出 vendor
        }
    },
    // hash & outputAssetsPath (OAP)
    hashAndOAP: {
        name: [
            'build.rollupOptions.output.entryFileNames',
            'build.rollupOptions.output.chunkFileNames',
            'build.rollupOptions.output.assetFileNames',
        ],
        transform: function (e, _a) {
            var userConfig = _a.userConfig;
            var data = userConfig.outputAssetsPath;
            var hash = userConfig.hash === true ? 'hash' : userConfig.hash;
            var hashStr = hash ? ".[" + hash + "]" : '';
            var js = data.js, css = data.css;
            var assetFileNames = function (assetInfo) {
                if (path.extname(assetInfo.name) === '.css') {
                    return css + "/[name]" + hashStr + "[extname]";
                }
                return "[name]" + hashStr + "[extname]";
            };
            return [
                js + "/[name]" + hashStr + ".js",
                js + "/[name]" + hashStr + ".js",
                assetFileNames,
            ];
        }
    },
};
/**
 * 配置转化函数
 */
var recordMap = function (chain, ctx) {
    var cfg = chain.toConfig();
    return Object.keys(configMap).reduce(function (acc, key) {
        var viteConfig = configMap[key];
        var webpackValue = (0, lodash_1.get)(cfg, key);
        // 如果后面接的是对象
        if ((0, lodash_1.isObject)(viteConfig) && !(0, lodash_1.isArray)(viteConfig)) {
            var value = viteConfig.transform(webpackValue, ctx, chain);
            setViteConfig(acc, value, viteConfig.name, true);
            return acc;
        }
        setViteConfig(acc, webpackValue, viteConfig);
        return acc;
    }, {});
};
exports.recordMap = recordMap;
//# sourceMappingURL=config.js.map