"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var es_module_lexer_1 = require("es-module-lexer");
var initd = false;
// import { About } from './About';
var IMPORT_MATCH_REG_EXP = /\{(.*?)\}/;
// import About from './About';
// import About, { Home } from './About';
var IMPORT_DEFAULT_MATCH_REG_EXP = /^import\s+([^\s{},]+)/;
// import('/modules/my-module.js')
var DYNAMIC_IMPORT_MATCH_REG_EXP = /^import\([\S\s]*['"](.*)['"]/;
var AS_ALIAS_REG_EXP = /^(\w+)\s+as\s+(\w+)/;
function redirectImport(code, options) {
    return __awaiter(this, void 0, void 0, function () {
        var source, redirectImports, imports, targetImport, importStr_1, importMatchResult, dynamicImportMatchResult, importedStr, addImports_1, identifiers, newImportStr, originModule, newImportStr, redirectImportInfo, importDefaultMatchResult, importDefaultName;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!!initd) return [3 /*break*/, 2];
                    return [4 /*yield*/, es_module_lexer_1.init];
                case 1:
                    _a.sent();
                    initd = true;
                    _a.label = 2;
                case 2:
                    source = options.source, redirectImports = options.redirectImports;
                    imports = (0, es_module_lexer_1.parse)(code)[0];
                    targetImport = imports.find(function (_a) {
                        var n = _a.n;
                        if (typeof source === 'function') {
                            return source(n);
                        }
                        return n === source;
                    });
                    if (targetImport) {
                        importStr_1 = code.substring(targetImport.ss, targetImport.se);
                        importMatchResult = IMPORT_MATCH_REG_EXP.exec(importStr_1);
                        dynamicImportMatchResult = DYNAMIC_IMPORT_MATCH_REG_EXP.exec(importStr_1);
                        if (importMatchResult) {
                            importedStr = importMatchResult[1];
                            addImports_1 = [];
                            identifiers = importedStr.split(',');
                            identifiers.forEach(function (identifier) {
                                if (AS_ALIAS_REG_EXP.test(identifier)) {
                                    console.warn('Not support `as` alias with redirect: ', importStr_1);
                                    return;
                                }
                                var targetRedirect = redirectImports.find(function (_a) {
                                    var name = _a.name;
                                    return name === identifier.trim();
                                });
                                if (targetRedirect) {
                                    // import { runApp } from 'ice/entries/home/runApp';
                                    addImports_1.push("\n" + generateImport(targetRedirect));
                                    importStr_1 = importStr_1.replace(new RegExp(identifier + ",?"), '');
                                }
                            });
                            newImportStr = '';
                            // Check should it retain original import str
                            if (addImports_1.length !== identifiers.length) {
                                newImportStr += importStr_1 + ";";
                            }
                            newImportStr += addImports_1.join(';');
                            return [2 /*return*/, "" + code.substring(0, targetImport.ss) + newImportStr + code.substring(targetImport.se)];
                        }
                        else if (dynamicImportMatchResult) {
                            originModule = dynamicImportMatchResult[1];
                            newImportStr = importStr_1.replace(originModule, redirectImports[0].redirectPath);
                            return [2 /*return*/, "" + code.substring(0, targetImport.ss) + newImportStr + code.substring(targetImport.se)];
                        }
                        else {
                            // Default condition: import runApp from 'ice';
                            if (redirectImports.length > 1) {
                                console.error('redirectImports length should be 1 with default export!');
                            }
                            redirectImportInfo = redirectImports[0];
                            if (!redirectImportInfo.name) {
                                importDefaultMatchResult = IMPORT_DEFAULT_MATCH_REG_EXP.exec(importStr_1);
                                if (importDefaultMatchResult) {
                                    importDefaultName = importDefaultMatchResult[1];
                                    redirectImportInfo = __assign(__assign({}, redirectImportInfo), { name: importDefaultName });
                                }
                            }
                            return [2 /*return*/, "" + code.substring(0, targetImport.ss) + generateImport(redirectImportInfo) + code.substring(targetImport.se)];
                        }
                    }
                    return [2 /*return*/, code];
            }
        });
    });
}
exports.default = redirectImport;
function generateImport(redirectImportInfo) {
    var name = redirectImportInfo.name, redirectPath = redirectImportInfo.redirectPath, exportDefault = redirectImportInfo.default;
    if (exportDefault) {
        return "import " + name + " from '" + redirectPath + "'";
    }
    return "import { " + name + " } from '" + redirectPath + "'";
}
//# sourceMappingURL=redirectImport.js.map