"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var fs = require("fs-extra");
var getRoutesByAppJson_1 = require("./getRoutesByAppJson");
var getEntriesByRoute_1 = require("./getEntriesByRoute");
// Get entries when exist app.json
function default_1(api, options) {
    var _a = options || {}, target = _a.target, appJsonPath = _a.appJsonPath, appJsonContent = _a.appJsonContent;
    if (appJsonPath || appJsonContent) {
        return getEntriesByJson(api, target, appJsonPath, appJsonContent);
    }
    return getEntriesByDir(api);
}
exports.default = default_1;
function getEntriesByJson(api, target, appJsonPath, appJsonContent) {
    var rootDir = api.context.rootDir;
    var routes = (0, getRoutesByAppJson_1.default)(target, { appJsonPath: appJsonPath, appJsonContent: appJsonContent });
    return routes.reduce(function (prev, curr) {
        return __spreadArray(__spreadArray([], prev, true), (0, getEntriesByRoute_1.default)(curr, rootDir), true);
    }, []);
}
function getEntriesByDir(api) {
    var rootDir = api.context.rootDir;
    var srcPath = path.join(rootDir, 'src');
    var pagesPath = path.join(srcPath, 'pages');
    var pages = fs.existsSync(pagesPath)
        ? fs
            .readdirSync(pagesPath)
            .filter(function (page) { return !/^[._]/.test(page); })
            .map(function (page) { return path.parse(page).name; })
        : [];
    var entries = pages.map(function (pageName) {
        var entryName = pageName.toLocaleLowerCase();
        var pageEntry = getPageEntryByDir(pagesPath, pageName);
        var source = "pages/" + pageName + "/" + pageEntry;
        var entryPath = path.join(srcPath, source);
        if (!pageEntry)
            return null;
        return {
            entryName: entryName,
            pageName: pageName,
            entryPath: entryPath,
            source: source,
        };
    }).filter(Boolean);
    return entries;
}
function getPageEntryByDir(pagesPath, pageName) {
    var pagePath = path.join(pagesPath, pageName);
    var pageRootFiles = fs.readdirSync(pagePath);
    var appRegexp = /^app\.(t|j)sx?$/;
    var indexRegexp = /^index\.(t|j)sx?$/;
    return pageRootFiles.find(function (file) {
        // eslint-disable-next-line
        return appRegexp.test(file)
            ? 'app'
            : indexRegexp.test(file)
                ? 'index'
                : null;
    });
}
//# sourceMappingURL=getMpaEntries.js.map