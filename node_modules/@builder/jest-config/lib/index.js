"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
var knownListShouldIngoreTransform = ['[/\\\\]node_modules[/\\\\]core-js', '[/\\\\]node_modules[/\\\\]@swc[/\\\\]helpers', '[/\\\\]node_modules[/\\\\]@babel[/\\\\]runtime'];
exports.default = (function (_a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.rootDir, rootDir = _c === void 0 ? process.cwd() : _c, _d = _b.regexForTestFiles, regexForTestFiles = _d === void 0 ? null : _d, _e = _b.moduleNameMapper, moduleNameMapper = _e === void 0 ? {} : _e, _f = _b.userJestConfig, userJestConfig = _f === void 0 ? {} : _f;
    return __assign(__assign({ rootDir: rootDir, setupFiles: [require.resolve('./shim.js')], testMatch: ['**/?*.(spec|test).(j|t)s?(x)'], transform: {
            '^.+\\.(js|jsx|ts|tsx)$': require.resolve('./babelTransform.js'),
            '^(?!.*\\.(js|jsx|ts|tsx|css|json)$)': require.resolve('./fileTransform.js'),
        }, transformIgnorePatterns: __spreadArray(__spreadArray([], knownListShouldIngoreTransform, true), [
            '^.+\\.module\\.(css|sass|scss|less)$',
        ], false), moduleNameMapper: __assign({ '\\.(css|less|sass|scss)$': require.resolve('identity-obj-proxy'), '\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$': require.resolve('./fileMock.js') }, moduleNameMapper), moduleFileExtensions: ['js', 'jsx', 'ts', 'tsx', 'json'], testPathIgnorePatterns: ['/node_modules/'] }, userJestConfig), (regexForTestFiles ? { testMatch: regexForTestFiles } : {}));
});
//# sourceMappingURL=index.js.map