"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var globby = require("globby");
var app_templates_1 = require("@builder/app-templates");
var relative_1 = require("../relative");
var BaseGenerator = /** @class */ (function () {
    function BaseGenerator(api, options) {
        this.runAppRenderData = {};
        var rootDir = api.context.rootDir, applyMethod = api.applyMethod, getValue = api.getValue, setValue = api.setValue;
        var targetDir = options.targetDir, entryName = options.entryName;
        this.rootDir = rootDir;
        this.builtInMethods = {
            applyMethod: applyMethod,
            getValue: getValue,
            setValue: setValue,
        };
        this.options = options;
        this.targetDir = targetDir;
        this.entryFolder = path.join(targetDir, 'entries', entryName);
        this.entryPath = path.join(this.entryFolder, 'index.tsx');
        this.runAppPath = path.join(this.entryFolder, 'runApp');
    }
    BaseGenerator.prototype.generateRunAppFile = function (userConfig) {
        var framework = this.options.framework;
        var applyMethod = this.builtInMethods.applyMethod;
        var globalStyles = globby.sync(['src/global.@(scss|less|css)'], { cwd: this.rootDir });
        var routesFilePath = this.getRoutesFilePath();
        var renderData = __assign(__assign({}, this.runAppRenderData), { globalStyle: globalStyles.length && (0, relative_1.default)(this.entryFolder, path.join(this.rootDir, globalStyles[0])), relativeCorePath: (0, relative_1.default)(this.entryFolder, path.join(this.targetDir, 'core')), typesPath: (0, relative_1.default)(this.entryFolder, path.join(this.targetDir, 'types')), buildConfig: __assign(__assign({}, applyMethod('getBuildConfig', userConfig)), { router: Boolean(routesFilePath) }), routesFilePath: routesFilePath && (0, relative_1.default)(this.entryFolder, routesFilePath), isMPA: true });
        applyMethod('addRenderFile', (0, app_templates_1.getTemplate)('runApp.ts', framework), this.runAppPath + ".ts", renderData);
        this.generateLoadRuntimeModules(routesFilePath);
    };
    BaseGenerator.prototype.generateEntryFile = function () {
        var _a = this.options, framework = _a.framework, pageEntry = _a.pageEntry;
        var applyMethod = this.builtInMethods.applyMethod;
        var routesFilePath = this.getRoutesFilePath();
        var renderData = {
            runAppPath: './runApp',
            typesPath: (0, relative_1.default)(this.entryFolder, path.join(this.targetDir, 'types')),
            routesFilePath: routesFilePath && (0, relative_1.default)(this.entryFolder, routesFilePath),
            resourcePath: (0, relative_1.default)(this.entryFolder, path.extname(pageEntry) ? pageEntry.split('.').slice(0, -1).join('.') : pageEntry),
        };
        applyMethod('addRenderFile', path.join(__dirname, "../template/" + framework + "/index.tsx.ejs"), this.entryPath, renderData);
    };
    BaseGenerator.prototype.generateLoadRuntimeModules = function (routesFilePath) {
        var _this = this;
        var applyMethod = this.builtInMethods.applyMethod;
        applyMethod('addRenderFile', (0, app_templates_1.getTemplate)('loadRuntimeModules.ts'), path.join(this.entryFolder, 'loadRuntimeModules.ts'), function (renderData) {
            var runtimeModules = renderData.runtimeModules;
            if (!routesFilePath) {
                runtimeModules = runtimeModules.filter(function (_a) {
                    var name = _a.name;
                    return !_this.disableRuntimeList.includes(name);
                });
            }
            return __assign(__assign({}, renderData), { runtimeModules: runtimeModules.map(function (_a) {
                    var pluginPath = _a.path, staticModule = _a.staticModule, absoluteModulePath = _a.absoluteModulePath;
                    if (!staticModule) {
                        pluginPath = (0, relative_1.default)(_this.entryFolder, absoluteModulePath);
                    }
                    return {
                        path: pluginPath,
                        staticModule: staticModule,
                    };
                }) });
        });
    };
    BaseGenerator.prototype.getRoutesFilePath = function () {
        throw new Error('Method not implemented.');
    };
    return BaseGenerator;
}());
exports.default = BaseGenerator;
//# sourceMappingURL=BaseGenerator.js.map