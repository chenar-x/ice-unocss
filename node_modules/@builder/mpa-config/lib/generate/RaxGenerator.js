"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var fs = require("fs-extra");
var BaseGenerator_1 = require("./BaseGenerator");
var relative_1 = require("../relative");
var RaxGenerator = /** @class */ (function (_super) {
    __extends(RaxGenerator, _super);
    function RaxGenerator(api, options) {
        var _this = _super.call(this, api, options) || this;
        _this.disableRuntimeList = ['build-plugin-rax-router'];
        _this.addRunAppRenderData();
        _this.injectTabBar();
        return _this;
    }
    RaxGenerator.prototype.injectTabBar = function () {
        var getValue = this.builtInMethods.getValue;
        var isAppEntry = this.options.isAppEntry;
        var routePath = this.getRoutesFilePath();
        var tabBarConfig = getValue('staticConfig').tabBar;
        if (routePath && isAppEntry) {
            // Read app.json
            var routesInfo = fs.readJSONSync(routePath);
            if (routesInfo.tabBar) {
                this.generateTabBarFile(routesInfo.tabBar);
            }
        }
        else if (tabBarConfig) {
            this.generateTabBarFile(tabBarConfig);
        }
    };
    RaxGenerator.prototype.addRunAppRenderData = function () {
        var pageConfig = this.options.pageConfig;
        this.runAppRenderData.pageConfig = pageConfig;
        var routesFilePath = this.getRoutesFilePath();
        if (routesFilePath) {
            var content = fs.readJSONSync(routesFilePath);
            if (content.tabBar) {
                this.runAppRenderData.tabBarPath = content.tabBar.custom ?
                    (0, relative_1.default)(this.entryFolder, path.join(this.rootDir, 'src/components/CustomTabBar/index'))
                    : (0, relative_1.default)(this.entryFolder, path.join(this.targetDir, 'plugins/rax-app/TabBar'));
            }
        }
    };
    RaxGenerator.prototype.generateTabBarFile = function (tabBarConfig) {
        this.runAppRenderData.tabBarPath = './TabBar';
        var _a = this.builtInMethods, getValue = _a.getValue, applyMethod = _a.applyMethod;
        var entryName = this.options.entryName;
        var renderData = {
            tabBarPath: (0, relative_1.default)(this.entryFolder, getValue('TAB_BAR_PATH')),
            entryName: entryName,
            tabBarConfig: tabBarConfig,
        };
        applyMethod('addRenderFile', path.join(__dirname, '../template/rax/TabBar.tsx.ejs'), path.join(this.entryFolder, 'TabBar.tsx'), renderData);
    };
    RaxGenerator.prototype.getRoutesFilePath = function () {
        if (this.routesFilePath !== undefined)
            return this.routesFilePath;
        var pageEntry = this.options.pageEntry;
        var originalEntryFolder = path.dirname(pageEntry);
        var appJSONPath = path.join(originalEntryFolder, 'app.json');
        return fs.existsSync(appJSONPath) ? appJSONPath : '';
    };
    return RaxGenerator;
}(BaseGenerator_1.default));
exports.default = RaxGenerator;
//# sourceMappingURL=RaxGenerator.js.map