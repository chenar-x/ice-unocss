"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var MiniCssExtractPlugin = require("@builder/pack/deps/mini-css-extract-plugin");
var babel_config_1 = require("@builder/babel-config");
var lodash_1 = require("@builder/pack/deps/lodash");
var EXCLUDE_REGX = /node_modules/;
// config css rules
var configCSSRule = function (config, style, loaders) {
    if (loaders === void 0) { loaders = []; }
    var cssModuleReg = new RegExp("\\.module\\." + style + "$");
    var styleReg = new RegExp("\\." + style + "$");
    var cssLoaderOpts = {
        sourceMap: true,
    };
    var cssModuleLoaderOpts = __assign(__assign({}, cssLoaderOpts), { modules: {
            localIdentName: '[folder]--[local]--[hash:base64:7]',
        } });
    var postcssOpts = {
        postcssOptions: __assign({ config: false }, (require('./postcss.config').default()))
    };
    // add both rule of css and css module
    ['css', 'module'].forEach(function (ruleKey) {
        var rule;
        if (ruleKey === 'module') {
            rule = config.module.rule(style + "-module")
                .test(cssModuleReg);
        }
        else {
            rule = config.module.rule(style)
                .test(styleReg)
                .exclude.add(cssModuleReg).end();
        }
        rule
            .use('MiniCssExtractPlugin.loader')
            .loader(MiniCssExtractPlugin.loader)
            // compatible with commonjs syntax: const styles = require('./index.module.less')
            .options({
            esModule: false,
        })
            .end()
            .use('css-loader')
            .loader(require.resolve('@builder/pack/deps/css-loader'))
            .options(ruleKey === 'module' ? cssModuleLoaderOpts : cssLoaderOpts)
            .end()
            .use('postcss-loader')
            .loader(require.resolve('@builder/pack/deps/postcss-loader'))
            .options(__assign(__assign({}, cssLoaderOpts), postcssOpts));
        loaders.forEach(function (loader) {
            var loaderName = loader[0], loaderPath = loader[1], _a = loader[2], loaderOpts = _a === void 0 ? {} : _a;
            rule.use(loaderName)
                .loader(loaderPath)
                .options(__assign(__assign({}, cssLoaderOpts), loaderOpts));
        });
    });
};
// config assets rules
var configAssetsRule = function (config, type, testReg, loaderOpts) {
    if (loaderOpts === void 0) { loaderOpts = {}; }
    config.module.rule(type).test(testReg)
        .set('type', 'asset')
        .set('generator', {
        dataUrl: loaderOpts,
    })
        .set('parser', {
        dataUrlCondition: {
            maxSize: 8 * 1024 // 8kb
        }
    });
};
exports.default = (function (config) {
    // css loader
    [
        ['css'],
        ['scss', [['sass-loader', require.resolve('@builder/pack/deps/sass-loader')]]],
        ['less', [['less-loader', require.resolve('@builder/pack/deps/less-loader'), { lessOptions: { javascriptEnabled: true } }]]],
    ].forEach(function (_a) {
        var style = _a[0], loaders = _a[1];
        configCSSRule(config, style, loaders || []);
    });
    [
        ['woff2', /\.woff2?$/, { mimetype: 'application/font-woff' }],
        ['ttf', /\.ttf$/, { mimetype: 'application/octet-stream' }],
        ['eot', /\.eot$/, { mimetype: 'application/vnd.ms-fontobject' }],
        ['svg', /\.svg$/, { mimetype: 'image/svg+xml' }],
        ['img', /\.(png|jpg|webp|jpeg|gif)$/i],
    ].forEach(function (_a) {
        var type = _a[0], reg = _a[1], opts = _a[2];
        configAssetsRule(config, type, reg, opts || {});
    });
    // Add babel loader
    var babelLoader = require.resolve('@builder/pack/deps/babel-loader');
    var babelConfig = (0, babel_config_1.default)();
    ['jsx', 'tsx'].forEach(function (ruleName) {
        var testRegx = new RegExp("\\." + ruleName + "?$");
        config.module.rule(ruleName)
            .test(testRegx)
            .exclude
            .add(EXCLUDE_REGX)
            .end()
            .use('babel-loader')
            .loader(babelLoader)
            .options(__assign({}, (0, lodash_1.cloneDeep)(babelConfig)));
    });
});
//# sourceMappingURL=setWebpackLoaders.js.map