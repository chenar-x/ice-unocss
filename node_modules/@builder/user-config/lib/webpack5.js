var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var path = require('path');
// built-in webpack 5 abilities
module.exports = function (config, api) {
    var context = api.context, getValue = api.getValue;
    var userConfig = context.userConfig, rootDir = context.rootDir, webpack = context.webpack;
    // filesystem cache
    if (!process.env.DISABLE_FS_CACHE) {
        var version = getValue('WEBPACK_CACHE_ID');
        var cacheConfig = {
            cache: {
                type: 'filesystem',
                version: version,
                buildDependencies: { config: [path.join(rootDir, 'package.json')] },
                cacheDirectory: path.join(rootDir, 'node_modules', '.cache', 'webpack'),
            }
        };
        // tnpm / cnpm 安装时，webpack 5 的持久缓存无法生成，长时间将导致 OOM
        // 原因：[managedPaths](https://webpack.js.org/configuration/other-options/#managedpaths) 在 tnpm / cnpm 安装的情况下失效，导致持久缓存在处理 node_modules
        // 通过指定 [immutablePaths](https://webpack.js.org/configuration/other-options/#immutablepaths) 进行兼容
        // 依赖路径中同时包含包名和版本号即可满足 immutablePaths 的使用
        // 通过安装后的 package.json 中是否包含 __npminstall_done 字段来判断是否为 tnpm / cnpm 安装模式
        // eslint-disable-next-line global-require
        if (require('../package.json').__npminstall_done) {
            var nodeModulesPath = path.join(rootDir, 'node_modules');
            cacheConfig.snapshot = {
                immutablePaths: [nodeModulesPath],
            };
        }
        var defaultLogging = {
            level: 'warn',
        };
        config.merge(__assign(__assign({}, cacheConfig), (userConfig.logging ? {
            // 缓存日志
            infrastructureLogging: __assign(__assign({}, defaultLogging), userConfig.logging)
        } : { infrastructureLogging: defaultLogging })));
    }
    // BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
    // This is no longer the case. Verify if you need these module and configure a polyfill for it.
    config.resolve.alias.set('path', 'path-browserify');
    config.plugin('ProvidePlugin').use(webpack.ProvidePlugin, [{ process: 'process/browser' }]);
    // assetModuleFilename: 'assets/[hash][ext][query]',
    config.output.merge({
        assetModuleFilename: 'assets/[hash][ext][query]',
    });
};
//# sourceMappingURL=webpack5.js.map