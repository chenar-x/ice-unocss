var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var getSassImplementation = require('@builder/app-helpers').getSassImplementation;
module.exports = function (config, customOptions, context) {
    var pkg = context.pkg, rootDir = context.rootDir;
    var sassLoaderOptions = {};
    var defaultSassImplPkg = 'sass';
    if ((pkg.dependencies && pkg.dependencies['node-sass']) || (pkg.devDependencies && pkg.devDependencies['node-sass'])) {
        defaultSassImplPkg = 'node-sass';
    }
    sassLoaderOptions.implementation = getSassImplementation(defaultSassImplPkg, rootDir);
    if (customOptions) {
        // the prependData option was removed in favor the additionalData option in sass-loader^10.0.0
        if (customOptions.prependData) {
            sassLoaderOptions.additionalData = customOptions.prependData;
            delete customOptions.prependData;
        }
        sassLoaderOptions = __assign(__assign({}, sassLoaderOptions), customOptions);
    }
    [
        'scss',
        'scss-module',
        'scss-global' // rule of `global.scss`
    ].forEach(function (rule) {
        if (config.module.rules.get(rule)) {
            config.module
                .rule(rule)
                .use('sass-loader')
                .tap(function (options) { return (__assign(__assign({}, options), sassLoaderOptions)); });
        }
    });
};
//# sourceMappingURL=sassLoaderOptions.js.map