"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var app_helpers_1 = require("@builder/app-helpers");
var modifySwcOptions_1 = require("../utils/modifySwcOptions");
var processPresetEnv = require("../utils/processPresetEnv");
var addBabelPlugins = require("../utils/addBabelPlugins");
var getEntryRegExp = function (entryPath) {
    var entryExtname = path.extname(entryPath);
    // this will work in both windows and Unix : { test: /path[\\\/]to[\\\/]file/ }
    return entryExtname ? entryPath : new RegExp(entryPath.split(path.sep).join('[\\\\\\/]') + "(.jsx?|.tsx?)$");
};
exports.default = (function (config, polyfill, _a) {
    var userConfig = _a.userConfig;
    var swc = userConfig.swc;
    if (swc) {
        (0, modifySwcOptions_1.default)(config, { env: {
                mode: polyfill || undefined,
                coreJs: 3,
            } });
    }
    else {
        processPresetEnv(config, {
            useBuiltIns: polyfill,
            // Set latest polyfills (until ECMAScript 2021). https://unpkg.alibaba-inc.com/browse/core-js-compat@3.18.3/modules-by-versions.json
            corejs: '3.7',
        });
    }
    if ((polyfill === false || polyfill === 'usage') && !swc) {
        (0, app_helpers_1.injectTransformRuntime)(config);
        return;
    }
    if (polyfill === 'entry') {
        var entries_1 = config.toConfig().entry;
        var rule_1 = config.module.rule('polyfill').test(/\.jsx?|\.tsx?$/);
        var fileList_1 = [];
        if (!entries_1)
            return;
        Object.keys(entries_1).forEach(function (key) {
            var addPolyfill = false;
            // only include entry path
            for (var i = 0; i < entries_1[key].length; i += 1) {
                // filter node_modules file add by plugin
                if (!/node_modules/.test(entries_1[key][i])) {
                    rule_1.include.add(getEntryRegExp(entries_1[key][i]));
                    fileList_1.push(entries_1[key][i]);
                    addPolyfill = true;
                    break;
                }
            }
            if (!addPolyfill) {
                rule_1.include.add(getEntryRegExp(entries_1[key][0]));
                fileList_1.push(entries_1[key][0]);
            }
        });
        rule_1.use('polyfill-loader').loader(require.resolve('../utils/polyfillLoader')).options({});
        if (!swc) {
            addBabelPlugins(config, [[require.resolve('../utils/babelPluginCorejsLock.js'), { fileList: fileList_1 }]]);
        }
    }
});
//# sourceMappingURL=polyfill.js.map