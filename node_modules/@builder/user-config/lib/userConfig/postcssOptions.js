var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var checkPostcssLoader = function (config, ruleName) { return config.module.rules.has(ruleName) && config.module.rule(ruleName).uses.has('postcss-loader'); };
module.exports = function (config, postcssOptions) {
    if (postcssOptions) {
        var styleRules = ['css', 'css-module', 'css-global', 'scss', 'scss-module', 'scss-global', 'less', 'less-module', 'less-global'];
        var finalPostcssOptions_1 = {};
        var restLoaderOptions_1 = {};
        // get default post css config
        if (checkPostcssLoader(config, 'css')) {
            var builtInOptions = config.module.rule('css').use('postcss-loader').get('options');
            if (builtInOptions) {
                var optionConfig = builtInOptions.config, restOptions = __rest(builtInOptions, ["config"]);
                if (restOptions) {
                    restLoaderOptions_1 = restOptions;
                }
                if (builtInOptions.config && builtInOptions.config.path) {
                    try {
                        var postcssFile = optionConfig.path + "/defaultPostcssConfig";
                        // eslint-disable-next-line
                        finalPostcssOptions_1 = (optionConfig.ctx ? require(postcssFile)(optionConfig.ctx) : require(postcssFile)) || {};
                    }
                    catch (err) {
                        console.log('[Error] fail to load default postcss config');
                    }
                }
                else {
                    // compatible with rax config
                    finalPostcssOptions_1 = builtInOptions || { plugins: [] };
                }
            }
        }
        if (!finalPostcssOptions_1.plugins) {
            // set default plugin value
            finalPostcssOptions_1.plugins = [];
        }
        // merge plugins
        var plugins_1 = finalPostcssOptions_1.plugins;
        Object.keys(postcssOptions.plugins || {}).forEach(function (pluginName) {
            var pluginOptions = {};
            var targetIndex = plugins_1.findIndex(function (pluginConfig) {
                var _a = Array.isArray(pluginConfig) ? pluginConfig : [pluginConfig], name = _a[0], options = _a[1];
                if (options) {
                    pluginOptions = options;
                }
                return typeof name === 'string' && name.indexOf(pluginName) > -1;
            });
            var options = postcssOptions.plugins[pluginName];
            if (targetIndex > -1) {
                if (options === false) {
                    // delete builtIn plugin
                    finalPostcssOptions_1.plugins.splice(targetIndex, 1);
                }
                else {
                    // shallow merge for options
                    var mergedOptions = __assign(__assign({}, pluginOptions), options);
                    finalPostcssOptions_1.plugins.splice(targetIndex, 1, [pluginName, mergedOptions]);
                }
            }
            else {
                finalPostcssOptions_1.plugins.push([pluginName, options]);
            }
        });
        var postcssPlugins_1 = finalPostcssOptions_1.plugins.map(function (pluginInfo) {
            var _a = Array.isArray(pluginInfo) ? pluginInfo : [pluginInfo], name = _a[0], options = _a[1];
            if (typeof name === 'string') {
                // eslint-disable-next-line
                return require(name)(options);
            }
            else {
                return pluginInfo;
            }
        });
        // modify css rules
        styleRules.forEach(function (ruleName) {
            if (checkPostcssLoader(config, ruleName)) {
                config.module.rule(ruleName).use('postcss-loader').tap(function () {
                    // merge postcss-loader options
                    return __assign(__assign({}, restLoaderOptions_1), { postcssOptions: __assign(__assign(__assign({}, postcssOptions), finalPostcssOptions_1), { plugins: postcssPlugins_1 }) });
                });
            }
        });
    }
};
//# sourceMappingURL=postcssOptions.js.map