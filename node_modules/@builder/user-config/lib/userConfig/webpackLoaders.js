var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var path = require('path');
var genRegExpRule = function (value) { return new RegExp(Array.isArray(value) ? value.join('|') : value); };
var ensureArray = function (value) { return Array.isArray(value) ? value : [value]; };
var getConditionRule = function (value) {
    if (value instanceof RegExp) {
        return value;
    }
    else if (typeof value === 'string') {
        return path.isAbsolute(value) ? value : new RegExp(value);
    }
    return value;
};
var optionAPIs = {
    test: function (rule, value) {
        rule.test(genRegExpRule(value));
    },
    oneOf: function (rule, value) {
        /**
         * config.module
         *  .rule('css')
         *   .oneOf('inline')
         *     .resourceQuery(/inline/)
         *     .use('url')
         *       .loader('url-loader')
         *       .end()
         *     .end()
         *   .oneOf('external')
         *     .resourceQuery(/external/)
         *     .use('file')
         *       .loader('file-loader')
         */
        Object.keys(value).forEach(function (oneOfName) {
            var _a = value[oneOfName], resourceQuery = _a.resourceQuery, loaders = _a.loaders;
            var loaderRule = rule.oneOf(oneOfName);
            if (resourceQuery) {
                loaderRule.resourceQuery(genRegExpRule(resourceQuery));
            }
            configRuleLoaders(loaderRule, loaders || {});
        });
    },
    // clear include rules
    includeClear: function (rule) {
        rule.include.clear();
    },
    include: function (rule, value) {
        ensureArray(value).forEach(function (includeValue) {
            rule.include.add(getConditionRule(includeValue));
        });
    },
    // clear exclude rules
    excludeClear: function (rule) {
        rule.exclude.clear();
    },
    exclude: function (rule, value) {
        ensureArray(value).forEach(function (excludeValue) {
            rule.exclude.add(getConditionRule(excludeValue));
        });
    },
    pre: function (rule) {
        rule.pre();
    },
    post: function (rule) {
        rule.post();
    },
    enforce: function (rule) {
        rule.enforce();
    },
    before: function (rule, value) {
        rule.before(value);
    },
    after: function (rule, value) {
        rule.after(value);
    },
};
var validRuleOption = Object.keys(optionAPIs);
function configModuleRule(rule, options) {
    // loop validRuleOption to make sure optionAPIs excute in order
    validRuleOption.forEach(function (optionsKey) {
        var optionValue = options[optionsKey];
        if (optionValue) {
            optionAPIs[optionsKey](rule, optionValue);
        }
    });
}
function configRuleLoaders(rule, loaders) {
    var loaderNames = Object.keys(loaders);
    loaderNames.forEach(function (loaderName) {
        var _a = loaders[loaderName], options = _a.options, before = _a.before, after = _a.after;
        // check if loader is exsits
        var loaderRule = null;
        if (rule.uses.has(loaderName)) {
            loaderRule = rule.use(loaderName).tap(function (opts) { return (__assign(__assign({}, opts), options)); });
        }
        else {
            loaderRule = rule.use(loaderName).loader(loaderName).options(options);
        }
        if (before)
            loaderRule.before(before);
        if (after)
            loaderRule.after(after);
    });
}
module.exports = function (config, webpackLoaders) {
    if (webpackLoaders) {
        var ruleNames = Object.keys(webpackLoaders);
        ruleNames.forEach(function (ruleName) {
            // create new rule if module rule is not exists
            var rule = config.module.rule(ruleName);
            var ruleOptions = webpackLoaders[ruleName];
            configModuleRule(rule, ruleOptions);
            configRuleLoaders(rule, ruleOptions.loaders || {});
        });
    }
};
//# sourceMappingURL=webpackLoaders.js.map