var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var path = require('path');
var formatPath = require('@builder/app-helpers').formatPath;
module.exports = function (config, hash, context) {
    var command = context.command;
    // default is false
    if (hash) {
        // can not use [chunkhash] or [contenthash] for chunk in dev mode
        var hashStr_1 = typeof hash === 'boolean' || command === 'start' ? 'hash:6' : hash;
        var fileName = config.output.get('filename');
        var pathArray = fileName.split('/');
        pathArray.pop(); // pop filename
        pathArray = pathArray.filter(function (v) { return v; });
        var outputPath_1 = pathArray.length ? pathArray.join('/') : '';
        config.output.filename(formatPath(path.join(outputPath_1, "[name].[" + hashStr_1 + "].js")));
        if (config.plugins.get('MiniCssExtractPlugin')) {
            config.plugin('MiniCssExtractPlugin').tap(function (args) { return [Object.assign.apply(Object, __spreadArray(__spreadArray([], args, false), [{
                        filename: formatPath(path.join(outputPath_1, "[name].[" + hashStr_1 + "].css")),
                    }], false))]; });
        }
    }
};
//# sourceMappingURL=hash.js.map