var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var merge = require('@builder/pack/deps/lodash').merge;
module.exports = function (config, proxyConfig) {
    var proxyRules = Object.entries(proxyConfig);
    if (proxyRules.length) {
        var proxy = proxyRules.map(function (_a) {
            var match = _a[0], opts = _a[1];
            // set enable false to disable proxy rule
            var enable = opts.enable, target = opts.target, proxyRule = __rest(opts, ["enable", "target"]);
            if (enable !== false) {
                return merge({
                    target: target,
                    changeOrigin: true,
                    logLevel: 'warn',
                    onProxyRes: function onProxyReq(proxyRes, req) {
                        proxyRes.headers['x-proxy-by'] = 'ice-proxy';
                        proxyRes.headers['x-proxy-match'] = match;
                        proxyRes.headers['x-proxy-target'] = target;
                        var distTarget = target;
                        if (target && target.endsWith('/')) {
                            distTarget = target.replace(/\/$/, '');
                        }
                        proxyRes.headers['x-proxy-target-path'] = distTarget + req.url;
                    },
                    onError: function onError(err, req, res) {
                        // proxy server error can't trigger onProxyRes
                        res.writeHead(500, {
                            'x-proxy-by': 'ice-proxy',
                            'x-proxy-match': match,
                            'x-proxy-target': target,
                        });
                        res.end("proxy server error: " + err.message);
                    },
                }, proxyRule, { context: match });
            }
            return false;
        }).filter(function (v) { return v; });
        config.devServer.proxy(proxy);
    }
};
//# sourceMappingURL=proxy.js.map