var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var formatPath = require('@builder/app-helpers').formatPath;
module.exports = function (config, babelPresets, _a) {
    var userConfig = _a.userConfig;
    if (userConfig.swc)
        return;
    ['jsx', 'tsx'].forEach(function (rule) {
        config.module
            .rule(rule)
            .use('babel-loader')
            .tap(function (options) {
            var extraPresets = __spreadArray([], babelPresets, true);
            var presets = options.presets.map(function (preset) {
                var presetPath = (Array.isArray(preset) ? preset : [preset])[0];
                var matchedPreset = null;
                extraPresets = extraPresets.filter(function (babelPreset) {
                    var babelPresetPath = Array.isArray(babelPreset) ? babelPreset[0] : babelPreset;
                    var matched = formatPath(presetPath).indexOf(formatPath(babelPresetPath)) > -1;
                    if (matched) {
                        var hasOptions = Array.isArray(babelPreset) && babelPreset.length > 1;
                        matchedPreset = babelPreset;
                        // replace preset path with absolute path
                        if (hasOptions) {
                            matchedPreset[0] = presetPath;
                        }
                        else {
                            matchedPreset = presetPath;
                        }
                    }
                    return !matched;
                });
                // replace current preset if match
                return matchedPreset || preset;
            });
            return __assign(__assign({}, options), { presets: __spreadArray(__spreadArray([], presets, true), extraPresets, true) });
        });
    });
};
//# sourceMappingURL=babelPresets.js.map