var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var path = require('path');
var merge = require('@builder/pack/deps/lodash').merge;
var EXCLUDE_REGEX = /node_modules/;
var logged = false;
module.exports = function (config, swcOptions, context, _a) {
    var log = _a.log, getValue = _a.getValue;
    var rootDir = context.rootDir;
    if (swcOptions) {
        if (!logged) {
            logged = true;
            log.info('[swc]', 'swc enabled, configurations about babel will be ignored');
        }
        ['jsx', 'tsx'].forEach(function (rule) {
            if (config.module.rules.get(rule)) {
                // add include rule while source file will never matched
                config.module.rule(rule)
                    .exclude.clear().end()
                    .include.clear().add(path.join(rootDir, '__not_exists_file__.js'));
            }
        });
        var swcLoader = require.resolve('@builder/swc-loader');
        var reactTransformConfig = getValue('REACT_TRANSFORM_CONFIG');
        if (!reactTransformConfig) {
            reactTransformConfig = getValue('HAS_JSX_RUNTIME') ? { runtime: 'automatic' } : {};
        }
        // add swc rule
        var commonOptions = __assign({ jsc: {
                transform: {
                    react: reactTransformConfig,
                    legacyDecorator: true
                },
                externalHelpers: true
            }, module: {
                type: 'commonjs',
                noInterop: false
            }, env: {
                loose: true,
            } }, swcOptions);
        var jsOptions = merge({
            jsc: {
                parser: {
                    jsx: true,
                    dynamicImport: true,
                    functionBind: true,
                    exportDefaultFrom: true,
                    exportNamespaceFrom: true,
                    decorators: true,
                },
            }
        }, commonOptions);
        config.module
            .rule('pre-compile-loader')
            .test(/\.tsx?$/)
            .enforce('pre')
            .use('pre-compile-loader')
            .loader(path.join(__dirname, '../Loaders/PreCompileLoader'))
            .options({
            jsc: {
                transform: {
                    react: reactTransformConfig,
                },
            },
        })
            .end();
        config.module
            .rule('swc')
            .test(/\.(j|t)sx?$/)
            .exclude.add(EXCLUDE_REGEX)
            .end()
            .use('swc-loader')
            .loader(swcLoader)
            .options(jsOptions)
            .end();
    }
};
//# sourceMappingURL=swc.js.map