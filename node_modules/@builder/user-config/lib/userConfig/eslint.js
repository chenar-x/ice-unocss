var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var ESLintPlugin = require('eslint-webpack-plugin');
module.exports = function (config, eslint, context, _a) {
    var log = _a.log;
    if (eslint === false) {
        return;
    }
    var command = context.command;
    var enableESlint = false;
    var eslintOptions = {
        extensions: ['js', 'ts', 'jsx', 'tsx'],
        lintDirtyModulesOnly: false,
        failOnError: true,
    };
    if (!eslint) {
        enableESlint = true;
        // lint only changed files, skip lint on start
        eslintOptions.lintDirtyModulesOnly = true;
        if (command === 'build') {
            // do not break build when lint error
            eslintOptions.failOnError = false;
        }
    }
    if (eslint && !eslint.disable) {
        var disable = eslint.disable, rest = __rest(eslint, ["disable"]);
        enableESlint = true;
        eslintOptions = __assign(__assign({}, eslintOptions), rest);
    }
    var dependenciesMsg = 'Please check dependencies of eslint(> 7.0.0)';
    try {
        // eslint-disable-next-line global-require
        var ESLint = require('eslint').ESLint;
        var mainVersion = ESLint.version.split('.')[0];
        if (mainVersion < 7) {
            enableESlint = false;
            log.info(dependenciesMsg);
        }
    }
    catch (e) {
        enableESlint = false;
        log.info(dependenciesMsg);
    }
    if (enableESlint) {
        config.plugin('ESLintPlugin').use(ESLintPlugin, [eslintOptions]);
    }
};
//# sourceMappingURL=eslint.js.map