var webpackDevMock = require('webpack-dev-mock');
module.exports = function (config, mock, context) {
    var _a;
    // dev mock
    var commandArgs = context.commandArgs, command = context.command, webpack = context.webpack;
    var isWebpack4 = /^4\./.test(webpack.version);
    if (!commandArgs.disableMock && command === 'start' && mock) {
        // Compat with webpack4
        var beforeHookName_1 = isWebpack4 ? 'before' : 'onBeforeSetupMiddleware';
        var originalDevServeBefore_1 = config.devServer.get(beforeHookName_1);
        // replace devServer before function
        config.merge({ devServer: (_a = {},
                _a[beforeHookName_1] = function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    var app;
                    var server;
                    if (args[0].app) {
                        server = args[0];
                        app = server.app;
                    }
                    else {
                        app = args[0], server = args[1];
                    }
                    // set cors before all served files
                    app.use(function (req, res, next) {
                        res.set('Access-Control-Allow-Origin', '*');
                        next();
                    });
                    var mockIgnore = Object.prototype.toString.call(mock) === '[object Object]' && mock.exclude;
                    // keep mock server ahead of devServer.before
                    webpackDevMock(app, mockIgnore || []);
                    if (typeof originalDevServeBefore_1 === 'function') {
                        originalDevServeBefore_1.apply(void 0, args);
                    }
                },
                _a) });
    }
};
//# sourceMappingURL=mock.js.map