var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
module.exports = function (config, webpackPlugins, context) {
    if (webpackPlugins) {
        var pluginNames = Object.keys(webpackPlugins);
        pluginNames.forEach(function (pluginName) {
            var _a = webpackPlugins[pluginName], options = _a.options, after = _a.after, before = _a.before;
            var pluginRule = null;
            // check if plugin has been already registed
            if (config.plugins.has(pluginName)) {
                // modify plugin options
                pluginRule = config.plugin(pluginName).tap(function (_a) {
                    var args = _a[0];
                    return [__assign(__assign({}, args), options)];
                });
            }
            else {
                // add new plugin
                var plugin = null;
                var webpackRegExp = /^webpack\./;
                if (pluginName.match(webpackRegExp)) {
                    // webpack builtin plugins
                    var webpack = context.webpack;
                    var webpackInnerPluginName = pluginName.replace(webpackRegExp, '');
                    plugin = webpack[webpackInnerPluginName];
                }
                else {
                    // eslint-disable-next-line
                    plugin = require(pluginName);
                }
                pluginRule = config.plugin(pluginName).use(plugin, [options]);
            }
            if (before)
                pluginRule.before(before);
            if (after)
                pluginRule.after(after);
        });
    }
};
//# sourceMappingURL=webpackPlugins.js.map