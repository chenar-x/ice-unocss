"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var app_helpers_1 = require("@builder/app-helpers");
var modifySwcOptions_1 = require("../utils/modifySwcOptions");
var getTargetStr = function (browserslist) {
    if (typeof browserslist === 'string') {
        return browserslist;
    }
    else if (Array.isArray(browserslist)) {
        return browserslist.join(',');
    }
    else if (Object.prototype.toString.call(browserslist) === '[object Object]') {
        return Object.keys(browserslist).map(function (browserKey) { return browserKey + " >= " + browserslist[browserKey]; }).join(',');
    }
    return '';
};
exports.default = (function (config, browserslist, _a) {
    var userConfig = _a.userConfig;
    if (browserslist) {
        // ignore old data log
        process.env.BROWSERSLIST_IGNORE_OLD_DATA = 'true';
        config.target("browserslist:" + getTargetStr(browserslist));
    }
    if (userConfig.swc) {
        (0, modifySwcOptions_1.default)(config, { env: { targets: browserslist } });
    }
    else {
        ['jsx', 'tsx'].forEach(function (rule) {
            config.module
                .rule(rule)
                .use('babel-loader')
                .tap(function (options) {
                var babelPresets = options.presets || [];
                var presets = babelPresets.map(function (preset) {
                    if (Array.isArray(preset) && (0, app_helpers_1.formatPath)(preset[0]).indexOf((0, app_helpers_1.formatPath)('@babel/preset-env')) > -1) {
                        return [
                            preset[0],
                            Object.assign(preset[1], { targets: browserslist }),
                        ];
                    }
                    return preset;
                });
                return Object.assign(options, { presets: presets });
            });
        });
    }
});
//# sourceMappingURL=browserslist.js.map