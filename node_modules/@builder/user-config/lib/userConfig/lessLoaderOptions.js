var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var getLessImplementation = require('@builder/app-helpers').getLessImplementation;
var lessSpecificOptions = ['paths', 'rootpath', 'rewriteUrls',
    'math', 'strictMath', 'relativeUrls', 'strictUnits', 'ieCompat', 'javascriptEnabled',
    'globalVars', 'modifyVars', 'urlArgs', 'dumpLineNumbers'];
module.exports = function (config, customOptions, context) {
    var rootDir = context.rootDir;
    var lessLoaderOptions = {
        implementation: getLessImplementation(rootDir),
    };
    var lessOptions = {};
    if (customOptions) {
        var customOptionKeys = Object.keys(customOptions);
        customOptionKeys.forEach(function (key) {
            if (lessSpecificOptions.includes(key)) {
                lessOptions[key] = customOptions[key];
                delete customOptions[key];
            }
        });
        if (customOptions.lessOptions) {
            var originalLessOptions_1 = lessLoaderOptions.lessOptions;
            delete customOptions.lessOptions;
            lessLoaderOptions.lessOptions = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                if (typeof originalLessOptions_1 === 'function') {
                    return __assign(__assign({}, lessOptions), lessOptions.apply(this, args));
                }
                return __assign(__assign({}, lessOptions), originalLessOptions_1);
            };
        }
        else {
            lessLoaderOptions.lessOptions = lessOptions;
        }
        lessLoaderOptions = __assign(__assign({}, lessLoaderOptions), customOptions);
    }
    [
        'less',
        'less-module',
        'less-global', // rule of `global.less`
    ].forEach(function (rule) {
        if (config.module.rules.get(rule)) {
            config.module
                .rule(rule)
                .use('less-loader')
                .tap(function (options) { return (__assign(__assign(__assign({}, options), lessLoaderOptions), { 
                // merge less options
                lessOptions: __assign(__assign({}, (options.lessOptions || {})), lessLoaderOptions.lessOptions) })); });
        }
    });
};
//# sourceMappingURL=lessLoaderOptions.js.map