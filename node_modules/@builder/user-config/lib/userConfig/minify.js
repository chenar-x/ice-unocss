var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var ESBuildMinifyPlugin = require('@builder/pack/deps/esbuild-loader').ESBuildMinifyPlugin;
var SWCMinifyPlugin = require('@builder/webpack-plugin-swc').SWCMinifyPlugin;
var TerserPlugin = require('@builder/pack/deps/terser-webpack-plugin');
var logged = false;
var TERSER_DEFAULT_OPTIONS = {
    parallel: true,
    extractComments: false,
    terserOptions: {
        output: {
            ascii_only: true,
            comments: 'some',
            beautify: false,
        },
        mangle: true,
    },
};
module.exports = function (config, minify, context, _a) {
    var log = _a.log;
    var command = context.command, taskName = context.taskName;
    var includedInMinifyTasks = minify === true && (minify.activeInDev || []).includes(taskName);
    if (minify && (command === 'build' || includedInMinifyTasks)) {
        var minifierConfig = minify.type ? minify : { type: typeof minify === 'boolean' ? 'terser' : minify };
        var type = minifierConfig.type, options_1 = minifierConfig.options;
        var availableMinifier = ['terser', 'esbuild', 'swc'];
        if (!availableMinifier.includes(type)) {
            if (!logged) {
                logged = true;
                log.info("invalid minify value " + type + ", available minifier is 'terser | esbuild'");
            }
            return;
        }
        // Enable minimize for development, in production its default value is true
        config.optimization.minimize(true);
        if (['swc', 'esbuild'].includes(type) && config.optimization.minimizers.has('TerserPlugin')) {
            config.optimization.minimizers.delete('TerserPlugin');
        }
        // The default is terser which is configured in base chain
        if (type === 'esbuild') {
            log.info('esbuild is specified as default minification');
            var esbuildMinifyOptions = Object.assign({
                target: 'es2015',
            }, options_1);
            config.optimization.minimizer('ESBuild').use(ESBuildMinifyPlugin, [esbuildMinifyOptions]);
        }
        else if (type === 'swc') {
            log.info('swc is specified as default minification');
            var jscCompileOptions = {
                jsc: {
                    minify: Object.assign({
                        compress: {
                            unused: false,
                        },
                        mangle: true,
                    }, options_1),
                    target: 'es2021',
                },
                sync: false,
            };
            config.optimization.minimizer('SWC').use(SWCMinifyPlugin, [jscCompileOptions]);
        }
        else {
            if (!config.optimization.minimizers.has('TerserPlugin')) {
                config.optimization
                    .minimizer('TerserPlugin')
                    .use(TerserPlugin, [TERSER_DEFAULT_OPTIONS]);
            }
            // fallback to terser as default minification
            config.optimization.minimizer('TerserPlugin').tap(function (_a) {
                var terserPluginOptions = _a[0];
                return [__assign(__assign({}, terserPluginOptions), { terserOptions: Object.assign(terserPluginOptions.terserOptions || {}, options_1) })];
            });
        }
    }
    else if (!minify) {
        config.optimization.minimize(false);
    }
};
//# sourceMappingURL=minify.js.map