var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/* eslint-disable global-require */
var unionBy = require('@builder/app-helpers').unionBy;
var modifyUserConfig = require('./utils/modifyUserConfig');
var baseUserConfigs = require('./config/user.config');
// TODO: move to build-plugin-react-app ?
var CONFIG = [{
        name: 'modeConfig',
        validation: 'object',
        defaultValue: {},
    }, {
        name: 'disableRuntime',
        validation: 'boolean',
        defaultValue: false,
        configWebpack: function () { }
    }];
module.exports = function (api, options) {
    if (options === void 0) { options = {}; }
    var registerUserConfig = api.registerUserConfig;
    var customConfigs = options.customConfigs;
    CONFIG.forEach(function (item) { return registerUserConfig(item); });
    var defaultConfig = baseUserConfigs.map(function (config) {
        var name = config.name;
        var configFunc = null;
        try {
            configFunc = interopRequire("./userConfig/" + name);
            // eslint-disable-next-line no-empty
        }
        catch (err) { }
        return __assign({ configWebpack: function (chainConfig, configValue, context) {
                if (configFunc) {
                    // enhance api params
                    configFunc(chainConfig, configValue, context, api);
                }
            } }, config);
    });
    var finallyConfigs = unionBy(defaultConfig.concat(customConfigs), 'name');
    // register user config
    registerUserConfig(finallyConfigs);
    // modify user config to keep execute order
    modifyUserConfig(api, finallyConfigs);
};
function interopRequire(filepath) {
    // eslint-disable-next-line import/no-dynamic-require
    var configModule = require(filepath);
    if (configModule.default)
        return configModule.default;
    return configModule;
}
//# sourceMappingURL=applyUserConfig.js.map