var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var USER_CONFIG_KEY_WITHOUT_BUILD = require('../config/constants').USER_CONFIG_KEY_WITHOUT_BUILD;
var mergeConfigKeys = ['devServer'];
module.exports = function (api, finallyConfigs) {
    var modifyUserConfig = api.modifyUserConfig;
    var defaultConfig = {};
    finallyConfigs.forEach(function (config) {
        if (Object.prototype.hasOwnProperty.call(config, 'defaultValue')) {
            defaultConfig[config.name] = config.defaultValue;
        }
    });
    // modify user config to keep execute order
    modifyUserConfig(function (userConfig) {
        var executePriority = {
            // swc should be first
            swc: 2,
            // minify should execute before esbuild / terserOptions
            minify: 1,
        };
        // sort config key to make sure entry config is always execute before injectBabel, and filename before outputPath
        var configKeys = Object.keys(userConfig).sort(function (curr, next) {
            if (executePriority[curr] && executePriority[next]) {
                return executePriority[next] - executePriority[curr];
            }
            else if (executePriority[curr] || executePriority[next]) {
                return executePriority[curr] ? -1 : 1;
            }
            else {
                return curr.localeCompare(next);
            }
        });
        var newConfig = {};
        configKeys.forEach(function (configKey) {
            if (Object.prototype.hasOwnProperty.call(newConfig, configKey))
                return;
            if (!USER_CONFIG_KEY_WITHOUT_BUILD.includes(configKey)) {
                if (mergeConfigKeys.includes(configKey)) {
                    newConfig[configKey] = __assign(__assign({}, defaultConfig[configKey]), userConfig[configKey]);
                }
                else {
                    newConfig[configKey] = userConfig[configKey];
                }
                // eslint-disable-next-line no-param-reassign
                delete userConfig[configKey];
            }
        });
        return newConfig;
    });
};
//# sourceMappingURL=modifyUserConfig.js.map