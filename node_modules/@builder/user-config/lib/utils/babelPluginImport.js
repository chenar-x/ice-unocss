module.exports = function (babel, _a) {
    var importDeclarations = _a.importDeclarations;
    var t = babel.types;
    return {
        visitor: {
            ImportDeclaration: function (nodePath, state) {
                var node = nodePath.node;
                if (t.isStringLiteral(node.source, { value: 'ice' }) || t.isStringLiteral(node.source, { value: 'rax-app' })) {
                    // check import specifier
                    // only transform pattern like: import { withAuth, useAuth } from 'ice';
                    var needTransform = node.specifiers.every(function (specifier) {
                        return t.isImportSpecifier(specifier) && importDeclarations[specifier.imported.name];
                    });
                    if (needTransform) {
                        var transformNodes = node.specifiers.map(function (specifier) {
                            var importName = specifier.imported.name;
                            var localName = specifier.local.name;
                            var _a = importDeclarations[importName], value = _a.value, type = _a.type, alias = _a.alias, multipleSource = _a.multipleSource;
                            var importSource = value;
                            var importType = type;
                            if (multipleSource) {
                                var matchedSource = multipleSource.find(function (_a) {
                                    var filename = _a.filename;
                                    return filename === state.filename;
                                });
                                if (matchedSource) {
                                    importSource = matchedSource.value;
                                    importType = matchedSource.type;
                                }
                            }
                            return t.importDeclaration([importType === 'default' ?
                                    t.importDefaultSpecifier(t.identifier(localName)) : t.importSpecifier(t.identifier(localName), t.identifier(alias || importName))
                            ], t.stringLiteral(importSource));
                        });
                        nodePath.replaceWithMultiple(transformNodes);
                    }
                    else {
                        console.log('[babel transform]', state.filename + " import statement does not meet the specification");
                    }
                }
            },
        }
    };
};
//# sourceMappingURL=babelPluginImport.js.map