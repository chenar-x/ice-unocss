var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var formatPath = require('@builder/app-helpers').formatPath;
module.exports = function (config, presetEnvParam) {
    ['jsx', 'tsx'].forEach(function (rule) {
        config.module
            .rule(rule)
            .use('babel-loader')
            .tap(function (options) {
            var presetEnv = options.presets.find(function (preset) {
                var presetName = (Array.isArray(preset) ? preset : [preset])[0];
                return formatPath(presetName).indexOf('@babel/preset-env') > -1;
            });
            if (presetEnvParam.useBuiltIns === 'usage') {
                // Force babel sourceType unambiguous when preset env useBuiltIns is usage
                options.sourceType = 'unambiguous';
            }
            presetEnv[1] = __assign(__assign({}, presetEnv[1]), presetEnvParam);
            if (!presetEnvParam.useBuiltIns) {
                // The `corejs` option only has an effect when the `useBuiltIns` option is not `false`
                delete presetEnv[1].corejs;
            }
            return options;
        });
    });
};
//# sourceMappingURL=processPresetEnv.js.map