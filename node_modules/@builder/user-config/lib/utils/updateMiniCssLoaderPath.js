var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
module.exports = function (config, value, userConfig) {
    var shouldUseRelativeAssetPaths = value === './';
    var outputCssPath = userConfig.outputAssetsPath && userConfig.outputAssetsPath.css;
    // when publicPath is ./ assets in css will be resolve as ./assets/xxx
    // the actual path where assets exist is ../assets/xxx when output css path is `css`
    if (shouldUseRelativeAssetPaths && outputCssPath) {
        var pathArray = outputCssPath.split('/').length;
        var publicPath_1 = __spreadArray([], Array(pathArray), true).map(function () { return '..'; }).join('/') + "/";
        // MiniCssExtractPlugin.loader will use output.publicPath as default
        ['scss', 'scss-module', 'scss-global', 'css', 'css-module', 'css-global', 'less', 'less-module', 'less-global'].forEach(function (rule) {
            if (config.module.rules.get(rule)) {
                config.module.rule(rule).use('MiniCssExtractPlugin.loader').tap(function () { return ({ publicPath: publicPath_1 }); });
            }
        });
    }
};
//# sourceMappingURL=updateMiniCssLoaderPath.js.map