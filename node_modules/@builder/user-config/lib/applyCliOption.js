var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var path = require('path');
var optionConfig = require('./config/option.config');
module.exports = function (api, options) {
    if (options === void 0) { options = {}; }
    var registerCliOption = api.registerCliOption, log = api.log;
    var customOptionConfig = options.customOptionConfig;
    var mergedOptionConfig = __assign(__assign({}, optionConfig), customOptionConfig);
    var optionKeys = Object.keys(mergedOptionConfig);
    registerCliOption(optionKeys.map(function (optionKey) {
        var _a = mergedOptionConfig[optionKey], module = _a.module, commands = _a.commands;
        var moduleName = module || optionKey;
        var optionDefination = {
            name: optionKey,
            commands: commands,
        };
        if (module !== false) {
            try {
                // eslint-disable-next-line
                optionDefination.configWebpack = require(path.isAbsolute(moduleName) ? moduleName : "./cliOption/" + moduleName);
            }
            catch (err) {
                log.error(err);
            }
        }
        return optionDefination;
    }));
};
//# sourceMappingURL=applyCliOption.js.map