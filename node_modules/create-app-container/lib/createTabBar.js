"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var universal_env_1 = require("universal-env");
var transformToVw_1 = require("./transformToVw");
var getSafeAreaInsetBottom_1 = require("./getSafeAreaInsetBottom");
var MAPING = {
    tarBarHeight: 98 + getSafeAreaInsetBottom_1.default(),
    tarBarPaddingBottom: getSafeAreaInsetBottom_1.default(),
    tarBarItemText: 24,
    TarBarItemImgWidth: 30,
    TarBarItemImgHight: 30,
    TarBarItemMarginBottom: 8
};
Object.keys(MAPING).forEach(function (key) {
    if (!universal_env_1.isWeex) {
        MAPING[key] = transformToVw_1.default(MAPING[key]);
    }
});
var styles = {
    tabBar: {
        position: 'fixed',
        left: '0',
        right: '0',
        bottom: '0',
        height: MAPING.tarBarHeight,
        paddingBottom: MAPING.tarBarPaddingBottom,
        display: 'flex',
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'center',
        border: '1rpx solid #eee',
        backgroundColor: '#fff',
    },
    tabBarItem: {
        flex: '1',
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'center',
        justifyContent: 'center',
    },
    tabBarItemText: {
        fontSize: MAPING.tarBarItemText
    },
    tabBarItemImg: {
        marginBottom: MAPING.TarBarItemMarginBottom,
        width: MAPING.TarBarItemImgWidth,
        height: MAPING.TarBarItemImgHight
    }
};
var createTabBar = function (api) { return function (props) {
    var createElement = api.createElement, useEffect = api.useEffect, useState = api.useState, Fragment = api.Fragment;
    var _a = useState(''), pathname = _a[0], setPathname = _a[1];
    var _b = props.config, config = _b === void 0 ? {} : _b, history = props.history, onClick = props.onClick;
    if (!history || !history.location) {
        throw new Error('TabBar should have a props of "history". See https://github.com/ReactTraining/history.');
    }
    var showTabBar = 
    // Have tabBar config
    typeof config === 'object' && Array.isArray(config.items)
        // Current page need show tabBar
        && config.items.find(function (item) { return item.path === pathname; });
    var _c = config || {}, _d = _c.backgroundColor, backgroundColor = _d === void 0 ? '#FFF' : _d, _e = _c.items, items = _e === void 0 ? [] : _e, _f = _c.selectedColor, selectedColor = _f === void 0 ? '#333' : _f, _g = _c.textColor, textColor = _g === void 0 ? '#666' : _g;
    useEffect(function () {
        setPathname(history.location.pathname);
        history.listen(function (location) {
            setPathname(location.pathname);
        });
        // eslint-disable-next-line
    }, []);
    return createElement(Fragment, null, showTabBar
        ? createElement('div', {
            style: __assign(__assign({}, styles.tabBar), { backgroundColor: backgroundColor })
        }, items.map(function (item, index) {
            var selected = item.path === pathname;
            var itemTextColor = item.textColor || textColor;
            var itemSelectedColor = item.selectedColor || selectedColor;
            return createElement('div', {
                key: "tab-" + index,
                style: styles.tabBarItem,
                onClick: function () {
                    if (onClick) {
                        onClick(item);
                    }
                    if (!item.path) {
                        console.warn("TabBar item " + item.name + " need set path");
                    }
                    else {
                        history.push(item.path);
                    }
                }
            }, selected && item.activeIcon
                ? createElement('img', {
                    style: styles.tabBarItemImg,
                    src: item.activeIcon
                })
                : null, !selected && item.icon
                ? createElement('img', {
                    style: styles.tabBarItemImg,
                    src: item.icon
                })
                : null, createElement('span', {
                style: __assign(__assign({}, styles.tabBarItemText), { color: selected ? itemSelectedColor : itemTextColor })
            }, item.name));
        }))
        : null);
}; };
exports.default = createTabBar;
