"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var createTabBar_1 = require("./createTabBar");
var styles = {
    container: {
        position: 'absolute',
        top: '0',
        left: '0',
        right: '0',
        bottom: '0',
    },
    alivePage: {
        position: 'absolute',
        width: '100%',
        height: '100%',
        overflowY: 'auto',
        WebkitOverflowScrolling: 'touch'
    }
};
var _updatePageTrigger = function () { };
var alivePages = [];
var alivePagesCache = {};
var config = {
    maxAlivePageNum: 3,
    pageProps: {},
    routes: []
};
var activatePageComponent = function (route, _a) {
    var createElement = _a.createElement;
    route.component()
        .then(function (fn) { return fn(); })
        .then(function (Page) {
        if (!route.keepAlive) {
            // ignore page without keepAlive
            return false;
        }
        alivePagesCache[route.path] = createElement(Page, __assign({}, config.pageProps));
        // Prevent cache from being too large
        if (Object.keys(alivePagesCache).length > config.maxAlivePageNum) {
            delete alivePagesCache[Object.keys(alivePagesCache)[0]];
        }
        // @ts-ignore
        _updatePageTrigger(Date.now());
    });
};
// eslint-disable-next-line
var renderAlivePages = function (routes, _a) {
    var alivePages = _a.alivePages, currentPage = _a.currentPage, isAlivePage = _a.isAlivePage, createElement = _a.createElement;
    if (alivePages.length > 0) {
        return createElement('div', {
            style: __assign(__assign({}, styles.container), { display: isAlivePage ? 'block' : 'none' })
        }, alivePages.map(function (alivePage, index) {
            var alivePageRoute = routes.find(function (route) { return route.path === alivePage.path; });
            var isCurrentPage = alivePageRoute.path === currentPage.path;
            var alivePageComponent = alivePagesCache[alivePageRoute.path] || null;
            if (isCurrentPage && !alivePageComponent) {
                activatePageComponent(alivePageRoute, { createElement: createElement });
            }
            return createElement('div', {
                key: "alivePage" + index,
                style: __assign(__assign({}, styles.alivePage), { display: isCurrentPage ? 'block' : 'none' })
            }, alivePageComponent);
        }));
    }
    return null;
};
var createNavigation = function (api) {
    var TabBar = createTabBar_1.default(api);
    return function (props) {
        var createElement = api.createElement, useEffect = api.useEffect, useState = api.useState, Fragment = api.Fragment;
        var staticConfig = props.staticConfig, component = props.component, history = props.history, routes = props.routes;
        var maxAlivePageNum = staticConfig.maxAlivePageNum, tabBar = staticConfig.tabBar;
        var _a = useState(null), setUpdateTemp = _a[1];
        var Component = component;
        var currentPathname = history.location.pathname;
        var currentPage = routes.find(function (route) { return route.path === currentPathname; }) || {};
        var isAlivePage = currentPage.keepAlive;
        useEffect(function () {
            // Use display control alive page, need get alive page list.
            routes.forEach(function (route) {
                if (route.keepAlive) {
                    alivePages.push(route);
                }
            });
            // If current page is alive page, need update routes.
            if (isAlivePage) {
                // @ts-ignore
                _updatePageTrigger(Date.now());
            }
            // eslint-disable-next-line
        }, []);
        // Props to page component
        var pageProps = {};
        Object.keys(props).forEach(function (key) {
            if (key !== 'staticConfig' && key !== 'component') {
                pageProps[key] = props[key];
            }
        });
        config.pageProps = pageProps;
        config.routes = routes;
        _updatePageTrigger = setUpdateTemp;
        // eslint-disable-next-line
        maxAlivePageNum && (config.maxAlivePageNum = maxAlivePageNum);
        return createElement(Fragment, null, isAlivePage ? null : createElement(Component, pageProps), renderAlivePages(routes, { alivePages: alivePages, currentPage: currentPage, isAlivePage: isAlivePage, createElement: createElement }), createElement(TabBar, {
            config: tabBar,
            history: history
        }));
    };
};
exports.default = createNavigation;
