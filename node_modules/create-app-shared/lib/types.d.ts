import type { History } from 'history';
import type { createElement, ComponentType } from 'react';
declare type VoidFunction = () => void;
declare type App = Partial<{
    rootId: string;
} & Record<'onShow' | 'onHide' | 'onPageNotFound' | 'onShareAppMessage' | 'onUnhandledRejection' | 'onLaunch' | 'onError' | 'onTabItemClick', VoidFunction>>;
export interface AppConfig {
    app?: App;
    router?: {
        type?: 'hash' | 'browser' | 'memory' | 'static';
        history?: History;
        basename?: string;
    };
    renderComponent?: ComponentType;
}
export declare type BuildConfig = Record<string, any>;
export declare type ReactCreateElement = typeof createElement;
export declare type UseEffect = (effect: React.EffectCallback, deps?: React.DependencyList) => void;
export declare type Listener = () => any;
export declare type CreateUsePageLifeCycle = ({ useEffect }: {
    useEffect: UseEffect;
}) => {
    usePageShow: (callback: Listener) => void;
    usePageHide: (callback: Listener) => void;
};
export declare type WithPageLifeCycle = <P>(Component: React.ComponentClass<P>) => React.ComponentClass;
export interface Context {
    createElement?: ReactCreateElement;
}
export {};
