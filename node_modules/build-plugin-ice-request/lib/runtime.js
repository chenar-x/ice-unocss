"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
// @ts-ignore
var createAxiosInstance_1 = require("$ice/createAxiosInstance");
var module = function (_a) {
    var appConfig = _a.appConfig;
    if (appConfig.request) {
        var _b = appConfig.request, requestConfig = _b === void 0 ? {} : _b;
        // 支持配置多实例
        if (Object.prototype.toString.call(requestConfig) === '[object Array]') {
            requestConfig.forEach(function (requestItem) {
                var instanceName = requestItem.instanceName ? requestItem.instanceName : 'default';
                if (instanceName) {
                    var axiosInstance = (0, createAxiosInstance_1.default)(instanceName)[instanceName];
                    setAxiosInstance(requestItem, axiosInstance);
                }
            });
        }
        else {
            // 配置单一实例
            var axiosInstance = (0, createAxiosInstance_1.default)().default;
            setAxiosInstance(requestConfig, axiosInstance);
        }
    }
};
/**
 * 将 appConfig 的 request 配置项通过 axiosInstance.default 进行设置
 * @param requestConfig 配置项
 * @param axiosInstance 实例对象
 */
function setAxiosInstance(requestConfig, axiosInstance) {
    var _a = requestConfig.interceptors, interceptors = _a === void 0 ? {} : _a, requestOptions = __rest(requestConfig, ["interceptors"]);
    Object.keys(requestOptions).forEach(function (key) {
        axiosInstance.defaults[key] = requestOptions[key];
    });
    // Add a request interceptor
    if (interceptors.request) {
        axiosInstance.interceptors.request.use(interceptors.request.onConfig || function (config) { return config; }, interceptors.request.onError || function (error) { return Promise.reject(error); });
    }
    // Add a response interceptor
    if (interceptors.response) {
        axiosInstance.interceptors.response.use(interceptors.response.onConfig || function (response) { return response; }, interceptors.response.onError || function (error) { return Promise.reject(error); });
    }
}
exports.default = module;
//# sourceMappingURL=runtime.js.map