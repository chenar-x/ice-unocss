import { Rule, RuleContext, Shortcut } from '@unocss/core';
import { T as Theme } from './types-7963d0b3';

declare const verticalAligns: Rule[];
declare const textAligns: Rule[];

declare const animations: Rule[];

declare const bgAttachments: Rule[];
declare const bgBlendModes: Rule[];
declare const bgClips: Rule[];
declare const bgGradients: Rule[];
declare const bgImages: Rule[];
declare const bgOrigins: Rule[];
declare const bgPositions: Rule[];
declare const bgRepeats: Rule[];
declare const bgSizes: Rule[];

declare const outline: Rule[];
declare const listStyle: Rule[];
declare const boxDecorationBreaks: Rule[];
declare const caretOpacity: Rule[];
declare const caretColors: Rule[];
declare const imageRenderings: Rule[];
declare const appearance: Rule[];
declare const placeholder: Rule[];
declare const overscrolls: Rule[];

declare const borderSizes: Rule[];
declare const borderRadius: Rule[];
declare const borderStyles: Rule[];
declare const borders: Rule<{}>[];

declare const parseColorUtil: (body: string, theme: Theme) => {
    opacity: string;
    name: string;
    no: string;
    color: string | undefined;
    rgba: [number, number, number, number] | [number, number, number] | undefined;
} | undefined;
declare const colorResolver: (attribute: string, varName: string) => ([, body]: string[], { theme }: RuleContext<Theme>) => {
    [x: string]: string | number;
} | undefined;
/**
 * @example op10 op-30 opacity-100
 */
declare const opacity: Rule[];
/**
 * @example c-red color-red5 text-red-300
 */
declare const textColors: Rule[];
declare const textDecorationColors: Rule[];
declare const textStrokeColors: Rule[];
declare const bgColors: Rule[];
declare const borderColors: Rule[];
declare const ringColors: Rule[];
declare const ringOffsetColors: Rule[];
declare const divideColors: Rule[];
declare const fillColors: Rule[];

declare const container: Rule<Theme>[];
declare const containerShortcuts: Shortcut<Theme>[];

declare const rules: Rule[];

declare const divideSizes: Rule[];
declare const divideStyles: Rule[];
declare const divides: Rule<{}>[];

declare const filters: Rule<Theme>[];

declare const flex: Rule[];

declare const gaps: Rule[];

declare const grids: Rule[];

declare const overflows: Rule[];

declare const lineClamps: Rule[];

declare const positions: Rule[];
declare const justifies: Rule[];
declare const orders: Rule[];
declare const justifyItems: Rule[];
declare const justifySelfs: Rule[];
declare const alignContents: Rule[];
declare const alignItems: Rule[];
declare const alignSelfs: Rule[];
declare const placeContents: Rule[];
declare const placeItems: Rule[];
declare const placeSelfs: Rule[];
declare const insets: Rule[];
declare const floats: Rule[];
declare const zIndexes: Rule[];
declare const objectPositions: Rule[];
declare const boxSizing: Rule[];

/**
 * Used for debugging, only avaliable in development mode.
 *
 * @example `?` / `where`
 */
declare const questionMark: Rule[];

declare const rings: Rule<Theme>[];

declare const mixBlendModes: Rule[];
declare const boxShadows: Rule<Theme>[];

declare const sizes: Rule<Theme>[];
declare const aspectRatio: Rule[];

declare const paddings: Rule[];
declare const margins: Rule[];

declare const varEmpty = "var(--un-empty,/*!*/ /*!*/)";
declare const displays: Rule[];
declare const appearances: Rule[];
declare const cursors: Rule[];
declare const pointerEvents: Rule[];
declare const resizes: Rule[];
declare const userSelects: Rule[];
declare const whitespaces: Rule[];
declare const contents: Rule[];
declare const breaks: Rule[];
declare const textOverflows: Rule[];
declare const textTransforms: Rule[];
declare const textDecorations: Rule[];
declare const textDecorationStyles: Rule[];
declare const fontStyles: Rule[];
declare const fontSmoothings: Rule[];
declare const hyphens: Rule[];
declare const writingModes: Rule[];
declare const writingOrientations: Rule[];
declare const screenReadersAccess: Rule[];
declare const isolations: Rule[];

declare const tables: Rule[];

declare const transforms: Rule[];

declare const transitions: Rule[];

declare const fontsFamilies: Rule<Theme>[];
declare const fontSizes: Rule<Theme>[];
declare const fontWeights: Rule[];
declare const leadings: Rule<Theme>[];
declare const trackings: Rule<Theme>[];
declare const wordSpacings: Rule<Theme>[];
declare const tabSizes: Rule<Theme>[];
declare const textDecorationLengths: Rule<Theme>[];
declare const textDecorationOffsets: Rule<Theme>[];
declare const textIndents: Rule<Theme>[];
declare const textStrokeWidths: Rule<Theme>[];
declare const textShadows: Rule<Theme>[];
declare const fontVariantNumeric: Rule[];
declare const fonts: Rule<Theme>[];

declare const cssVariables: Rule[];

export { alignContents, alignItems, alignSelfs, animations, appearance, appearances, aspectRatio, bgAttachments, bgBlendModes, bgClips, bgColors, bgGradients, bgImages, bgOrigins, bgPositions, bgRepeats, bgSizes, borderColors, borderRadius, borderSizes, borderStyles, borders, boxDecorationBreaks, boxShadows, boxSizing, breaks, caretColors, caretOpacity, colorResolver, container, containerShortcuts, contents, cssVariables, cursors, displays, divideColors, divideSizes, divideStyles, divides, fillColors, filters, flex, floats, fontSizes, fontSmoothings, fontStyles, fontVariantNumeric, fontWeights, fonts, fontsFamilies, gaps, grids, hyphens, imageRenderings, insets, isolations, justifies, justifyItems, justifySelfs, leadings, lineClamps, listStyle, margins, mixBlendModes, objectPositions, opacity, orders, outline, overflows, overscrolls, paddings, parseColorUtil, placeContents, placeItems, placeSelfs, placeholder, pointerEvents, positions, questionMark, resizes, ringColors, ringOffsetColors, rings, rules, screenReadersAccess, sizes, tabSizes, tables, textAligns, textColors, textDecorationColors, textDecorationLengths, textDecorationOffsets, textDecorationStyles, textDecorations, textIndents, textOverflows, textShadows, textStrokeColors, textStrokeWidths, textTransforms, trackings, transforms, transitions, userSelects, varEmpty, verticalAligns, whitespaces, wordSpacings, writingModes, writingOrientations, zIndexes };
