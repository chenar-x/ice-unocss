'use strict';

const variants$1 = require('./variants.cjs');
const pseudo = require('./pseudo.cjs');

const regexCache = {};
const variantBreakpoints = (matcher, _, theme) => {
  const variantEntries = Object.entries(theme.breakpoints || {}).map(([point, size], idx) => [point, size, idx]);
  for (const [point, size, idx] of variantEntries) {
    if (!regexCache[point])
      regexCache[point] = new RegExp(`^((?:[a|l]t-)?${point}[:-])`);
    const match = matcher.match(regexCache[point]);
    if (!match)
      continue;
    const [, pre] = match;
    let direction = "min";
    let order = parseInt(size);
    if (pre.startsWith("lt-")) {
      direction = "max";
      order = -order;
    }
    const m = matcher.slice(pre.length);
    if (m === "container")
      continue;
    if (pre.startsWith("at-") && idx < variantEntries.length - 1) {
      return {
        matcher: m,
        parent: [`@media (min-width: ${size}) and (max-width: ${variantEntries[idx + 1][1]})`, order]
      };
    }
    return {
      matcher: m,
      parent: [`@media (${direction}-width: ${size})`, order]
    };
  }
};

const variantChildren = [
  variants$1.variantMatcher("children", (input) => `${input} > *`),
  variants$1.variantMatcher("all", (input) => `${input} *`),
  variants$1.variantMatcher("next", (input) => `${input}+*`)
];

const variantColorsClass = [
  variants$1.variantMatcher("dark", (input) => `.dark $$ ${input}`),
  variants$1.variantMatcher("light", (input) => `.light $$ ${input}`)
];
const variantColorsMedia = [
  (v) => {
    const dark = variants$1.variantMatcher("dark")(v);
    if (dark) {
      return {
        ...dark,
        parent: "@media (prefers-color-scheme: dark)"
      };
    }
    const light = variants$1.variantMatcher("light")(v);
    if (light) {
      return {
        ...light,
        parent: "@media (prefers-color-scheme: light)"
      };
    }
  }
];

const variantImportant = {
  match(matcher) {
    if (matcher.startsWith("!")) {
      return {
        matcher: matcher.slice(1),
        body: (body) => {
          body.forEach((v) => {
            if (v[1])
              v[1] += " !important";
          });
          return body;
        }
      };
    }
  }
};
const variantNegative = {
  match(matcher) {
    if (matcher.startsWith("-")) {
      return {
        matcher: matcher.slice(1),
        body: (body) => {
          body.forEach((v) => {
            if (v[0].startsWith("--un-scale") || v[1]?.toString() === "0")
              return;
            v[1] = v[1]?.toString().replace(/[0-9.]+(?:[a-z]+|%)?/, (i) => `-${i}`);
          });
          return body;
        }
      };
    }
  }
};
const variantSpace = (matcher) => {
  if (/^space-?([xy])-?(-?.+)$/.test(matcher) || /^divide-/.test(matcher)) {
    return {
      matcher,
      selector: (input) => {
        return `${input}>:not([hidden])~:not([hidden])`;
      }
    };
  }
};

const variants = [
  variantSpace,
  variantNegative,
  variantImportant,
  variantBreakpoints,
  ...variantChildren,
  pseudo.variantPseudoClasses,
  pseudo.variantPseudoElements
];

exports.variantBreakpoints = variantBreakpoints;
exports.variantChildren = variantChildren;
exports.variantColorsClass = variantColorsClass;
exports.variantColorsMedia = variantColorsMedia;
exports.variantImportant = variantImportant;
exports.variantNegative = variantNegative;
exports.variantSpace = variantSpace;
exports.variants = variants;
