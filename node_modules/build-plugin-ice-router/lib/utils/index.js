"use strict";
/**
 * @file utils.
 * @author tony7lee
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.isObject = exports.formatPathForWin = exports.fillTabWith = exports.transformComponentName = exports.upperCaseFirst = exports.isNestFileName = exports.transformOptionalDynamicPath = exports.isOptionalDynamicPath = exports.transformDynamicPath = exports.isDynamicPath = exports.getJsFilePathsIn = exports.getPagePaths = void 0;
var glob = require("glob");
/**
 * get paths for pages
 *
 * @export
 * @param {string} cwd
 * @returns
 */
function getPagePaths(cwd) {
    return glob.sync('**/*.+(tsx|jsx)', {
        cwd: cwd
    });
}
exports.getPagePaths = getPagePaths;
/**
 * get js file paths
 *
 * @export
 * @param {string} filePath
 * @returns
 */
function getJsFilePathsIn(filePath) {
    return glob.sync(filePath + ".@(ts?(x)|js?(x))");
}
exports.getJsFilePathsIn = getJsFilePathsIn;
function isDynamicPath(str) {
    return typeof str === 'string' && /^\$\w+/.test(str);
}
exports.isDynamicPath = isDynamicPath;
function transformDynamicPath(str) {
    return str.replace(/^\$/, ':');
}
exports.transformDynamicPath = transformDynamicPath;
function isOptionalDynamicPath(str) {
    return typeof str === 'string' && /^\$\w+\$$/.test(str);
}
exports.isOptionalDynamicPath = isOptionalDynamicPath;
function transformOptionalDynamicPath(str) {
    return transformDynamicPath(str).replace(/\$$/, '?');
}
exports.transformOptionalDynamicPath = transformOptionalDynamicPath;
function isNestFileName(str) {
    return typeof str === 'string' && /^_\w+/.test(str);
}
exports.isNestFileName = isNestFileName;
function upperCaseFirst(str) {
    if (typeof str !== 'string')
        return '';
    return str.charAt(0).toUpperCase() + str.slice(1);
}
exports.upperCaseFirst = upperCaseFirst;
function transformComponentName(str) {
    return str.replace(/-/g, '$$$');
}
exports.transformComponentName = transformComponentName;
function fillTabWith(count) {
    return new Array(count).fill('  ').join('');
}
exports.fillTabWith = fillTabWith;
function formatPathForWin(strPath) {
    var isWin = process.platform === 'win32';
    return isWin ? strPath.replace(/\\/g, '/') : strPath;
}
exports.formatPathForWin = formatPathForWin;
// # estimate types
var obj2Str = Object.prototype.toString;
function isObject(v) {
    return obj2Str.call(v) === '[object Object]';
}
exports.isObject = isObject;
//# sourceMappingURL=index.js.map