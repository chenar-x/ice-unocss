module.exports = function (_a, _b) {
    var types = _a.types;
    var routesPath = _b.routesPath;
    var hasLazyImport = false;
    var importName = '';
    return {
        visitor: {
            ImportDeclaration: function (nodePath, state) {
                // only transform route files
                var isRoutesFile = routesPath === state.filename;
                if (isRoutesFile) {
                    var node = nodePath.node;
                    if (types.isStringLiteral(node.source, { value: 'ice' })) {
                        node.specifiers.forEach(function (importSpecifier) {
                            if (importSpecifier.imported && types.isIdentifier(importSpecifier.imported, { name: 'lazy' })) {
                                hasLazyImport = true;
                            }
                            if (types.isImportNamespaceSpecifier(importSpecifier)) {
                                // ice has no default export, just check ImportNamespaceSpecifier
                                importName = importSpecifier.local && importSpecifier.local.name;
                            }
                        });
                    }
                }
            },
            CallExpression: function (nodePath, state) {
                // only transform route files
                var isRoutesFile = routesPath === state.filename;
                if (isRoutesFile) {
                    var node = nodePath.node;
                    if (
                    // case import * as xxx from 'ice'; xxx.lazy
                    (importName && types.isMemberExpression(node.callee)
                        && types.isIdentifier(node.callee.object, { name: importName })
                        && types.isIdentifier(node.callee.property, { name: 'lazy' })) ||
                        (hasLazyImport && (
                        // case import { lazy } from 'ice';
                        types.isIdentifier(node.callee, { name: 'lazy' }) ||
                            // case import { lazy as loadable } from 'ice';
                            types.isIdentifier(node.callee, { name: 'loadable' })))) {
                        if (node.arguments.length === 1) {
                            node.arguments.push(types.booleanLiteral(true));
                        }
                    }
                }
            },
        },
    };
};
//# sourceMappingURL=babelPluginLazy.js.map