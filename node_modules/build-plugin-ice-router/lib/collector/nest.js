"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * recursive nest loop for layout page
 *
 * @param {*} target
 * @param {*} collect
 * @returns
 */
function nestLoop(target, collect) {
    var routePath = target.routePath;
    var out = [];
    var targetChildren = [];
    var targetHandled = false;
    collect.forEach(function (i) {
        if (routePath === i.routePath) {
            targetHandled = true;
            out.push(__assign(__assign({}, i), target));
        }
        else if (routePath.indexOf(i.routePath) === 0) {
            targetHandled = true;
            if (i.children && i.children.filter(function (j) { return (routePath.indexOf(j.routePath) === 0); }).length) {
                i.children = nestLoop(target, i.children);
            }
            else {
                if (!i.children)
                    i.children = [];
                i.children.push(target);
            }
            out.push(i);
        }
        else if (i.routePath.indexOf(routePath) === 0) {
            targetHandled = true;
            targetChildren.push(i);
        }
        else {
            out.push(i);
        }
    });
    // add children to parent target
    if (targetChildren.length)
        target.children = targetChildren;
    if (!targetHandled) {
        out.push(target);
    }
    return out;
}
/**
 * push page into closest layout
 *
 * @param {string} closestLayoutPath
 * @param {*} target
 * @param {*} collect
 */
function pushClosestNode(closestLayoutPath, target, collect) {
    collect.forEach(function (i) {
        if (i.routePath === closestLayoutPath) {
            if (!i.children)
                i.children = [];
            i.children.push(target);
        }
        else if (i.children && i.children.length) {
            pushClosestNode(closestLayoutPath, target, i.children);
        }
    });
}
function nest(layoutMap, pageConfig, routesCollect) {
    var out;
    var layoutKeys = Object.keys(layoutMap);
    var routePath = pageConfig.routePath, isLayoutLike = pageConfig.isLayoutLike;
    // push layout
    if (isLayoutLike) {
        out = nestLoop(pageConfig, routesCollect);
    }
    else {
        // search closest layout path
        var closer_1 = 0;
        var closestLayoutPath_1;
        layoutKeys.forEach(function (layoutPath) {
            var layoutSectionCount = layoutPath.split('/').length;
            if (routePath.indexOf(layoutPath) === 0 && layoutSectionCount > closer_1) {
                closer_1 = layoutSectionCount;
                closestLayoutPath_1 = layoutPath;
            }
        });
        // push page into closest layout
        if (closestLayoutPath_1) {
            pushClosestNode(closestLayoutPath_1, pageConfig, routesCollect);
        }
        // push page into root
        else {
            routesCollect.push(pageConfig);
        }
        out = routesCollect;
    }
    return out;
}
exports.default = nest;
//# sourceMappingURL=nest.js.map