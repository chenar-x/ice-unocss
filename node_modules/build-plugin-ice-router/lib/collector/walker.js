"use strict";
/**
 * @file walker.
 * @author tony7lee
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var fse = require("fs-extra");
var utils_1 = require("../utils");
var nest_1 = require("./nest");
var splicer_1 = require("./splicer");
var amender_1 = require("./amender");
function ignorePath(checkPath, ignoreOptions) {
    if (!ignoreOptions)
        return false;
    var ignoreList = Array.isArray(ignoreOptions) ? ignoreOptions : [ignoreOptions];
    var result = ignoreList.some(function (ignore) {
        if (typeof ignore === 'string' && checkPath.includes(ignore)) {
            return true;
        }
        else if (ignore.pattern) {
            var _a = ignore, pattern = _a.pattern, attributes = _a.attributes;
            return new RegExp(pattern, attributes || '').test(checkPath);
        }
        return false;
    });
    return result;
}
function walker(_a) {
    var rootDir = _a.rootDir, routerOptions = _a.routerOptions, routesTempPath = _a.routesTempPath, pagesDir = _a.pagesDir;
    var ignoreRoutes = routerOptions.ignoreRoutes, _b = routerOptions.ignorePaths, ignorePaths = _b === void 0 ? ['components'] : _b, caseSensitive = routerOptions.caseSensitive;
    var pageFilePaths = (0, utils_1.getPagePaths)(pagesDir);
    var routesCollect = [];
    var routesMap = {};
    var layoutMap = {};
    pageFilePaths.forEach(function (pageFilePath) {
        // ignore files
        var hitIgnoreFilePath = ignorePath(pageFilePath, ignorePaths);
        if (hitIgnoreFilePath)
            return;
        var _a = path.parse(pageFilePath), dir = _a.dir, name = _a.name;
        var dirArr = dir.split('/');
        // estimate _ layout syntax
        var isLayoutLike = (0, utils_1.isNestFileName)(name);
        // omit path from index.jsx/tsx
        var useMainFile = name === 'index';
        if (!useMainFile && !isLayoutLike)
            dirArr.push(name);
        var dirArrFormatSensitive = dirArr.filter(function (s) { return s; });
        var dirArrFormat = dirArrFormatSensitive.map(function (s) { return s.toLowerCase(); });
        var dirArrUpper = dirArrFormat.map(function (s) { return (0, utils_1.upperCaseFirst)(s); }).join('');
        // handle $ syntax: dynamic path
        var dirArrHandleDynamic = (caseSensitive ? dirArrFormatSensitive : dirArrFormat).map(function (i) {
            var out = i;
            // handle dynamic path
            if ((0, utils_1.isOptionalDynamicPath)(i)) {
                out = (0, utils_1.transformOptionalDynamicPath)(i);
            }
            else if ((0, utils_1.isDynamicPath)(i)) {
                out = (0, utils_1.transformDynamicPath)(i);
            }
            return out;
        });
        // get router path
        var routePath = "/" + dirArrHandleDynamic.join('/');
        // get other names
        var compName = "Page" + dirArrUpper;
        var layoutName = "Layout" + dirArrUpper;
        var filePath = (0, utils_1.formatPathForWin)(path.relative(path.dirname(routesTempPath), path.join(pagesDir, pageFilePath)));
        // ignore by user options.
        var ignoreKey = ignorePath(routePath, ignoreRoutes);
        // use shorter path one when same route occurred.
        var isLongerPath = routesMap[routePath] && useMainFile;
        // ignore and back to loop
        if (isLongerPath || ignoreKey)
            return;
        // collect pages and layout
        var pageConfig = {
            routePath: routePath,
            component: compName,
            filePath: filePath,
            isLayoutLike: false
        };
        if (isLayoutLike) {
            pageConfig = __assign(__assign({}, pageConfig), { component: layoutName, isLayoutLike: isLayoutLike });
            layoutMap[routePath] = pageConfig;
        }
        else {
            routesMap[routePath] = pageConfig;
        }
        routesCollect = (0, nest_1.default)(layoutMap, pageConfig, routesCollect);
    });
    // amend collects
    (0, amender_1.default)(rootDir, routesTempPath, routesCollect);
    // generate splices
    var routesSplices = (0, splicer_1.default)(routesCollect, routerOptions);
    // output into .tmp
    fse.outputFileSync(routesTempPath, routesSplices);
    routesSplices = null;
}
exports.default = walker;
//# sourceMappingURL=walker.js.map