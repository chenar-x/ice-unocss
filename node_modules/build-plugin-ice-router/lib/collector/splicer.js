"use strict";
/**
 * @file splicer.
 * @author tony7lee
 */
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("../utils");
/**
 * loop splice
 *
 * @param {*} payload
 * @param {*} collect
 */
function loopSplice(payload, collect, routerOptions) {
    var indent = payload.indent;
    var indentTabs = (0, utils_1.fillTabWith)(indent);
    var indentTabsSub1 = (0, utils_1.fillTabWith)(indent - 1);
    var lazy = routerOptions.lazy;
    // add 2 space per loop
    payload.indent += 2;
    // nest the array stucture
    payload.nestSlice.push('[');
    // run loop
    var depth = function (item) { var _a; return ((_a = item === null || item === void 0 ? void 0 : item.routePathAmend) === null || _a === void 0 ? void 0 : _a.split('/').length) || 0; };
    var sortedCollect = collect.sort(function (a, b) {
        // keep routes order by route path depth
        return depth(b) - depth(a);
    });
    sortedCollect.forEach(function (item) {
        var routePathAmend = item.routePathAmend, component = item.component, filePath = item.filePath, children = item.children, isLayoutLike = item.isLayoutLike, exact = item.exact;
        // collect imports
        if (!payload.nestImportsNames.includes(component)) {
            var nestImportsData = "import " + component + " from '" + filePath + "';\n";
            if (lazy && !children) {
                nestImportsData = "const " + component + " = lazy(() => import(/* webpackChunkName: '" + component + "' */ '" + filePath + "'));\n";
            }
            payload.nestImports.push(nestImportsData);
            // record component exists
            payload.nestImportsNames.push(component);
        }
        // nest object structure
        var defaultExact = exact || 'true';
        payload.nestSlice.push("\n" + indentTabs + "{\n  " + indentTabs + "path: '" + routePathAmend + "',\n  " + indentTabs + "exact: " + (isLayoutLike ? 'false' : defaultExact) + ",\n  " + indentTabs + "component: " + component);
        if (children && children.length) {
            payload.nestSlice.push(",\n  " + indentTabs + "children: ");
            // loop children
            loopSplice(payload, children, routerOptions);
            // children field end
            payload.nestSlice.push(',');
        }
        // nest object end
        payload.nestSlice.push("\n" + indentTabs + "},");
    });
    // nest the array end
    payload.nestSlice.push("\n" + indentTabsSub1 + "]");
}
function splicer(routesCollect, routerOptions) {
    // loop data
    var payload = { nestImports: [], nestImportsNames: [], nestSlice: [], indent: 1 };
    // init loop
    loopSplice(payload, routesCollect, routerOptions);
    var importAhead = '';
    if (routerOptions.lazy) {
        importAhead = 'import { lazy } from \'ice\';\n';
    }
    return "" + importAhead + payload.nestImports.join('') + "\nexport default " + payload.nestSlice.join('') + ";";
}
exports.default = splicer;
//# sourceMappingURL=splicer.js.map