"use strict";

exports.__esModule = true;
exports.__updateRouterMap = __updateRouterMap;
exports.default = generateActions;

var _universalEnv = require("universal-env");

var _listeners = require("./listeners");

var _constants = require("./constants");

/* global my wx tt swan ks */
var __routerMap = {};
var apiCore;

if (_universalEnv.isMiniApp) {
  apiCore = my;
} else if (_universalEnv.isWeChatMiniProgram) {
  apiCore = wx;
} else if (_universalEnv.isByteDanceMicroApp) {
  apiCore = tt;
} else if (_universalEnv.isBaiduSmartProgram) {
  apiCore = swan;
} else if (_universalEnv.isKuaiShouMiniProgram) {
  apiCore = ks;
}

function redirectTo(location, options) {
  options.success = function () {
    (0, _listeners.fireListeners)(location, _constants.REPLACE);
  };

  apiCore.redirectTo(options);
}

function navigateTo(location, options) {
  options.success = function () {
    (0, _listeners.fireListeners)(location, _constants.PUSH);
  };

  apiCore.navigateTo(options);
}

function navigateBack(location, options) {
  apiCore.navigateBack(options);
  (0, _listeners.fireListeners)(location, _constants.POP);
}
/**
 * Navigate to given path.
 */


function push(location, path, query) {
  return navigateTo(location, {
    url: generateUrl(path, query)
  });
}
/**
 * Navigate replace.
 */


function replace(location, path, query) {
  return redirectTo(location, {
    url: generateUrl(path, query)
  });
}
/**
 * Unsupported in miniapp.
 */


function go() {
  throw new Error('Unsupported go in miniapp.');
}
/**
 * Navigate back.
 */


function back(location, n) {
  if (n === void 0) {
    n = 1;
  }

  return navigateBack(location, {
    delta: n
  });
}
/**
 * Navigate back.
 */


function goBack(location, n) {
  if (n === void 0) {
    n = 1;
  }

  return navigateBack(location, {
    delta: n
  });
}
/**
 * Unsupported in miniapp.
 */


function goForward() {
  throw new Error('Unsupported goForward in miniapp.');
}
/**
 * Unsupported in miniapp.
 * @return {boolean} Always true.
 */


function canGo() {
  return true;
}
/**
 * Generate MiniApp url
 * @param {string} path
 * @param {object} query
 */


function generateUrl(path, query) {
  var _path$split = path.split('?'),
      pathname = _path$split[0],
      search = _path$split[1];

  var miniappPath = __routerMap[pathname];

  if (!miniappPath) {
    throw new Error("Path " + path + " is not found");
  }

  if (query) {
    if (search) {
      search += "&" + stringifyQuery(query);
    } else {
      search = stringifyQuery(query);
    }
  }

  return search ? "/" + miniappPath + "?" + search : "/" + miniappPath;
}
/**
 * Stringify query
 * @param {object} query - route query
 * @return {string}
 */


function stringifyQuery(query) {
  return Object.keys(query).reduce(function (total, nextKey, index) {
    return "" + total + (index ? '&' : '') + nextKey + "=" + query[nextKey];
  }, '');
}

function __updateRouterMap(routes) {
  routes.map(function (route) {
    __routerMap[route.path] = route.source;
  });
}

function generateActions(location) {
  var actions = {
    push: push,
    replace: replace,
    back: back,
    go: go,
    canGo: canGo,
    goForward: goForward,
    goBack: goBack
  };
  return Object.keys(actions).reduce(function (result, actionName) {
    result[actionName] = actions[actionName].bind(null, location);
    return result;
  }, {});
}