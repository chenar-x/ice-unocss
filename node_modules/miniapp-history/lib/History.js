"use strict";

exports.__esModule = true;
exports.default = void 0;

var _router = _interopRequireWildcard(require("./router"));

var _Location = _interopRequireDefault(require("./Location"));

var _listeners = require("./listeners");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var MiniAppHistory = /*#__PURE__*/function () {
  function MiniAppHistory(routes) {
    this.location = new _Location.default();
    (0, _router.__updateRouterMap)(routes); // Apply actions for history.

    Object.assign(this, (0, _router.default)(this.location));
  }

  var _proto = MiniAppHistory.prototype;

  _proto.listen = function listen(callback) {
    var listeners = (0, _listeners.addListener)(this.location._pageId, callback);
    return function () {
      var index = -1;

      for (var idx in listeners) {
        if (listeners[idx] === callback) {
          index = idx;
          break;
        }
      }

      if (index > -1) listeners.splice(index, 1);
    };
  };

  _createClass(MiniAppHistory, [{
    key: "length",
    get: function get() {
      // eslint-disable-next-line no-undef
      return getCurrentPages().length;
    }
  }]);

  return MiniAppHistory;
}();

exports.default = MiniAppHistory;