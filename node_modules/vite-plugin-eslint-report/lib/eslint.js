"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var worker_threads_1 = require("worker_threads");
function createESLintEngine(options) {
    var eslint;
    try {
        // eslint-disable-next-line global-require
        var ESLint = require('eslint').ESLint;
        var overrideConfigFile = options.configFile
            ? { overrideConfigFile: options.configFile }
            : {};
        var lintOptions = __assign({ cache: !!options.cache, fix: !!options.fix, extensions: ['.js', '.jsx', '.ts', '.tsx'] }, overrideConfigFile);
        eslint = new ESLint(lintOptions);
    }
    catch (e) {
        // make sure message output after clearConsole by vite server
        setTimeout(function () {
            console.log('some error occurred in eslint checker. please check dependencies of eslint(>7.0.0) and your eslint config, see: https://www.yuque.com/hedgqh/quality/lint');
            console.log('');
            console.log('');
        });
    }
    return eslint;
}
function lintFile(eslint, formatter, file) {
    return __awaiter(this, void 0, void 0, function () {
        var report, eslintFormatter, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, eslint.isPathIgnored(file)];
                case 1:
                    if (!!(_b.sent())) return [3 /*break*/, 9];
                    return [4 /*yield*/, eslint.lintFiles(file)];
                case 2:
                    report = _b.sent();
                    eslintFormatter = void 0;
                    _a = typeof formatter;
                    switch (_a) {
                        case 'string': return [3 /*break*/, 3];
                        case 'function': return [3 /*break*/, 5];
                    }
                    return [3 /*break*/, 6];
                case 3: return [4 /*yield*/, eslint.loadFormatter(formatter)];
                case 4:
                    eslintFormatter = _b.sent();
                    return [3 /*break*/, 8];
                case 5:
                    eslintFormatter = formatter;
                    return [3 /*break*/, 8];
                case 6: return [4 /*yield*/, eslint.loadFormatter('stylish')];
                case 7:
                    eslintFormatter = _b.sent();
                    _b.label = 8;
                case 8:
                    console.log(eslintFormatter.format(report));
                    _b.label = 9;
                case 9: return [2 /*return*/];
            }
        });
    });
}
var initMainThread = function () {
    return new worker_threads_1.Worker(__filename);
};
var initWorkerThread = function () {
    if (!worker_threads_1.parentPort)
        throw Error('parentPort is missing, check file runs in worker thread');
    var eslint;
    var port = worker_threads_1.parentPort.on('message', function (action) {
        switch (action.type) {
            case 'configESLint': {
                var options = action.payload;
                eslint = createESLintEngine(options);
                break;
            }
            case 'lintFile': {
                var _a = action.payload, formatter = _a.formatter, file = _a.file;
                if (eslint && file) {
                    lintFile(eslint, formatter, file);
                }
                break;
            }
            case 'unref':
                port.unref();
                break;
            default:
                break;
        }
    });
};
// run initWorkerThread in worker thread
if (!worker_threads_1.isMainThread) {
    initWorkerThread();
}
exports.default = initMainThread;
//# sourceMappingURL=eslint.js.map