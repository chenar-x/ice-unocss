"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var fse = require("fs-extra");
var app_helpers_1 = require("@builder/app-helpers");
var getPath_1 = require("./utils/getPath");
var checkPageIndexFileExists_1 = require("./utils/checkPageIndexFileExists");
var Generator = /** @class */ (function () {
    function Generator(_a) {
        var srcPath = _a.srcPath, tempPath = _a.tempPath, applyMethod = _a.applyMethod, disableResetPageState = _a.disableResetPageState;
        this.srcPath = srcPath;
        this.tempPath = tempPath;
        this.applyMethod = applyMethod;
        this.disableResetPageState = disableResetPageState;
    }
    Generator.prototype.render = function (rerender) {
        var _this = this;
        if (rerender === void 0) { rerender = false; }
        if (!rerender) {
            // avoid rerendering files
            // generate .ice/store/index.ts
            this.renderAppStore();
            // generate .ice/store/types.ts
            this.renderAppStoreTypes();
        }
        var pagesName = this.applyMethod('getPages', this.srcPath);
        pagesName.forEach(function (pageName) {
            var pageDir = (0, getPath_1.getPageDir)(_this.srcPath, pageName);
            var pageStoreFile = (0, app_helpers_1.formatPath)((0, getPath_1.getPageStorePath)(pageDir));
            var params = { pageName: pageName, pageDir: pageDir, pageStoreFile: pageStoreFile };
            // generate .ice/pages/${pageName}/index.tsx
            _this.renderPageComponent(params);
            // generate .ice/pages/${pageName}/Layout.tsx
            _this.renderPageLayout(params);
        });
    };
    Generator.prototype.renderAppStore = function () {
        var sourceFilename = 'plugins/store/index';
        var appStoreTemplatePath = path.join(__dirname, './template/appStore.ts.ejs');
        var targetPath = path.join(this.tempPath, sourceFilename + ".ts");
        this.applyMethod('addRenderFile', appStoreTemplatePath, targetPath);
    };
    Generator.prototype.renderAppStoreTypes = function () {
        var sourceFilename = 'plugins/store/types';
        var typesTemplatePath = path.join(__dirname, './template/types.ts.ejs');
        var targetPath = path.join(this.tempPath, sourceFilename + ".ts");
        this.applyMethod('addRenderFile', typesTemplatePath, targetPath);
        this.applyMethod('addTypesExport', { source: '../plugins/store/types' });
        this.applyMethod('addImportDeclaration', {
            importSource: '$$ice/plugins/store/types',
            exportMembers: ['IRootDispatch', 'IRootState', 'IStore', 'IStoreModels', 'IStoreDispatch', 'IStoreRootState'],
        });
    };
    Generator.prototype.renderPageComponent = function (_a) {
        var pageName = _a.pageName, pageDir = _a.pageDir, pageStoreFile = _a.pageStoreFile;
        var pageComponentTemplatePath = path.join(__dirname, './template/pageComponent.tsx.ejs');
        var pageComponentTargetPath = path.join(this.tempPath, 'pages', pageName, 'index.tsx');
        var pageComponentSourcePath = (0, app_helpers_1.formatPath)(path.join(pageDir, 'index'));
        var pageComponentName = 'PageComponent';
        var pageStoreExtname = path.extname(pageStoreFile);
        var pageComponentRenderData = {
            pageComponentImport: "import " + pageComponentName + " from '" + pageComponentSourcePath + "'",
            pageComponentExport: pageComponentName,
            storeFileExists: !!pageStoreFile,
            pageStoreImport: pageStoreFile ? "import store from '" + pageStoreFile.replace(pageStoreExtname, '') + "'" : '',
            disableResetPageState: this.disableResetPageState,
        };
        (0, checkPageIndexFileExists_1.default)(pageDir);
        this.applyMethod('addRenderFile', pageComponentTemplatePath, pageComponentTargetPath, pageComponentRenderData);
    };
    Generator.prototype.renderPageLayout = function (_a) {
        var pageName = _a.pageName, pageDir = _a.pageDir, pageStoreFile = _a.pageStoreFile;
        var pageComponentTemplatePath = path.join(__dirname, './template/pageComponent.tsx.ejs');
        var pageComponentTargetPath = path.join(this.tempPath, 'pages', pageName, 'Layout.tsx');
        var pageComponentSourcePath = (0, app_helpers_1.formatPath)(pageDir + "/Layout");
        if (!fse.pathExistsSync(pageComponentSourcePath)) {
            return;
        }
        var pageLayoutName = pageName + "Layout";
        var pageStoreExtname = path.extname(pageStoreFile);
        var pageLayoutRenderData = {
            pageComponentImport: "import " + pageLayoutName + " from '" + pageComponentSourcePath + "'",
            pageComponentExport: pageLayoutName,
            storeFileExists: !!pageStoreFile,
            pageStoreImport: pageStoreFile ? "import store from '" + pageStoreFile.replace(pageStoreExtname, '') + "'" : '',
            disableResetPageState: this.disableResetPageState,
        };
        (0, checkPageIndexFileExists_1.default)(pageDir);
        this.applyMethod('addRenderFile', pageComponentTemplatePath, pageComponentTargetPath, pageLayoutRenderData);
    };
    return Generator;
}());
exports.default = Generator;
//# sourceMappingURL=generator.js.map