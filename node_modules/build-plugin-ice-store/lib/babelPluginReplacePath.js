"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
// match:
// eg: src/pages/home | src/pages/home/index | src/pages/home/index(.tsx|.jsx) | src/pages/index(.tsx|jsx)
var pagePathRegExp = /src\/pages\/\w+((.tsx|.jsx?)$|(\/index(.tsx|.jsx?)?)?$)/;
// eg：src/pages/home/Layout
var layoutPathRegExp = /src\/pages\/\w+\/Layout/;
module.exports = function (_a, _b) {
    var t = _a.types;
    var routesPaths = _b.routesPaths, alias = _b.alias, tempDir = _b.tempDir, applyMethod = _b.applyMethod, rootDir = _b.rootDir;
    return {
        visitor: {
            Program: {
                enter: function (programPath, state) {
                    programPath.traverse({
                        ImportDeclaration: function (nodePath) {
                            var isRoutesFile = routesPaths.includes(state.filename);
                            if (isRoutesFile) {
                                var _a = nodePath.node, source = _a.source, specifiers = _a.specifiers;
                                // issue: https://github.com/ice-lab/icejs/issues/271
                                if (t.isImportDefaultSpecifier(specifiers[0]) && specifiers.length === 1) {
                                    if (t.isStringLiteral(source)) {
                                        var value = source.value;
                                        // 约定式路由：
                                        // e.g: import Home from '../src/pages/Home/index.tsx';
                                        // e.g: import Index from '../src/pages/index.tsx;
                                        // 配置式路由：
                                        // default alias: import Home from '@/pages/Home';
                                        // custom alias: import Home from '$pages/Home';
                                        // relative path: import Home from '../pages/Home'
                                        var newValue = formatPagePath({ routesPath: state.filename, tempDir: tempDir, value: value, alias: alias, applyMethod: applyMethod, rootDir: rootDir });
                                        // replace to: import Home from 'ice/pages/Home'
                                        if (newValue) {
                                            replaceWith(t, nodePath, newValue);
                                        }
                                    }
                                }
                            }
                        },
                        CallExpression: function (nodePath) {
                            var isRoutesFile = routesPaths.includes(state.filename);
                            if (isRoutesFile) {
                                if (t.isImport(nodePath.node.callee)) {
                                    var args = nodePath.node.arguments;
                                    for (var i = 0; i < args.length; i++) {
                                        var value = args[i].value;
                                        if (typeof value === 'string') {
                                            // 约定式路由：
                                            // e.g: const Home = lazy(() => import(/* webpackChunkName: 'Home' */ '../src/pages/Home/index.tsx'));
                                            // 配置式路由：
                                            // default alias: const Home = lazy(() => import('@/pages/Home'));
                                            // custom alias: const Home = lazy(() => import('$pages/home));
                                            // relative path: const Home = lazy(() => import('../pages/Home'));
                                            var newValue = formatPagePath({ routesPath: state.filename, tempDir: tempDir, value: value, alias: alias, applyMethod: applyMethod, rootDir: rootDir });
                                            // replace to: const Home =lazy (() => import('ice/Home/Home'));
                                            if (newValue) {
                                                args[i].value = newValue;
                                            }
                                        }
                                    }
                                }
                            }
                        },
                    });
                }
            }
        },
    };
};
// enum alias:
//  case1: { "@": "./src", "@pages": "./src/pages" }
//  case2: { "@src": "./src", "@pages": "./src/pages" }
//  case3: { "@": "./src", "@/pages": "./src/pages" }
function matchAliasPath(alias, value, applyMethod) {
    var aliasPath = '';
    // use default alias
    if (!Object.keys(alias).length) {
        alias['@'] = 'src';
    }
    // use custom alias
    Object.keys(alias).forEach(function (currKey) {
        if (value.startsWith(currKey)) {
            var _a = value.split(currKey), args = _a.slice(1);
            var currAliasPath = applyMethod('formatPath', path.join.apply(path, __spreadArray([alias[currKey]], args, false)));
            if (currAliasPath.includes('src/pages')) {
                aliasPath = currAliasPath;
            }
        }
    });
    return aliasPath;
}
/**
 * 匹配配置式路由下使用的相对路径并返回相对的 src 的相对路径
 */
function matchRelativePath(routesPath, value, applyMethod) {
    var relativePath = '';
    if (/^(\.\/|\.{2}\/)/.test(value)) {
        relativePath = applyMethod('formatPath', path.relative(process.cwd(), path.join(routesPath, '..', value)));
    }
    return relativePath;
}
/**
 * 格式化路由的替换路径值
 */
function formatPagePath(_a) {
    var routesPath = _a.routesPath, value = _a.value, alias = _a.alias, tempDir = _a.tempDir, applyMethod = _a.applyMethod, rootDir = _a.rootDir;
    var matchedPagePath = matchRelativePath(routesPath, value, applyMethod) || matchAliasPath(alias, value, applyMethod);
    if (matchedPagePath && pagePathRegExp.test(matchedPagePath)) {
        var newValue = '';
        // Note：过滤掉 pages 目录下的单文件形式
        if (/src\/pages\/\w+(.tsx|.jsx?)$/.test(value)) {
            return newValue;
        }
        else {
            var _b = matchedPagePath.split('/'), pageName = _b[2];
            newValue = pageName ? path.join(rootDir, tempDir, 'pages', pageName, 'index.tsx') : '';
        }
        return newValue;
    }
    else if (matchedPagePath && layoutPathRegExp.test(matchedPagePath)) {
        var _c = matchedPagePath.split('/'), pageName = _c[2];
        var newValue = pageName ? path.join(rootDir, tempDir, 'pages', pageName, 'Layout') : '';
        return newValue;
    }
}
/**
 * AST 节点替换
 */
function replaceWith(t, nodePath, value) {
    nodePath.replaceWith(t.ImportDeclaration(nodePath.node.specifiers, t.stringLiteral(value)));
}
//# sourceMappingURL=babelPluginReplacePath.js.map