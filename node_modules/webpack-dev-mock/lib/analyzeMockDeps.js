"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var parser_1 = require("@babel/parser");
var traverse_1 = require("@babel/traverse");
var fse = require("fs-extra");
var path = require("path");
function parseCode(code) {
    return (0, parser_1.parse)(code, {
        sourceType: 'module',
        plugins: ['jsx', 'typescript', 'decorators-legacy', 'dynamicImport', 'classProperties'],
    });
}
function analyzeAST(code, dir) {
    var result = [];
    var ast = parseCode(code);
    var visitor = {
        // const xx = require('./xx');
        CallExpression: function (nodePath) {
            var _a = nodePath.node, callee = _a.callee, args = _a.arguments;
            if (callee.type === 'Identifier' &&
                callee.name === 'require' &&
                args.length === 1 &&
                args[0].type === 'StringLiteral') {
                result.push(args[0].value);
            }
        },
        // import xx from 'xx';
        ImportDeclaration: function (nodePath) {
            result.push(nodePath.node.source.value);
        },
        // export * from 'xx';
        ExportAllDeclaration: function (nodePath) {
            var node = nodePath.node;
            if (node.source) {
                result.push(node.source.value);
            }
        },
        // export * as xx from 'xx';
        ExportNamedDeclaration: function (nodePath) {
            var node = nodePath.node;
            if (node.source) {
                result.push(node.source.value);
            }
        },
    };
    (0, traverse_1.default)(ast, visitor);
    // only analyze relative path
    return result.filter(function (module) { return /^\./.test(module); }).map(function (modulePath) { return path.join(dir, modulePath); });
}
function dedupe(arr) {
    if (!Array.isArray(arr)) {
        throw new TypeError('[dedupe]: arr should be an array;');
    }
    var map = {};
    for (var i = 0, len = arr.length; i < len; i++) {
        var key = arr[i];
        map[key] = true;
    }
    return Object.keys(map);
}
// require.resolve ts extension
require.extensions['.ts'] = require.extensions['.js'];
function analyzeDenpendencies(filePath) {
    var tracedFiles = {};
    var result = [];
    function trace(file) {
        if (!tracedFiles[file]) {
            tracedFiles[file] = true;
            var fileContent = String(fse.readFileSync(file));
            var analyzeResult = dedupe(analyzeAST(fileContent, path.dirname(file)));
            result.push.apply(result, analyzeResult);
            analyzeResult.forEach(function (modulePath) {
                // full path with file extension
                var fullPath = require.resolve(modulePath);
                // only analyze js|ts files
                if (/\.(js|ts)$/.test(fullPath)) {
                    trace(fullPath);
                }
            });
        }
    }
    trace(require.resolve(filePath));
    return dedupe(result);
}
exports.default = analyzeDenpendencies;
//# sourceMappingURL=analyzeMockDeps.js.map