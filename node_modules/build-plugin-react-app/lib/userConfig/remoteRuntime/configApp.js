"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var fse = require("fs-extra");
exports.default = (function (api, _a) {
    var remoteName = _a.remoteName, bootstrap = _a.bootstrap, remoteEntry = _a.remoteEntry, compilePackages = _a.compilePackages, runtimeDir = _a.runtimeDir;
    var context = api.context, getValue = api.getValue, modifyUserConfig = api.modifyUserConfig, onGetWebpackConfig = api.onGetWebpackConfig;
    var rootDir = context.rootDir;
    var runtimePublicPath = 'remoteRuntime';
    // create bootstrap for main app
    var bootstrapEntry = '';
    if (!bootstrap) {
        bootstrapEntry = path.join(getValue('TEMP_PATH'), 'bootstrap.ts');
        fse.writeFileSync(bootstrapEntry, 'import(\'../src/app\')', 'utf-8');
    }
    else {
        bootstrapEntry = path.isAbsolute(bootstrap) ? bootstrap : path.join(rootDir, bootstrap);
    }
    // config moduleFederation
    modifyUserConfig(function (modifyConfig) {
        var remotePlugins = [[require.resolve('./babelPluginRemote'), { libs: compilePackages, remoteName: remoteName }]];
        return {
            babelPlugins: Array.isArray(modifyConfig.babelPlugins) ? modifyConfig.babelPlugins.concat(remotePlugins) : remotePlugins,
            moduleFederation: {
                name: 'app',
                remoteType: 'window',
                remotes: [remoteName],
                shared: [
                    'react',
                    'react-dom',
                    'react-router',
                    'react-router-dom',
                ],
            },
            sourceDir: 'src',
        };
    });
    onGetWebpackConfig(function (config) {
        config.plugin('CopyWebpackPlugin').tap(function (_a) {
            var _b = _a, _c = _b[0], patterns = _c.patterns, restOptions = __rest(_c, ["patterns"]);
            return [__assign({ patterns: __spreadArray(__spreadArray([], patterns, true), [
                        // serve remoteRuntime folder
                        { from: runtimeDir, to: path.join(patterns[0].to, runtimePublicPath) },
                    ], false) }, restOptions)];
        });
        // modify entry by onGetWebpackConfig while polyfill will take effect with src/app
        // config.entryPoints.clear();
        config.entry('index').values().forEach(function (entry) {
            // compatible with entry path in win32
            if (entry.split(path.sep).join('/').match(/\/src\/app/)) {
                config.entry('index').delete(entry);
            }
        });
        config.entry('index').add(bootstrapEntry);
        // eslint-disable-next-line global-require
        var AddAssetHtmlPlugin = require('@builder/pack/deps/add-asset-html-webpack-plugin');
        config.plugin('AddAssetHtmlPlugin').use(AddAssetHtmlPlugin, [{
                filepath: path.resolve(runtimeDir, remoteEntry),
                publicPath: "/" + runtimePublicPath,
            }]).after('HtmlWebpackPlugin');
    });
});
//# sourceMappingURL=configApp.js.map