var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var path = require('path');
var WEB = require('../constants').WEB;
module.exports = function (config, outputDir, context) {
    var rootDir = context.rootDir, _a = context.userConfig.targets, targets = _a === void 0 ? [] : _a;
    // outputPath：build/*
    var outputPath = path.resolve(rootDir, outputDir);
    if (targets.includes(WEB)) {
        // outputPath：build/web/*
        outputPath = path.resolve(rootDir, outputDir, WEB);
    }
    config.output.path(outputPath);
    // copy public folder to outputDir
    // copy-webpack-plugin patterns must be an array
    if (config.plugins.get('CopyWebpackPlugin')) {
        config.plugin('CopyWebpackPlugin').tap(function (_a) {
            var _b = _a, _c = _b[0], patterns = _c.patterns, restOptions = __rest(_c, ["patterns"]);
            var firstPattern = patterns[0], rest = patterns.slice(1);
            firstPattern.to = outputPath;
            return [__assign({ patterns: __spreadArray([firstPattern], rest, true) }, restOptions)];
        });
    }
};
//# sourceMappingURL=outputDir.js.map