var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var path = require('path');
var fs = require('fs-extra');
var HtmlWebpackPlugin = require('@builder/pack/deps/html-webpack-plugin');
var resolveEntryPath = function (entry, rootDir) {
    if (typeof entry === 'string') {
        return path.isAbsolute(entry) ? entry : path.resolve(rootDir, entry);
    }
    else if (Array.isArray(entry)) {
        return entry.map(function (file) { return resolveEntryPath(file, rootDir); });
    }
    return '';
};
var addHotDevClient = function (entry) {
    var webpackDevClientEntry = require.resolve('react-dev-utils/webpackHotDevClient');
    var hotEntries = {};
    Object.keys(entry).forEach(function (key) {
        hotEntries[key] = __spreadArray([webpackDevClientEntry], entry[key], true);
    });
    return hotEntries;
};
// entry: string | array
// entry : { [name]: string | array }
module.exports = function (config, value, context) {
    var rootDir = context.rootDir, command = context.command, userConfig = context.userConfig, commandArgs = context.commandArgs;
    var ignoreHtmlTemplate = command === 'build' && userConfig.ignoreHtmlTemplate;
    var entry;
    if (Array.isArray(value) || typeof value === 'string') {
        entry = {
            index: value,
        };
    }
    else if (Object.prototype.toString.call(value) === '[object Object]') {
        entry = value;
    }
    var entryNames = Object.keys(entry);
    var isMultiEntry = entryNames.length > 1 || userConfig.mpa;
    var pluginConfig = {};
    if (config.plugins.get('HtmlWebpackPlugin')) {
        pluginConfig = __assign({}, config.plugin('HtmlWebpackPlugin').get('args')[0]);
        if (isMultiEntry || ignoreHtmlTemplate) {
            // remove default HtmlWebpackPlugin
            config.plugins.delete('HtmlWebpackPlugin');
        }
    }
    var ignoreFiles = ['index.html'];
    // generate multiple html file
    // webpack-chain entry must be [name]: [...values]
    entryNames.forEach(function (entryName) {
        var entryValue = resolveEntryPath(entry[entryName], rootDir);
        entry[entryName] = typeof entryValue === 'string' ? [entryValue] : entryValue;
        if (isMultiEntry && !ignoreHtmlTemplate) {
            var pluginKey = "HtmlWebpackPlugin_" + entryName;
            var filename = entryName + ".html";
            var htmlPluginOption = {
                filename: filename,
                excludeChunks: entryNames.filter(function (n) { return n !== entryName; }),
                inject: true,
            };
            var entryTemplate = path.join(rootDir, 'public', filename);
            if (fs.existsSync(entryTemplate)) {
                htmlPluginOption.template = entryTemplate;
            }
            config.plugin(pluginKey)
                .use(HtmlWebpackPlugin, [__assign(__assign({}, pluginConfig), htmlPluginOption)]);
            if (ignoreFiles.indexOf(filename) === -1) {
                ignoreFiles.push(filename);
            }
        }
    });
    // ignore html which will generate by htmlPlugin
    if (config.plugins.get('CopyWebpackPlugin')) {
        config.plugin('CopyWebpackPlugin').tap(function (_a) {
            var _b = _a, _c = _b[0], patterns = _c.patterns, restOptions = __rest(_c, ["patterns"]);
            var firstPattern = patterns[0], rest = patterns.slice(1);
            firstPattern.globOptions = __assign(__assign({}, (firstPattern.globOptions || {})), { ignore: ignoreFiles.map(function (ignoreFile) { return "**/public/" + ignoreFile; }) });
            return [__assign({ patterns: __spreadArray([firstPattern], rest, true) }, restOptions)];
        });
    }
    // add webpackHotDevClient when execute command is start and enable HMR
    if (!commandArgs.disableReload && command === 'start') {
        entry = addHotDevClient(entry);
    }
    // remove default entry then add new enrty to webpack config
    config.entryPoints.clear();
    config.merge({ entry: entry });
};
//# sourceMappingURL=entry.js.map