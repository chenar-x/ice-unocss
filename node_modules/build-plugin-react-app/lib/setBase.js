var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var path = require('path');
var HtmlWebpackPlugin = require('@builder/pack/deps/html-webpack-plugin');
var CopyWebpackPlugin = require('@builder/pack/deps/copy-webpack-plugin');
var WebpackPluginImport = require('webpack-plugin-import');
var WebpackPluginQueryLoader = require('query-loader-webpack-plugin').default;
var _a = require('./utils'), getFilePath = _a.getFilePath, getWebOutputPath = _a.getWebOutputPath;
module.exports = function (api, _a) {
    var target = _a.target, webpackConfig = _a.webpackConfig;
    var context = api.context, modifyUserConfig = api.modifyUserConfig;
    var rootDir = context.rootDir, userConfig = context.userConfig;
    var outputPath = getWebOutputPath(context, { target: target });
    webpackConfig
        // SimpleProgressPlugin
        .plugin('SimpleProgressPlugin')
        .tap(function (_a) {
        var args = _a[0];
        return [__assign(__assign({}, args), { progressOptions: {
                    clear: true,
                    callback: function () {
                        console.log();
                    }
                } })];
    })
        .end()
        // HtmlWebpackPlugin
        .plugin('HtmlWebpackPlugin')
        .use(HtmlWebpackPlugin, [{
            inject: true,
            templateParameters: {
                NODE_ENV: process.env.NODE_ENV,
            },
            favicon: getFilePath([
                path.join(rootDir, 'public/favicon.ico'),
                path.join(rootDir, 'public/favicon.png'),
            ]),
            template: path.resolve(rootDir, 'public/index.html'),
            minify: false,
        }])
        .end()
        // CopyWebpackPlugin
        .plugin('CopyWebpackPlugin')
        .use(CopyWebpackPlugin, [{
            patterns: [
                {
                    from: path.resolve(rootDir, 'public'),
                    to: path.resolve(rootDir, outputPath),
                    noErrorOnMissing: true,
                    globOptions: {
                        dot: true,
                        gitignore: true,
                        ignore: ['**/public/index.html'],
                    },
                },
            ]
        }])
        .end()
        // WebpackPluginImport
        .plugin('WebpackPluginImport')
        .use(WebpackPluginImport)
        .end()
        .plugin('WebpackPluginQueryLoader')
        .use(WebpackPluginQueryLoader);
    // auto inject style.js of component (webpack-plugin-import) in mode vite
    if (userConfig.vite) {
        modifyUserConfig('vite.plugins', function (vitePlugins) {
            // eslint-disable-next-line global-require
            return __spreadArray(__spreadArray([], (vitePlugins || []), true), [require('vite-plugin-component-style').default()], false);
        });
    }
    webpackConfig.resolve.merge({
        conditionNames: ['web', 'import', 'require', 'node'],
    });
    return webpackConfig;
};
//# sourceMappingURL=setBase.js.map