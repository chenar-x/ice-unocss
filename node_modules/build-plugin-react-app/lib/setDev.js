var chalk = require('chalk');
var formatWebpackMessages = require('react-dev-utils/formatWebpackMessages');
var openBrowser = require('react-dev-utils/openBrowser');
var logWebpackConfig = require('./utils/logWebpackConfig');
module.exports = function (api) {
    var onHook = api.onHook, context = api.context, getValue = api.getValue;
    var commandArgs = context.commandArgs;
    onHook('before.start.run', function (_a) {
        var config = _a.config;
        logWebpackConfig(config);
    });
    onHook('after.start.compile', function (_a) {
        var urls = _a.urls, stats = _a.stats;
        var serverPath = getValue('SERVER_PATH') || '';
        var statsJson = stats.toJson({
            all: false,
            errors: true,
            warnings: true,
            timings: true,
        });
        // compatible with webpack 5
        ['errors', 'warnings'].forEach(function (jsonKey) {
            statsJson[jsonKey] = (statsJson[jsonKey] || []).map(function (item) { return (item.message || item); });
        });
        var messages = formatWebpackMessages(statsJson);
        // 包含错误时不打印 localUrl 和 assets 信息
        var isSuccessful = !messages.errors.length;
        if (isSuccessful) {
            if (!commandArgs.disableAssets) {
                console.log(stats.toString({
                    errors: false,
                    warnings: false,
                    colors: true,
                    assets: true,
                    chunks: false,
                    entrypoints: false,
                    modules: false,
                    timings: false
                }));
            }
            console.log();
            console.log(chalk.green(' Starting the development server at:'));
            if (process.env.CLOUDIDE_ENV) {
                console.log('   - IDE server: ', "https://" + process.env.WORKSPACE_UUID + "-" + commandArgs.port + "." + process.env.WORKSPACE_HOST);
            }
            else {
                console.log('   - Local  : ', chalk.underline.white(getLocalUrl(urls.localUrlForBrowser, serverPath)));
                console.log('   - Network: ', chalk.underline.white(getLocalUrl(urls.lanUrlForTerminal, serverPath)));
            }
            console.log();
        }
    });
    // open browser on server start
    if (!commandArgs.disableOpen) {
        onHook('after.start.devServer', function (_a) {
            var url = _a.url;
            var serverPath = getValue('SERVER_PATH') || '';
            // do not open browser when restart dev
            if (!process.env.RESTART_DEV)
                openBrowser(getLocalUrl(url, serverPath));
        });
    }
};
function getLocalUrl(url, serverPath) {
    // lanUrlForTerminal returns undefined url when config host
    return serverPath && url ? "" + url + serverPath : url;
}
//# sourceMappingURL=setDev.js.map