var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
var path = require('path');
var _a = require('@builder/user-config'), applyCliOption = _a.applyCliOption, applyUserConfig = _a.applyUserConfig, getEnhancedWebpackConfig = _a.getEnhancedWebpackConfig;
var getWebpackConfig = require('@builder/webpack-config').default;
var getCustomConfigs = require('./config');
var setBase = require('./setBase');
var setDev = require('./setDev');
var setBuild = require('./setBuild');
var setTest = require('./setTest');
var remoteRuntime = require('./userConfig/remoteRuntime').default;
var getInvalidMessage = require('./validateViteConfig').default;
module.exports = function (api) { return __awaiter(_this, void 0, void 0, function () {
    var onGetWebpackConfig, context, registerTask, getValue, modifyUserConfig, log, command, rootDir, userConfig, originalUserConfig, mode, invalidMsg, taskName, webpackConfig, enhancedWebpackConfig;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                onGetWebpackConfig = api.onGetWebpackConfig, context = api.context, registerTask = api.registerTask, getValue = api.getValue, modifyUserConfig = api.modifyUserConfig, log = api.log;
                command = context.command, rootDir = context.rootDir, userConfig = context.userConfig, originalUserConfig = context.originalUserConfig;
                mode = command === 'start' ? 'development' : 'production';
                invalidMsg = getInvalidMessage(originalUserConfig);
                if (invalidMsg) {
                    log.info(invalidMsg);
                }
                if (userConfig.vitePlugins) {
                    // transform vitePlugins to vite.plugins
                    modifyUserConfig('vite.plugins', userConfig.vitePlugins, { deepmerge: true });
                }
                // register cli option
                applyCliOption(api);
                // register user config
                applyUserConfig(api, { customConfigs: getCustomConfigs(userConfig) });
                // modify default babel config when jsx runtime is enabled
                if (getValue('HAS_JSX_RUNTIME')) {
                    modifyUserConfig('babelPresets', (userConfig.babelPresets || []).concat([['@babel/preset-react', { runtime: 'automatic' }]]));
                    if (userConfig.vite) {
                        modifyUserConfig('vite.esbuild', { jsxInject: 'import React from \'react\'' }, { deepmerge: true });
                    }
                }
                // modify minify options
                if (userConfig.swc && !Object.prototype.hasOwnProperty.call(originalUserConfig, 'minify')) {
                    modifyUserConfig('minify', 'swc');
                }
                // set webpack config
                onGetWebpackConfig(function (chainConfig) {
                    // add resolve modules of project node_modules
                    chainConfig.resolve.modules.add(path.join(rootDir, 'node_modules'));
                });
                taskName = 'web';
                webpackConfig = getWebpackConfig(mode);
                enhancedWebpackConfig = getEnhancedWebpackConfig(api, { webpackConfig: webpackConfig });
                enhancedWebpackConfig.name(taskName);
                setBase(api, { webpackConfig: enhancedWebpackConfig });
                registerTask(taskName, enhancedWebpackConfig);
                if (command === 'start') {
                    setDev(api);
                }
                if (command === 'build') {
                    setBuild(api);
                }
                if (command === 'test') {
                    setTest(api);
                }
                if (!userConfig.remoteRuntime) return [3 /*break*/, 2];
                return [4 /*yield*/, remoteRuntime(api, userConfig.remoteRuntime)];
            case 1:
                _a.sent();
                _a.label = 2;
            case 2: return [2 /*return*/];
        }
    });
}); };
//# sourceMappingURL=index.js.map