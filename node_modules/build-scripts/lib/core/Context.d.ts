import webpack, { MultiStats } from 'webpack';
import { Logger } from 'npmlog';
import { AggregatedResult } from '@jest/test-result';
import { GlobalConfig } from '@jest/types/build/Config';
import type WebpackDevServer from 'webpack-dev-server';
import { IHash, Json, JsonValue, MaybeArray, MaybePromise, JsonArray } from '../types';
import WebpackChain = require('webpack-chain');
declare const PLUGIN_CONTEXT_KEY: ("webpack" | "command" | "commandArgs" | "rootDir" | "userConfig" | "originalUserConfig" | "pkg")[];
declare const VALIDATION_MAP: {
    string: "isString";
    number: "isNumber";
    array: "isArray";
    object: "isObject";
    boolean: "isBoolean";
};
export declare type IWebpack = typeof webpack;
export declare type PluginContext = Pick<Context, typeof PLUGIN_CONTEXT_KEY[number]>;
export declare type UserConfigContext = PluginContext & {
    taskName: string;
};
export declare type ValidationKey = keyof typeof VALIDATION_MAP;
export interface IJestResult {
    results: AggregatedResult;
    globalConfig: GlobalConfig;
}
export interface IOnHookCallbackArg {
    err?: Error;
    args?: CommandArgs;
    stats?: MultiStats;
    url?: string;
    devServer?: WebpackDevServer;
    config?: any;
    result?: IJestResult;
}
export interface IOnHookCallback {
    (arg?: IOnHookCallbackArg): MaybePromise<void>;
}
export interface IOnHook {
    (eventName: string, callback: IOnHookCallback): void;
}
export interface IPluginConfigWebpack {
    (config: WebpackChain): Promise<void> | void;
}
export interface IUserConfigWebpack {
    (config: WebpackChain, value: JsonValue, context: UserConfigContext): Promise<void> | void;
}
export interface IValidation {
    (value: any): boolean;
}
export interface IUserConfigArgs {
    name: string;
    configWebpack?: IUserConfigWebpack;
    defaultValue?: any;
    validation?: ValidationKey | IValidation;
    ignoreTasks?: string[];
}
export interface ICliOptionArgs {
    name: string;
    configWebpack?: IUserConfigWebpack;
    commands?: string[];
    ignoreTasks?: string[];
}
export interface IOnGetWebpackConfig {
    (name: string, fn: IPluginConfigWebpack): void;
    (fn: IPluginConfigWebpack): void;
}
export interface IOnGetJestConfig {
    (fn: IJestConfigFunction): void;
}
export interface IRegisterTask {
    (name: string, chainConfig: WebpackChain): void;
}
export interface ICancelTask {
    (name: string): void;
}
export interface IMethodRegistration {
    (args?: any): void;
}
export interface IMethodCurry {
    (data?: any): IMethodRegistration;
}
export declare type IMethodFunction = IMethodRegistration | IMethodCurry;
export interface IMethodOptions {
    pluginName?: boolean;
}
export interface IRegisterMethod {
    (name: string, fn: IMethodFunction, options?: IMethodOptions): void;
}
declare type IMethod = [string, string] | string;
export interface IApplyMethod {
    (config: IMethod, ...args: any[]): any;
}
export interface IApplyMethodAPI {
    (name: string, ...args: any[]): any;
}
export interface IHasMethod {
    (name: string): boolean;
}
export interface IModifyConfig {
    (userConfig: IUserConfig): Omit<IUserConfig, 'plugins'>;
}
export interface IModifyUserConfig {
    (configKey: string | IModifyConfig, value?: any, options?: {
        deepmerge: boolean;
    }): void;
}
export interface IGetAllPlugin {
    (dataKeys?: string[]): Partial<IPluginInfo>[];
}
export interface IPluginAPI {
    log: Logger;
    context: PluginContext;
    registerTask: IRegisterTask;
    getAllTask: () => string[];
    getAllPlugin: IGetAllPlugin;
    onGetWebpackConfig: IOnGetWebpackConfig;
    onGetJestConfig: IOnGetJestConfig;
    onHook: IOnHook;
    setValue: <T>(name: string, value: T) => void;
    getValue: <T>(name: string) => T;
    registerUserConfig: (args: MaybeArray<IUserConfigArgs>) => void;
    hasRegistration: (name: string, type?: 'cliOption' | 'userConfig') => boolean;
    registerCliOption: (args: MaybeArray<ICliOptionArgs>) => void;
    registerMethod: IRegisterMethod;
    applyMethod: IApplyMethodAPI;
    modifyUserConfig: IModifyUserConfig;
}
export interface IPluginInfo {
    fn: IPlugin;
    name?: string;
    pluginPath?: string;
    options: IPluginOptions;
}
export declare type IPluginOptions = Json | JsonArray;
export interface IPlugin {
    (api: IPluginAPI, options?: IPluginOptions): MaybePromise<void>;
}
export declare type CommandName = 'start' | 'build' | 'test';
export declare type CommandArgs = IHash<any>;
export declare type IPluginList = (string | [string, Json])[];
export declare type IGetBuiltInPlugins = (userConfig: IUserConfig) => IPluginList;
export declare type CommandModule<T> = (context: Context, options: any) => Promise<T>;
export interface ICommandModules<T = any> {
    [command: string]: CommandModule<T>;
}
export declare type RegisterCommandModules = (key: string, module: CommandModule<any>) => void;
export interface IContextOptions {
    command: CommandName;
    rootDir: string;
    args: CommandArgs;
    plugins?: IPluginList;
    getBuiltInPlugins?: IGetBuiltInPlugins;
    commandModules?: ICommandModules;
}
export interface ITaskConfig {
    name: string;
    chainConfig: WebpackChain;
    modifyFunctions: IPluginConfigWebpack[];
}
export interface IUserConfig extends Json {
    plugins: IPluginList;
}
export interface IModeConfig {
    [name: string]: IUserConfig;
}
export interface IJestConfigFunction {
    (JestConfig: Json): Json;
}
export interface IModifyRegisteredConfigCallbacks<T> {
    (configArgs: T): T;
}
export interface IUserConfigRegistration {
    [key: string]: IUserConfigArgs;
}
export interface ICliOptionRegistration {
    [key: string]: ICliOptionArgs;
}
export interface IModifyConfigRegistration {
    (configFunc: IModifyRegisteredConfigCallbacks<IUserConfigRegistration>): void;
    (configName: string, configFunc: IModifyRegisteredConfigCallbacks<IUserConfigArgs>): void;
}
export interface IModifyCliRegistration {
    (configFunc: IModifyRegisteredConfigCallbacks<ICliOptionRegistration>): void;
    (configName: string, configFunc: IModifyRegisteredConfigCallbacks<ICliOptionArgs>): void;
}
export declare type IModifyRegisteredConfigArgs = [string, IModifyRegisteredConfigCallbacks<IUserConfigArgs>] | [IModifyRegisteredConfigCallbacks<IUserConfigRegistration>];
export declare type IModifyRegisteredCliArgs = [string, IModifyRegisteredConfigCallbacks<ICliOptionArgs>] | [IModifyRegisteredConfigCallbacks<ICliOptionRegistration>];
export declare type IOnGetWebpackConfigArgs = [string, IPluginConfigWebpack] | [IPluginConfigWebpack];
export declare type IRegistrationKey = 'modifyConfigRegistrationCallbacks' | 'modifyCliRegistrationCallbacks';
declare class Context {
    command: CommandName;
    commandArgs: CommandArgs;
    rootDir: string;
    webpack: IWebpack;
    pkg: Json;
    userConfig: IUserConfig;
    originalUserConfig: IUserConfig;
    plugins: IPluginInfo[];
    private options;
    private configArr;
    private modifyConfigFns;
    private modifyJestConfig;
    private modifyConfigRegistrationCallbacks;
    private modifyCliRegistrationCallbacks;
    private eventHooks;
    private internalValue;
    private userConfigRegistration;
    private cliOptionRegistration;
    private methodRegistration;
    private cancelTaskNames;
    commandModules: ICommandModules;
    constructor(options: IContextOptions);
    private registerConfig;
    private runConfigWebpack;
    private getProjectFile;
    private getUserConfig;
    private mergeModeConfig;
    private resolvePlugins;
    getAllPlugin: IGetAllPlugin;
    registerTask: IRegisterTask;
    cancelTask: ICancelTask;
    registerMethod: IRegisterMethod;
    applyMethod: IApplyMethod;
    hasMethod: IHasMethod;
    modifyUserConfig: IModifyUserConfig;
    modifyConfigRegistration: IModifyConfigRegistration;
    modifyCliRegistration: IModifyCliRegistration;
    getAllTask: () => string[];
    onGetWebpackConfig: IOnGetWebpackConfig;
    onGetJestConfig: IOnGetJestConfig;
    runJestConfig: (jestConfig: Json) => Json;
    onHook: IOnHook;
    applyHook: (key: string, opts?: {}) => Promise<void>;
    setValue: (key: string | number, value: any) => void;
    getValue: (key: string | number) => any;
    registerUserConfig: (args: MaybeArray<IUserConfigArgs>) => void;
    hasRegistration: (name: string, type?: 'cliOption' | 'userConfig') => boolean;
    registerCliOption: (args: MaybeArray<ICliOptionArgs>) => void;
    resolveConfig: () => Promise<void>;
    private runPlugins;
    private checkPluginValue;
    private runConfigModification;
    private runUserConfig;
    private runCliOption;
    private runWebpackFunctions;
    registerCommandModules(moduleKey: string, module: CommandModule<any>): void;
    getCommandModule(options: {
        command: CommandName;
        commandArgs: CommandArgs;
        userConfig: IUserConfig;
    }): CommandModule<any>;
    setUp: () => Promise<ITaskConfig[]>;
    getWebpackConfig: () => ITaskConfig[];
    run: <T, P>(options?: T) => Promise<P>;
}
export default Context;
