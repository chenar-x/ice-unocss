"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const chalk_1 = require("chalk");
const webpackStats_1 = require("../utils/webpackStats");
const fs = require("fs-extra");
const path = require("path");
const log = require("../utils/log");
module.exports = function (context, options) {
    return __awaiter(this, void 0, void 0, function* () {
        const { eject } = options || {};
        const configArr = context.getWebpackConfig();
        const { command, commandArgs, applyHook, rootDir, webpack: webpackInstance } = context;
        yield applyHook(`before.${command}.load`, { args: commandArgs, webpackConfig: configArr });
        // eject config
        if (eject) {
            return configArr;
        }
        if (!configArr.length) {
            const errorMsg = 'No webpack config found.';
            log.warn('CONFIG', errorMsg);
            yield applyHook(`error`, { err: new Error(errorMsg) });
            return;
        }
        // clear build directory
        const defaultPath = path.resolve(rootDir, 'build');
        configArr.forEach(v => {
            try {
                const userBuildPath = v.chainConfig.output.get('path');
                const buildPath = path.resolve(rootDir, userBuildPath);
                fs.emptyDirSync(buildPath);
            }
            catch (e) {
                if (fs.existsSync(defaultPath)) {
                    fs.emptyDirSync(defaultPath);
                }
            }
        });
        const webpackConfig = configArr.map(v => v.chainConfig.toConfig());
        yield applyHook(`before.${command}.run`, {
            args: commandArgs,
            config: webpackConfig,
        });
        let compiler;
        try {
            compiler = webpackInstance(webpackConfig);
        }
        catch (err) {
            log.error('CONFIG', chalk_1.default.red('Failed to load webpack config.'));
            yield applyHook(`error`, { err });
            throw err;
        }
        const result = yield new Promise((resolve, reject) => {
            // typeof(stats) is webpack.compilation.MultiStats
            compiler.run((err, stats) => {
                if (err) {
                    log.error('WEBPACK', err.stack || err.toString());
                    reject(err);
                    return;
                }
                const isSuccessful = webpackStats_1.default({
                    stats,
                });
                if (isSuccessful) {
                    resolve({
                        stats,
                    });
                }
                else {
                    reject(new Error('webpack compile error'));
                }
            });
        });
        yield applyHook(`after.${command}.compile`, result);
    });
};
