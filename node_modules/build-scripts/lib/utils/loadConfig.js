"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const buildConfig_1 = require("./buildConfig");
const JSON5 = require("json5");
function loadConfig(filePath, log) {
    return __awaiter(this, void 0, void 0, function* () {
        const start = Date.now();
        const isJson = filePath.endsWith('.json');
        const isTS = filePath.endsWith('.ts');
        const isMjs = filePath.endsWith('.mjs');
        let userConfig;
        if (isJson) {
            return JSON5.parse(fs.readFileSync(filePath, 'utf8'));
        }
        if (isMjs) {
            const fileUrl = require('url').pathToFileURL(filePath);
            if (isTS) {
                // if config file is a typescript file
                // transform config first, write it to disk
                // load it with native Node ESM
                const code = yield buildConfig_1.default(filePath, true);
                const tempFile = `${filePath}.js`;
                fs.writeFileSync(tempFile, code);
                try {
                    // eslint-disable-next-line no-eval
                    userConfig = (yield eval(`import(tempFile + '?t=${Date.now()}')`)).default;
                }
                catch (err) {
                    fs.unlinkSync(tempFile);
                    throw err;
                }
                // delete the file after eval
                fs.unlinkSync(tempFile);
                log.verbose('[config]', `TS + native esm module loaded in ${Date.now() - start}ms, ${fileUrl}`);
            }
            else {
                // eslint-disable-next-line no-eval
                userConfig = (yield eval(`import(fileUrl + '?t=${Date.now()}')`)).default;
                log.verbose('[config]', `native esm config loaded in ${Date.now() - start}ms, ${fileUrl}`);
            }
        }
        if (!userConfig && !isTS && !isMjs) {
            // try to load config as cjs module
            try {
                delete require.cache[require.resolve(filePath)];
                userConfig = require(filePath);
                log.verbose('[config]', `cjs module loaded in ${Date.now() - start}ms`);
            }
            catch (e) {
                const ignored = new RegExp([
                    `Cannot use import statement`,
                    `Must use import to load ES Module`,
                    // #1635, #2050 some Node 12.x versions don't have esm detection
                    // so it throws normal syntax errors when encountering esm syntax
                    `Unexpected token`,
                    `Unexpected identifier`,
                ].join('|'));
                if (!ignored.test(e.message)) {
                    throw e;
                }
            }
        }
        if (!userConfig) {
            // if cjs module load failed, the config file is ts or using es import syntax
            // bundle config with cjs format
            const code = yield buildConfig_1.default(filePath, false);
            const tempFile = `${filePath}.js`;
            fs.writeFileSync(tempFile, code);
            delete require.cache[require.resolve(tempFile)];
            try {
                // eslint-disable-next-line @typescript-eslint/no-var-requires
                const raw = require(tempFile);
                // eslint-disable-next-line no-underscore-dangle
                userConfig = raw.__esModule ? raw.default : raw;
            }
            catch (err) {
                fs.unlinkSync(tempFile);
                throw err;
            }
            fs.unlinkSync(tempFile);
            log.verbose('[config]', `bundled module file loaded in ${Date.now() - start}m`);
        }
        return userConfig;
    });
}
exports.default = loadConfig;
